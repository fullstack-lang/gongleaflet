// generated by gong
import { Component, OnInit, AfterViewInit, ViewChild, Inject, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs'
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { MatButton } from '@angular/material/button'

import { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog'
import { DialogData, FrontRepoService, FrontRepo, NullInt64, SelectionMode } from '../front-repo.service'
import { SelectionModel } from '@angular/cdk/collections';

const allowMultiSelect = true;

import { Router, RouterState } from '@angular/router';
import { VisualMapDB } from '../visualmap-db'
import { VisualMapService } from '../visualmap.service'

// TableComponent is initilizaed from different routes
// TableComponentMode detail different cases 
enum TableComponentMode {
  DISPLAY_MODE,
  ONE_MANY_ASSOCIATION_MODE,
  MANY_MANY_ASSOCIATION_MODE,
}

// generated table component
@Component({
  selector: 'app-visualmapstable',
  templateUrl: './visualmaps-table.component.html',
  styleUrls: ['./visualmaps-table.component.css'],
})
export class VisualMapsTableComponent implements OnInit {

  // mode at invocation
  mode: TableComponentMode

  // used if the component is called as a selection component of VisualMap instances
  selection: SelectionModel<VisualMapDB>;
  initialSelection = new Array<VisualMapDB>();

  // the data source for the table
  visualmaps: VisualMapDB[];
  matTableDataSource: MatTableDataSource<VisualMapDB>

  // front repo, that will be referenced by this.visualmaps
  frontRepo: FrontRepo

  // displayedColumns is referenced by the MatTable component for specify what columns
  // have to be displayed and in what order
  displayedColumns: string[];

  // for sorting & pagination
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  ngAfterViewInit() {

    // enable sorting on all fields (including pointers and reverse pointer)
    this.matTableDataSource.sortingDataAccessor = (visualmapDB: VisualMapDB, property: string) => {
      switch (property) {
        // insertion point for specific sorting accessor
        case 'Lat':
          return visualmapDB.Lat;

        case 'Lng':
          return visualmapDB.Lng;

        case 'Name':
          return visualmapDB.Name;

        case 'ZoomLevel':
          return visualmapDB.ZoomLevel;

        case 'UrlTemplate':
          return visualmapDB.UrlTemplate;

        case 'Attribution':
          return visualmapDB.Attribution;

        case 'MaxZoom':
          return visualmapDB.MaxZoom;

        case 'ZoomControl':
          return visualmapDB.ZoomControl;

        case 'AttributionControl':
          return visualmapDB.AttributionControl;

        case 'ZoomSnap':
          return visualmapDB.ZoomSnap;

        default:
          return VisualMapDB[property];
      }
    };

    // enable filtering on all fields (including pointers and reverse pointer, which is not done by default)
    this.matTableDataSource.filterPredicate = (visualmapDB: VisualMapDB, filter: string) => {

      // filtering is based on finding a lower case filter into a concatenated string
      // the visualmapDB properties
      let mergedContent = ""

      // insertion point for merging of fields
      mergedContent += visualmapDB.Lat.toString()
      mergedContent += visualmapDB.Lng.toString()
      mergedContent += visualmapDB.Name.toLowerCase()
      mergedContent += visualmapDB.ZoomLevel.toString()
      mergedContent += visualmapDB.UrlTemplate.toLowerCase()
      mergedContent += visualmapDB.Attribution.toLowerCase()
      mergedContent += visualmapDB.MaxZoom.toString()

      let isSelected = mergedContent.includes(filter.toLowerCase())
      return isSelected
    };

    this.matTableDataSource.sort = this.sort;
    this.matTableDataSource.paginator = this.paginator;
  }

  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.matTableDataSource.filter = filterValue.trim().toLowerCase();
  }

  constructor(
    private visualmapService: VisualMapService,
    private frontRepoService: FrontRepoService,

    // not null if the component is called as a selection component of visualmap instances
    public dialogRef: MatDialogRef<VisualMapsTableComponent>,
    @Optional() @Inject(MAT_DIALOG_DATA) public dialogData: DialogData,

    private router: Router,
  ) {

    // compute mode
    if (dialogData == undefined) {
      this.mode = TableComponentMode.DISPLAY_MODE
    } else {
      switch (dialogData.SelectionMode) {
        case SelectionMode.ONE_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.ONE_MANY_ASSOCIATION_MODE
          break
        case SelectionMode.MANY_MANY_ASSOCIATION_MODE:
          this.mode = TableComponentMode.MANY_MANY_ASSOCIATION_MODE
          break
        default:
      }
    }

    // observable for changes in structs
    this.visualmapService.VisualMapServiceChanged.subscribe(
      message => {
        if (message == "post" || message == "update" || message == "delete") {
          this.getVisualMaps()
        }
      }
    )
    if (this.mode == TableComponentMode.DISPLAY_MODE) {
      this.displayedColumns = ['ID', 'Edit', 'Delete', // insertion point for columns to display
        "Lat",
        "Lng",
        "Name",
        "ZoomLevel",
        "UrlTemplate",
        "Attribution",
        "MaxZoom",
        "ZoomControl",
        "AttributionControl",
        "ZoomSnap",
      ]
    } else {
      this.displayedColumns = ['select', 'ID', // insertion point for columns to display
        "Lat",
        "Lng",
        "Name",
        "ZoomLevel",
        "UrlTemplate",
        "Attribution",
        "MaxZoom",
        "ZoomControl",
        "AttributionControl",
        "ZoomSnap",
      ]
      this.selection = new SelectionModel<VisualMapDB>(allowMultiSelect, this.initialSelection);
    }

  }

  ngOnInit(): void {
    this.getVisualMaps()
    this.matTableDataSource = new MatTableDataSource(this.visualmaps)
  }

  getVisualMaps(): void {
    this.frontRepoService.pull().subscribe(
      frontRepo => {
        this.frontRepo = frontRepo

        this.visualmaps = this.frontRepo.VisualMaps_array;

        // insertion point for variables Recoveries

        // in case the component is called as a selection component
        if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {
          this.visualmaps.forEach(
            visualmap => {
              let ID = this.dialogData.ID
              let revPointer = visualmap[this.dialogData.ReversePointer]
              if (revPointer.Int64 == ID) {
                this.initialSelection.push(visualmap)
              }
            }
          )
          this.selection = new SelectionModel<VisualMapDB>(allowMultiSelect, this.initialSelection);
        }

        if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

          let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
          let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

          if (sourceInstance[this.dialogData.SourceField]) {
            for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
              let visualmap = associationInstance[this.dialogData.IntermediateStructField]
              this.initialSelection.push(visualmap)
            }
          }
          this.selection = new SelectionModel<VisualMapDB>(allowMultiSelect, this.initialSelection);
        }

        // update the mat table data source
        this.matTableDataSource.data = this.visualmaps
      }
    )
  }

  // newVisualMap initiate a new visualmap
  // create a new VisualMap objet
  newVisualMap() {
  }

  deleteVisualMap(visualmapID: number, visualmap: VisualMapDB) {
    // list of visualmaps is truncated of visualmap before the delete
    this.visualmaps = this.visualmaps.filter(h => h !== visualmap);

    this.visualmapService.deleteVisualMap(visualmapID).subscribe(
      visualmap => {
        this.visualmapService.VisualMapServiceChanged.next("delete")
      }
    );
  }

  editVisualMap(visualmapID: number, visualmap: VisualMapDB) {

  }

  // display visualmap in router
  displayVisualMapInRouter(visualmapID: number) {
    this.router.navigate(["github_com_fullstack_lang_gongleaflet_go-" + "visualmap-display", visualmapID])
  }

  // set editor outlet
  setEditorRouterOutlet(visualmapID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongleaflet_go_editor: ["github_com_fullstack_lang_gongleaflet_go-" + "visualmap-detail", visualmapID]
      }
    }]);
  }

  // set presentation outlet
  setPresentationRouterOutlet(visualmapID: number) {
    this.router.navigate([{
      outlets: {
        github_com_fullstack_lang_gongleaflet_go_presentation: ["github_com_fullstack_lang_gongleaflet_go-" + "visualmap-presentation", visualmapID]
      }
    }]);
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.visualmaps.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.visualmaps.forEach(row => this.selection.select(row));
  }

  save() {

    if (this.mode == TableComponentMode.ONE_MANY_ASSOCIATION_MODE) {

      let toUpdate = new Set<VisualMapDB>()

      // reset all initial selection of visualmap that belong to visualmap
      this.initialSelection.forEach(
        visualmap => {
          visualmap[this.dialogData.ReversePointer].Int64 = 0
          visualmap[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(visualmap)
        }
      )

      // from selection, set visualmap that belong to visualmap
      this.selection.selected.forEach(
        visualmap => {
          let ID = +this.dialogData.ID
          visualmap[this.dialogData.ReversePointer].Int64 = ID
          visualmap[this.dialogData.ReversePointer].Valid = true
          toUpdate.add(visualmap)
        }
      )

      // update all visualmap (only update selection & initial selection)
      toUpdate.forEach(
        visualmap => {
          this.visualmapService.updateVisualMap(visualmap)
            .subscribe(visualmap => {
              this.visualmapService.VisualMapServiceChanged.next("update")
            });
        }
      )
    }

    if (this.mode == TableComponentMode.MANY_MANY_ASSOCIATION_MODE) {

      let mapOfSourceInstances = this.frontRepo[this.dialogData.SourceStruct + "s"]
      let sourceInstance = mapOfSourceInstances.get(this.dialogData.ID)

      // First, parse all instance of the association struct and remove the instance
      // that have unselect
      let unselectedVisualMap = new Set<number>()
      for (let visualmap of this.initialSelection) {
        if (this.selection.selected.includes(visualmap)) {
          // console.log("visualmap " + visualmap.Name + " is still selected")
        } else {
          console.log("visualmap " + visualmap.Name + " has been unselected")
          unselectedVisualMap.add(visualmap.ID)
          console.log("is unselected " + unselectedVisualMap.has(visualmap.ID))
        }
      }

      // delete the association instance
      if (sourceInstance[this.dialogData.SourceField]) {
        for (let associationInstance of sourceInstance[this.dialogData.SourceField]) {
          let visualmap = associationInstance[this.dialogData.IntermediateStructField]
          if (unselectedVisualMap.has(visualmap.ID)) {

            this.frontRepoService.deleteService( this.dialogData.IntermediateStruct, associationInstance )
          }
        }
      }

      // is the source array is emptyn create it
      if (sourceInstance[this.dialogData.SourceField] == undefined) {
        sourceInstance[this.dialogData.SourceField] = new Array<any>()
      }

      // second, parse all instance of the selected
      if (sourceInstance[this.dialogData.SourceField]) {
        this.selection.selected.forEach(
          visualmap => {
            if (!this.initialSelection.includes(visualmap)) {
              // console.log("visualmap " + visualmap.Name + " has been added to the selection")

              let associationInstance = {
                Name: sourceInstance["Name"] + "-" + visualmap.Name,
              }

              associationInstance[this.dialogData.IntermediateStructField+"ID"] = new NullInt64
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Int64 = visualmap.ID
              associationInstance[this.dialogData.IntermediateStructField+"ID"].Valid = true

              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"] = new NullInt64
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Int64 = sourceInstance["ID"]
              associationInstance[this.dialogData.SourceStruct + "_" + this.dialogData.SourceField + "DBID"].Valid = true

              this.frontRepoService.postService( this.dialogData.IntermediateStruct, associationInstance )

            } else {
              // console.log("visualmap " + visualmap.Name + " is still selected")
            }
          }
        )
      }

      // this.selection = new SelectionModel<VisualMapDB>(allowMultiSelect, this.initialSelection);
    }

    // why pizza ?
    this.dialogRef.close('Pizza!');
  }
}
