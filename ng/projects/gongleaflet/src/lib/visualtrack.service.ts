// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { VisualTrackDB } from './visualtrack-db'
import { VisualTrack, CopyVisualTrackToVisualTrackDB } from './visualtrack'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { LayerGroupDB } from './layergroup-db'
import { DivIconDB } from './divicon-db'

@Injectable({
  providedIn: 'root'
})
export class VisualTrackService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  VisualTrackServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private visualtracksUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.visualtracksUrl = origin + '/api/github.com/fullstack-lang/gongleaflet/go/v1/visualtracks';
  }

  /** GET visualtracks from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB[]> {
    return this.getVisualTracks(GONG__StackPath, frontRepo)
  }
  getVisualTracks(GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<VisualTrackDB[]>(this.visualtracksUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<VisualTrackDB[]>('getVisualTracks', []))
      );
  }

  /** GET visualtrack by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB> {
    return this.getVisualTrack(id, GONG__StackPath, frontRepo)
  }
  getVisualTrack(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.visualtracksUrl}/${id}`;
    return this.http.get<VisualTrackDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched visualtrack id=${id}`)),
      catchError(this.handleError<VisualTrackDB>(`getVisualTrack id=${id}`))
    );
  }

  /** POST: add a new visualtrack to the server */
  post(visualtrackdb: VisualTrackDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB> {
    return this.postVisualTrack(visualtrackdb, GONG__StackPath, frontRepo)
  }
  postVisualTrack(visualtrackdb: VisualTrackDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    if (visualtrackdb.LayerGroup != undefined) {
      visualtrackdb.VisualTrackPointersEncoding.LayerGroupID.Int64 = visualtrackdb.LayerGroup.ID
      visualtrackdb.VisualTrackPointersEncoding.LayerGroupID.Valid = true
    }
    visualtrackdb.LayerGroup = undefined
    if (visualtrackdb.DivIcon != undefined) {
      visualtrackdb.VisualTrackPointersEncoding.DivIconID.Int64 = visualtrackdb.DivIcon.ID
      visualtrackdb.VisualTrackPointersEncoding.DivIconID.Valid = true
    }
    visualtrackdb.DivIcon = undefined

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<VisualTrackDB>(this.visualtracksUrl, visualtrackdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        visualtrackdb.LayerGroup = frontRepo.LayerGroups.get(visualtrackdb.VisualTrackPointersEncoding.LayerGroupID.Int64)
        visualtrackdb.DivIcon = frontRepo.DivIcons.get(visualtrackdb.VisualTrackPointersEncoding.DivIconID.Int64)
        // this.log(`posted visualtrackdb id=${visualtrackdb.ID}`)
      }),
      catchError(this.handleError<VisualTrackDB>('postVisualTrack'))
    );
  }

  /** DELETE: delete the visualtrackdb from the server */
  delete(visualtrackdb: VisualTrackDB | number, GONG__StackPath: string): Observable<VisualTrackDB> {
    return this.deleteVisualTrack(visualtrackdb, GONG__StackPath)
  }
  deleteVisualTrack(visualtrackdb: VisualTrackDB | number, GONG__StackPath: string): Observable<VisualTrackDB> {
    const id = typeof visualtrackdb === 'number' ? visualtrackdb : visualtrackdb.ID;
    const url = `${this.visualtracksUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<VisualTrackDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted visualtrackdb id=${id}`)),
      catchError(this.handleError<VisualTrackDB>('deleteVisualTrack'))
    );
  }

  // updateFront copy visualtrack to a version with encoded pointers and update to the back
  updateFront(visualtrack: VisualTrack, GONG__StackPath: string): Observable<VisualTrackDB> {
    let visualtrackDB = new VisualTrackDB
    CopyVisualTrackToVisualTrackDB(visualtrack, visualtrackDB)
    const id = typeof visualtrackDB === 'number' ? visualtrackDB : visualtrackDB.ID
    const url = `${this.visualtracksUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<VisualTrackDB>(url, visualtrackDB, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<VisualTrackDB>('updateVisualTrack'))
    );
  }

  /** PUT: update the visualtrackdb on the server */
  update(visualtrackdb: VisualTrackDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB> {
    return this.updateVisualTrack(visualtrackdb, GONG__StackPath, frontRepo)
  }
  updateVisualTrack(visualtrackdb: VisualTrackDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<VisualTrackDB> {
    const id = typeof visualtrackdb === 'number' ? visualtrackdb : visualtrackdb.ID;
    const url = `${this.visualtracksUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
    // and encoding of pointers
    if (visualtrackdb.LayerGroup != undefined) {
      visualtrackdb.VisualTrackPointersEncoding.LayerGroupID.Int64 = visualtrackdb.LayerGroup.ID
      visualtrackdb.VisualTrackPointersEncoding.LayerGroupID.Valid = true
    }
    visualtrackdb.LayerGroup = undefined
    if (visualtrackdb.DivIcon != undefined) {
      visualtrackdb.VisualTrackPointersEncoding.DivIconID.Int64 = visualtrackdb.DivIcon.ID
      visualtrackdb.VisualTrackPointersEncoding.DivIconID.Valid = true
    }
    visualtrackdb.DivIcon = undefined

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<VisualTrackDB>(url, visualtrackdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        visualtrackdb.LayerGroup = frontRepo.LayerGroups.get(visualtrackdb.VisualTrackPointersEncoding.LayerGroupID.Int64)
        visualtrackdb.DivIcon = frontRepo.DivIcons.get(visualtrackdb.VisualTrackPointersEncoding.DivIconID.Int64)
        // this.log(`updated visualtrackdb id=${visualtrackdb.ID}`)
      }),
      catchError(this.handleError<VisualTrackDB>('updateVisualTrack'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in VisualTrackService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("VisualTrackService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
