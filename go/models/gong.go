// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	CheckoutSchedulers           map[*CheckoutScheduler]struct{}
	CheckoutSchedulers_mapString map[string]*CheckoutScheduler

	Circles           map[*Circle]struct{}
	Circles_mapString map[string]*Circle

	DivIcons           map[*DivIcon]struct{}
	DivIcons_mapString map[string]*DivIcon

	LayerGroups           map[*LayerGroup]struct{}
	LayerGroups_mapString map[string]*LayerGroup

	LayerGroupUses           map[*LayerGroupUse]struct{}
	LayerGroupUses_mapString map[string]*LayerGroupUse

	MapOptionss           map[*MapOptions]struct{}
	MapOptionss_mapString map[string]*MapOptions

	Markers           map[*Marker]struct{}
	Markers_mapString map[string]*Marker

	UserClicks           map[*UserClick]struct{}
	UserClicks_mapString map[string]*UserClick

	VLines           map[*VLine]struct{}
	VLines_mapString map[string]*VLine

	VisualTracks           map[*VisualTrack]struct{}
	VisualTracks_mapString map[string]*VisualTrack

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCheckoutScheduler(checkoutscheduler *CheckoutScheduler)
	CheckoutCheckoutScheduler(checkoutscheduler *CheckoutScheduler)
	CommitCircle(circle *Circle)
	CheckoutCircle(circle *Circle)
	CommitDivIcon(divicon *DivIcon)
	CheckoutDivIcon(divicon *DivIcon)
	CommitLayerGroup(layergroup *LayerGroup)
	CheckoutLayerGroup(layergroup *LayerGroup)
	CommitLayerGroupUse(layergroupuse *LayerGroupUse)
	CheckoutLayerGroupUse(layergroupuse *LayerGroupUse)
	CommitMapOptions(mapoptions *MapOptions)
	CheckoutMapOptions(mapoptions *MapOptions)
	CommitMarker(marker *Marker)
	CheckoutMarker(marker *Marker)
	CommitUserClick(userclick *UserClick)
	CheckoutUserClick(userclick *UserClick)
	CommitVLine(vline *VLine)
	CheckoutVLine(vline *VLine)
	CommitVisualTrack(visualtrack *VisualTrack)
	CheckoutVisualTrack(visualtrack *VisualTrack)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	CheckoutSchedulers:           make(map[*CheckoutScheduler]struct{}),
	CheckoutSchedulers_mapString: make(map[string]*CheckoutScheduler),

	Circles:           make(map[*Circle]struct{}),
	Circles_mapString: make(map[string]*Circle),

	DivIcons:           make(map[*DivIcon]struct{}),
	DivIcons_mapString: make(map[string]*DivIcon),

	LayerGroups:           make(map[*LayerGroup]struct{}),
	LayerGroups_mapString: make(map[string]*LayerGroup),

	LayerGroupUses:           make(map[*LayerGroupUse]struct{}),
	LayerGroupUses_mapString: make(map[string]*LayerGroupUse),

	MapOptionss:           make(map[*MapOptions]struct{}),
	MapOptionss_mapString: make(map[string]*MapOptions),

	Markers:           make(map[*Marker]struct{}),
	Markers_mapString: make(map[string]*Marker),

	UserClicks:           make(map[*UserClick]struct{}),
	UserClicks_mapString: make(map[string]*UserClick),

	VLines:           make(map[*VLine]struct{}),
	VLines_mapString: make(map[string]*VLine),

	VisualTracks:           make(map[*VisualTrack]struct{}),
	VisualTracks_mapString: make(map[string]*VisualTrack),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["CheckoutScheduler"] = len(stage.CheckoutSchedulers)
	stage.Map_GongStructName_InstancesNb["Circle"] = len(stage.Circles)
	stage.Map_GongStructName_InstancesNb["DivIcon"] = len(stage.DivIcons)
	stage.Map_GongStructName_InstancesNb["LayerGroup"] = len(stage.LayerGroups)
	stage.Map_GongStructName_InstancesNb["LayerGroupUse"] = len(stage.LayerGroupUses)
	stage.Map_GongStructName_InstancesNb["MapOptions"] = len(stage.MapOptionss)
	stage.Map_GongStructName_InstancesNb["Marker"] = len(stage.Markers)
	stage.Map_GongStructName_InstancesNb["UserClick"] = len(stage.UserClicks)
	stage.Map_GongStructName_InstancesNb["VLine"] = len(stage.VLines)
	stage.Map_GongStructName_InstancesNb["VisualTrack"] = len(stage.VisualTracks)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getCheckoutSchedulerOrderedStructWithNameField() []*CheckoutScheduler {
	// have alphabetical order generation
	checkoutschedulerOrdered := []*CheckoutScheduler{}
	for checkoutscheduler := range stage.CheckoutSchedulers {
		checkoutschedulerOrdered = append(checkoutschedulerOrdered, checkoutscheduler)
	}
	sort.Slice(checkoutschedulerOrdered[:], func(i, j int) bool {
		return checkoutschedulerOrdered[i].Name < checkoutschedulerOrdered[j].Name
	})
	return checkoutschedulerOrdered
}

// Stage puts checkoutscheduler to the model stage
func (checkoutscheduler *CheckoutScheduler) Stage() *CheckoutScheduler {
	Stage.CheckoutSchedulers[checkoutscheduler] = __member
	Stage.CheckoutSchedulers_mapString[checkoutscheduler.Name] = checkoutscheduler

	return checkoutscheduler
}

// Unstage removes checkoutscheduler off the model stage
func (checkoutscheduler *CheckoutScheduler) Unstage() *CheckoutScheduler {
	delete(Stage.CheckoutSchedulers, checkoutscheduler)
	delete(Stage.CheckoutSchedulers_mapString, checkoutscheduler.Name)
	return checkoutscheduler
}

// commit checkoutscheduler to the back repo (if it is already staged)
func (checkoutscheduler *CheckoutScheduler) Commit() *CheckoutScheduler {
	if _, ok := Stage.CheckoutSchedulers[checkoutscheduler]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCheckoutScheduler(checkoutscheduler)
		}
	}
	return checkoutscheduler
}

// Checkout checkoutscheduler to the back repo (if it is already staged)
func (checkoutscheduler *CheckoutScheduler) Checkout() *CheckoutScheduler {
	if _, ok := Stage.CheckoutSchedulers[checkoutscheduler]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCheckoutScheduler(checkoutscheduler)
		}
	}
	return checkoutscheduler
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of checkoutscheduler to the model stage
func (checkoutscheduler *CheckoutScheduler) StageCopy() *CheckoutScheduler {
	_checkoutscheduler := new(CheckoutScheduler)
	*_checkoutscheduler = *checkoutscheduler
	_checkoutscheduler.Stage()
	return _checkoutscheduler
}

// StageAndCommit appends checkoutscheduler to the model stage and commit to the orm repo
func (checkoutscheduler *CheckoutScheduler) StageAndCommit() *CheckoutScheduler {
	checkoutscheduler.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCheckoutScheduler(checkoutscheduler)
	}
	return checkoutscheduler
}

// DeleteStageAndCommit appends checkoutscheduler to the model stage and commit to the orm repo
func (checkoutscheduler *CheckoutScheduler) DeleteStageAndCommit() *CheckoutScheduler {
	checkoutscheduler.Unstage()
	DeleteORMCheckoutScheduler(checkoutscheduler)
	return checkoutscheduler
}

// StageCopyAndCommit appends a copy of checkoutscheduler to the model stage and commit to the orm repo
func (checkoutscheduler *CheckoutScheduler) StageCopyAndCommit() *CheckoutScheduler {
	_checkoutscheduler := new(CheckoutScheduler)
	*_checkoutscheduler = *checkoutscheduler
	_checkoutscheduler.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCheckoutScheduler(checkoutscheduler)
	}
	return _checkoutscheduler
}

// CreateORMCheckoutScheduler enables dynamic staging of a CheckoutScheduler instance
func CreateORMCheckoutScheduler(checkoutscheduler *CheckoutScheduler) {
	checkoutscheduler.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCheckoutScheduler(checkoutscheduler)
	}
}

// DeleteORMCheckoutScheduler enables dynamic staging of a CheckoutScheduler instance
func DeleteORMCheckoutScheduler(checkoutscheduler *CheckoutScheduler) {
	checkoutscheduler.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCheckoutScheduler(checkoutscheduler)
	}
}

func (stage *StageStruct) getCircleOrderedStructWithNameField() []*Circle {
	// have alphabetical order generation
	circleOrdered := []*Circle{}
	for circle := range stage.Circles {
		circleOrdered = append(circleOrdered, circle)
	}
	sort.Slice(circleOrdered[:], func(i, j int) bool {
		return circleOrdered[i].Name < circleOrdered[j].Name
	})
	return circleOrdered
}

// Stage puts circle to the model stage
func (circle *Circle) Stage() *Circle {
	Stage.Circles[circle] = __member
	Stage.Circles_mapString[circle.Name] = circle

	return circle
}

// Unstage removes circle off the model stage
func (circle *Circle) Unstage() *Circle {
	delete(Stage.Circles, circle)
	delete(Stage.Circles_mapString, circle.Name)
	return circle
}

// commit circle to the back repo (if it is already staged)
func (circle *Circle) Commit() *Circle {
	if _, ok := Stage.Circles[circle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCircle(circle)
		}
	}
	return circle
}

// Checkout circle to the back repo (if it is already staged)
func (circle *Circle) Checkout() *Circle {
	if _, ok := Stage.Circles[circle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCircle(circle)
		}
	}
	return circle
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of circle to the model stage
func (circle *Circle) StageCopy() *Circle {
	_circle := new(Circle)
	*_circle = *circle
	_circle.Stage()
	return _circle
}

// StageAndCommit appends circle to the model stage and commit to the orm repo
func (circle *Circle) StageAndCommit() *Circle {
	circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
	return circle
}

// DeleteStageAndCommit appends circle to the model stage and commit to the orm repo
func (circle *Circle) DeleteStageAndCommit() *Circle {
	circle.Unstage()
	DeleteORMCircle(circle)
	return circle
}

// StageCopyAndCommit appends a copy of circle to the model stage and commit to the orm repo
func (circle *Circle) StageCopyAndCommit() *Circle {
	_circle := new(Circle)
	*_circle = *circle
	_circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
	return _circle
}

// CreateORMCircle enables dynamic staging of a Circle instance
func CreateORMCircle(circle *Circle) {
	circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
}

// DeleteORMCircle enables dynamic staging of a Circle instance
func DeleteORMCircle(circle *Circle) {
	circle.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCircle(circle)
	}
}

func (stage *StageStruct) getDivIconOrderedStructWithNameField() []*DivIcon {
	// have alphabetical order generation
	diviconOrdered := []*DivIcon{}
	for divicon := range stage.DivIcons {
		diviconOrdered = append(diviconOrdered, divicon)
	}
	sort.Slice(diviconOrdered[:], func(i, j int) bool {
		return diviconOrdered[i].Name < diviconOrdered[j].Name
	})
	return diviconOrdered
}

// Stage puts divicon to the model stage
func (divicon *DivIcon) Stage() *DivIcon {
	Stage.DivIcons[divicon] = __member
	Stage.DivIcons_mapString[divicon.Name] = divicon

	return divicon
}

// Unstage removes divicon off the model stage
func (divicon *DivIcon) Unstage() *DivIcon {
	delete(Stage.DivIcons, divicon)
	delete(Stage.DivIcons_mapString, divicon.Name)
	return divicon
}

// commit divicon to the back repo (if it is already staged)
func (divicon *DivIcon) Commit() *DivIcon {
	if _, ok := Stage.DivIcons[divicon]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDivIcon(divicon)
		}
	}
	return divicon
}

// Checkout divicon to the back repo (if it is already staged)
func (divicon *DivIcon) Checkout() *DivIcon {
	if _, ok := Stage.DivIcons[divicon]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDivIcon(divicon)
		}
	}
	return divicon
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of divicon to the model stage
func (divicon *DivIcon) StageCopy() *DivIcon {
	_divicon := new(DivIcon)
	*_divicon = *divicon
	_divicon.Stage()
	return _divicon
}

// StageAndCommit appends divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) StageAndCommit() *DivIcon {
	divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
	return divicon
}

// DeleteStageAndCommit appends divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) DeleteStageAndCommit() *DivIcon {
	divicon.Unstage()
	DeleteORMDivIcon(divicon)
	return divicon
}

// StageCopyAndCommit appends a copy of divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) StageCopyAndCommit() *DivIcon {
	_divicon := new(DivIcon)
	*_divicon = *divicon
	_divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
	return _divicon
}

// CreateORMDivIcon enables dynamic staging of a DivIcon instance
func CreateORMDivIcon(divicon *DivIcon) {
	divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
}

// DeleteORMDivIcon enables dynamic staging of a DivIcon instance
func DeleteORMDivIcon(divicon *DivIcon) {
	divicon.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDivIcon(divicon)
	}
}

func (stage *StageStruct) getLayerGroupOrderedStructWithNameField() []*LayerGroup {
	// have alphabetical order generation
	layergroupOrdered := []*LayerGroup{}
	for layergroup := range stage.LayerGroups {
		layergroupOrdered = append(layergroupOrdered, layergroup)
	}
	sort.Slice(layergroupOrdered[:], func(i, j int) bool {
		return layergroupOrdered[i].Name < layergroupOrdered[j].Name
	})
	return layergroupOrdered
}

// Stage puts layergroup to the model stage
func (layergroup *LayerGroup) Stage() *LayerGroup {
	Stage.LayerGroups[layergroup] = __member
	Stage.LayerGroups_mapString[layergroup.Name] = layergroup

	return layergroup
}

// Unstage removes layergroup off the model stage
func (layergroup *LayerGroup) Unstage() *LayerGroup {
	delete(Stage.LayerGroups, layergroup)
	delete(Stage.LayerGroups_mapString, layergroup.Name)
	return layergroup
}

// commit layergroup to the back repo (if it is already staged)
func (layergroup *LayerGroup) Commit() *LayerGroup {
	if _, ok := Stage.LayerGroups[layergroup]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLayerGroup(layergroup)
		}
	}
	return layergroup
}

// Checkout layergroup to the back repo (if it is already staged)
func (layergroup *LayerGroup) Checkout() *LayerGroup {
	if _, ok := Stage.LayerGroups[layergroup]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLayerGroup(layergroup)
		}
	}
	return layergroup
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of layergroup to the model stage
func (layergroup *LayerGroup) StageCopy() *LayerGroup {
	_layergroup := new(LayerGroup)
	*_layergroup = *layergroup
	_layergroup.Stage()
	return _layergroup
}

// StageAndCommit appends layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) StageAndCommit() *LayerGroup {
	layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
	return layergroup
}

// DeleteStageAndCommit appends layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) DeleteStageAndCommit() *LayerGroup {
	layergroup.Unstage()
	DeleteORMLayerGroup(layergroup)
	return layergroup
}

// StageCopyAndCommit appends a copy of layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) StageCopyAndCommit() *LayerGroup {
	_layergroup := new(LayerGroup)
	*_layergroup = *layergroup
	_layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
	return _layergroup
}

// CreateORMLayerGroup enables dynamic staging of a LayerGroup instance
func CreateORMLayerGroup(layergroup *LayerGroup) {
	layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
}

// DeleteORMLayerGroup enables dynamic staging of a LayerGroup instance
func DeleteORMLayerGroup(layergroup *LayerGroup) {
	layergroup.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLayerGroup(layergroup)
	}
}

func (stage *StageStruct) getLayerGroupUseOrderedStructWithNameField() []*LayerGroupUse {
	// have alphabetical order generation
	layergroupuseOrdered := []*LayerGroupUse{}
	for layergroupuse := range stage.LayerGroupUses {
		layergroupuseOrdered = append(layergroupuseOrdered, layergroupuse)
	}
	sort.Slice(layergroupuseOrdered[:], func(i, j int) bool {
		return layergroupuseOrdered[i].Name < layergroupuseOrdered[j].Name
	})
	return layergroupuseOrdered
}

// Stage puts layergroupuse to the model stage
func (layergroupuse *LayerGroupUse) Stage() *LayerGroupUse {
	Stage.LayerGroupUses[layergroupuse] = __member
	Stage.LayerGroupUses_mapString[layergroupuse.Name] = layergroupuse

	return layergroupuse
}

// Unstage removes layergroupuse off the model stage
func (layergroupuse *LayerGroupUse) Unstage() *LayerGroupUse {
	delete(Stage.LayerGroupUses, layergroupuse)
	delete(Stage.LayerGroupUses_mapString, layergroupuse.Name)
	return layergroupuse
}

// commit layergroupuse to the back repo (if it is already staged)
func (layergroupuse *LayerGroupUse) Commit() *LayerGroupUse {
	if _, ok := Stage.LayerGroupUses[layergroupuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLayerGroupUse(layergroupuse)
		}
	}
	return layergroupuse
}

// Checkout layergroupuse to the back repo (if it is already staged)
func (layergroupuse *LayerGroupUse) Checkout() *LayerGroupUse {
	if _, ok := Stage.LayerGroupUses[layergroupuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLayerGroupUse(layergroupuse)
		}
	}
	return layergroupuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of layergroupuse to the model stage
func (layergroupuse *LayerGroupUse) StageCopy() *LayerGroupUse {
	_layergroupuse := new(LayerGroupUse)
	*_layergroupuse = *layergroupuse
	_layergroupuse.Stage()
	return _layergroupuse
}

// StageAndCommit appends layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) StageAndCommit() *LayerGroupUse {
	layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
	return layergroupuse
}

// DeleteStageAndCommit appends layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) DeleteStageAndCommit() *LayerGroupUse {
	layergroupuse.Unstage()
	DeleteORMLayerGroupUse(layergroupuse)
	return layergroupuse
}

// StageCopyAndCommit appends a copy of layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) StageCopyAndCommit() *LayerGroupUse {
	_layergroupuse := new(LayerGroupUse)
	*_layergroupuse = *layergroupuse
	_layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
	return _layergroupuse
}

// CreateORMLayerGroupUse enables dynamic staging of a LayerGroupUse instance
func CreateORMLayerGroupUse(layergroupuse *LayerGroupUse) {
	layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
}

// DeleteORMLayerGroupUse enables dynamic staging of a LayerGroupUse instance
func DeleteORMLayerGroupUse(layergroupuse *LayerGroupUse) {
	layergroupuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLayerGroupUse(layergroupuse)
	}
}

func (stage *StageStruct) getMapOptionsOrderedStructWithNameField() []*MapOptions {
	// have alphabetical order generation
	mapoptionsOrdered := []*MapOptions{}
	for mapoptions := range stage.MapOptionss {
		mapoptionsOrdered = append(mapoptionsOrdered, mapoptions)
	}
	sort.Slice(mapoptionsOrdered[:], func(i, j int) bool {
		return mapoptionsOrdered[i].Name < mapoptionsOrdered[j].Name
	})
	return mapoptionsOrdered
}

// Stage puts mapoptions to the model stage
func (mapoptions *MapOptions) Stage() *MapOptions {
	Stage.MapOptionss[mapoptions] = __member
	Stage.MapOptionss_mapString[mapoptions.Name] = mapoptions

	return mapoptions
}

// Unstage removes mapoptions off the model stage
func (mapoptions *MapOptions) Unstage() *MapOptions {
	delete(Stage.MapOptionss, mapoptions)
	delete(Stage.MapOptionss_mapString, mapoptions.Name)
	return mapoptions
}

// commit mapoptions to the back repo (if it is already staged)
func (mapoptions *MapOptions) Commit() *MapOptions {
	if _, ok := Stage.MapOptionss[mapoptions]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMapOptions(mapoptions)
		}
	}
	return mapoptions
}

// Checkout mapoptions to the back repo (if it is already staged)
func (mapoptions *MapOptions) Checkout() *MapOptions {
	if _, ok := Stage.MapOptionss[mapoptions]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMapOptions(mapoptions)
		}
	}
	return mapoptions
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of mapoptions to the model stage
func (mapoptions *MapOptions) StageCopy() *MapOptions {
	_mapoptions := new(MapOptions)
	*_mapoptions = *mapoptions
	_mapoptions.Stage()
	return _mapoptions
}

// StageAndCommit appends mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) StageAndCommit() *MapOptions {
	mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
	return mapoptions
}

// DeleteStageAndCommit appends mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) DeleteStageAndCommit() *MapOptions {
	mapoptions.Unstage()
	DeleteORMMapOptions(mapoptions)
	return mapoptions
}

// StageCopyAndCommit appends a copy of mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) StageCopyAndCommit() *MapOptions {
	_mapoptions := new(MapOptions)
	*_mapoptions = *mapoptions
	_mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
	return _mapoptions
}

// CreateORMMapOptions enables dynamic staging of a MapOptions instance
func CreateORMMapOptions(mapoptions *MapOptions) {
	mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
}

// DeleteORMMapOptions enables dynamic staging of a MapOptions instance
func DeleteORMMapOptions(mapoptions *MapOptions) {
	mapoptions.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMapOptions(mapoptions)
	}
}

func (stage *StageStruct) getMarkerOrderedStructWithNameField() []*Marker {
	// have alphabetical order generation
	markerOrdered := []*Marker{}
	for marker := range stage.Markers {
		markerOrdered = append(markerOrdered, marker)
	}
	sort.Slice(markerOrdered[:], func(i, j int) bool {
		return markerOrdered[i].Name < markerOrdered[j].Name
	})
	return markerOrdered
}

// Stage puts marker to the model stage
func (marker *Marker) Stage() *Marker {
	Stage.Markers[marker] = __member
	Stage.Markers_mapString[marker.Name] = marker

	return marker
}

// Unstage removes marker off the model stage
func (marker *Marker) Unstage() *Marker {
	delete(Stage.Markers, marker)
	delete(Stage.Markers_mapString, marker.Name)
	return marker
}

// commit marker to the back repo (if it is already staged)
func (marker *Marker) Commit() *Marker {
	if _, ok := Stage.Markers[marker]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMarker(marker)
		}
	}
	return marker
}

// Checkout marker to the back repo (if it is already staged)
func (marker *Marker) Checkout() *Marker {
	if _, ok := Stage.Markers[marker]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMarker(marker)
		}
	}
	return marker
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of marker to the model stage
func (marker *Marker) StageCopy() *Marker {
	_marker := new(Marker)
	*_marker = *marker
	_marker.Stage()
	return _marker
}

// StageAndCommit appends marker to the model stage and commit to the orm repo
func (marker *Marker) StageAndCommit() *Marker {
	marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
	return marker
}

// DeleteStageAndCommit appends marker to the model stage and commit to the orm repo
func (marker *Marker) DeleteStageAndCommit() *Marker {
	marker.Unstage()
	DeleteORMMarker(marker)
	return marker
}

// StageCopyAndCommit appends a copy of marker to the model stage and commit to the orm repo
func (marker *Marker) StageCopyAndCommit() *Marker {
	_marker := new(Marker)
	*_marker = *marker
	_marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
	return _marker
}

// CreateORMMarker enables dynamic staging of a Marker instance
func CreateORMMarker(marker *Marker) {
	marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
}

// DeleteORMMarker enables dynamic staging of a Marker instance
func DeleteORMMarker(marker *Marker) {
	marker.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMarker(marker)
	}
}

func (stage *StageStruct) getUserClickOrderedStructWithNameField() []*UserClick {
	// have alphabetical order generation
	userclickOrdered := []*UserClick{}
	for userclick := range stage.UserClicks {
		userclickOrdered = append(userclickOrdered, userclick)
	}
	sort.Slice(userclickOrdered[:], func(i, j int) bool {
		return userclickOrdered[i].Name < userclickOrdered[j].Name
	})
	return userclickOrdered
}

// Stage puts userclick to the model stage
func (userclick *UserClick) Stage() *UserClick {
	Stage.UserClicks[userclick] = __member
	Stage.UserClicks_mapString[userclick.Name] = userclick

	return userclick
}

// Unstage removes userclick off the model stage
func (userclick *UserClick) Unstage() *UserClick {
	delete(Stage.UserClicks, userclick)
	delete(Stage.UserClicks_mapString, userclick.Name)
	return userclick
}

// commit userclick to the back repo (if it is already staged)
func (userclick *UserClick) Commit() *UserClick {
	if _, ok := Stage.UserClicks[userclick]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUserClick(userclick)
		}
	}
	return userclick
}

// Checkout userclick to the back repo (if it is already staged)
func (userclick *UserClick) Checkout() *UserClick {
	if _, ok := Stage.UserClicks[userclick]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUserClick(userclick)
		}
	}
	return userclick
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of userclick to the model stage
func (userclick *UserClick) StageCopy() *UserClick {
	_userclick := new(UserClick)
	*_userclick = *userclick
	_userclick.Stage()
	return _userclick
}

// StageAndCommit appends userclick to the model stage and commit to the orm repo
func (userclick *UserClick) StageAndCommit() *UserClick {
	userclick.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUserClick(userclick)
	}
	return userclick
}

// DeleteStageAndCommit appends userclick to the model stage and commit to the orm repo
func (userclick *UserClick) DeleteStageAndCommit() *UserClick {
	userclick.Unstage()
	DeleteORMUserClick(userclick)
	return userclick
}

// StageCopyAndCommit appends a copy of userclick to the model stage and commit to the orm repo
func (userclick *UserClick) StageCopyAndCommit() *UserClick {
	_userclick := new(UserClick)
	*_userclick = *userclick
	_userclick.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUserClick(userclick)
	}
	return _userclick
}

// CreateORMUserClick enables dynamic staging of a UserClick instance
func CreateORMUserClick(userclick *UserClick) {
	userclick.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUserClick(userclick)
	}
}

// DeleteORMUserClick enables dynamic staging of a UserClick instance
func DeleteORMUserClick(userclick *UserClick) {
	userclick.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUserClick(userclick)
	}
}

func (stage *StageStruct) getVLineOrderedStructWithNameField() []*VLine {
	// have alphabetical order generation
	vlineOrdered := []*VLine{}
	for vline := range stage.VLines {
		vlineOrdered = append(vlineOrdered, vline)
	}
	sort.Slice(vlineOrdered[:], func(i, j int) bool {
		return vlineOrdered[i].Name < vlineOrdered[j].Name
	})
	return vlineOrdered
}

// Stage puts vline to the model stage
func (vline *VLine) Stage() *VLine {
	Stage.VLines[vline] = __member
	Stage.VLines_mapString[vline.Name] = vline

	return vline
}

// Unstage removes vline off the model stage
func (vline *VLine) Unstage() *VLine {
	delete(Stage.VLines, vline)
	delete(Stage.VLines_mapString, vline.Name)
	return vline
}

// commit vline to the back repo (if it is already staged)
func (vline *VLine) Commit() *VLine {
	if _, ok := Stage.VLines[vline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVLine(vline)
		}
	}
	return vline
}

// Checkout vline to the back repo (if it is already staged)
func (vline *VLine) Checkout() *VLine {
	if _, ok := Stage.VLines[vline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVLine(vline)
		}
	}
	return vline
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of vline to the model stage
func (vline *VLine) StageCopy() *VLine {
	_vline := new(VLine)
	*_vline = *vline
	_vline.Stage()
	return _vline
}

// StageAndCommit appends vline to the model stage and commit to the orm repo
func (vline *VLine) StageAndCommit() *VLine {
	vline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVLine(vline)
	}
	return vline
}

// DeleteStageAndCommit appends vline to the model stage and commit to the orm repo
func (vline *VLine) DeleteStageAndCommit() *VLine {
	vline.Unstage()
	DeleteORMVLine(vline)
	return vline
}

// StageCopyAndCommit appends a copy of vline to the model stage and commit to the orm repo
func (vline *VLine) StageCopyAndCommit() *VLine {
	_vline := new(VLine)
	*_vline = *vline
	_vline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVLine(vline)
	}
	return _vline
}

// CreateORMVLine enables dynamic staging of a VLine instance
func CreateORMVLine(vline *VLine) {
	vline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVLine(vline)
	}
}

// DeleteORMVLine enables dynamic staging of a VLine instance
func DeleteORMVLine(vline *VLine) {
	vline.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVLine(vline)
	}
}

func (stage *StageStruct) getVisualTrackOrderedStructWithNameField() []*VisualTrack {
	// have alphabetical order generation
	visualtrackOrdered := []*VisualTrack{}
	for visualtrack := range stage.VisualTracks {
		visualtrackOrdered = append(visualtrackOrdered, visualtrack)
	}
	sort.Slice(visualtrackOrdered[:], func(i, j int) bool {
		return visualtrackOrdered[i].Name < visualtrackOrdered[j].Name
	})
	return visualtrackOrdered
}

// Stage puts visualtrack to the model stage
func (visualtrack *VisualTrack) Stage() *VisualTrack {
	Stage.VisualTracks[visualtrack] = __member
	Stage.VisualTracks_mapString[visualtrack.Name] = visualtrack

	return visualtrack
}

// Unstage removes visualtrack off the model stage
func (visualtrack *VisualTrack) Unstage() *VisualTrack {
	delete(Stage.VisualTracks, visualtrack)
	delete(Stage.VisualTracks_mapString, visualtrack.Name)
	return visualtrack
}

// commit visualtrack to the back repo (if it is already staged)
func (visualtrack *VisualTrack) Commit() *VisualTrack {
	if _, ok := Stage.VisualTracks[visualtrack]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVisualTrack(visualtrack)
		}
	}
	return visualtrack
}

// Checkout visualtrack to the back repo (if it is already staged)
func (visualtrack *VisualTrack) Checkout() *VisualTrack {
	if _, ok := Stage.VisualTracks[visualtrack]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVisualTrack(visualtrack)
		}
	}
	return visualtrack
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of visualtrack to the model stage
func (visualtrack *VisualTrack) StageCopy() *VisualTrack {
	_visualtrack := new(VisualTrack)
	*_visualtrack = *visualtrack
	_visualtrack.Stage()
	return _visualtrack
}

// StageAndCommit appends visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) StageAndCommit() *VisualTrack {
	visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
	return visualtrack
}

// DeleteStageAndCommit appends visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) DeleteStageAndCommit() *VisualTrack {
	visualtrack.Unstage()
	DeleteORMVisualTrack(visualtrack)
	return visualtrack
}

// StageCopyAndCommit appends a copy of visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) StageCopyAndCommit() *VisualTrack {
	_visualtrack := new(VisualTrack)
	*_visualtrack = *visualtrack
	_visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
	return _visualtrack
}

// CreateORMVisualTrack enables dynamic staging of a VisualTrack instance
func CreateORMVisualTrack(visualtrack *VisualTrack) {
	visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
}

// DeleteORMVisualTrack enables dynamic staging of a VisualTrack instance
func DeleteORMVisualTrack(visualtrack *VisualTrack) {
	visualtrack.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVisualTrack(visualtrack)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCheckoutScheduler(CheckoutScheduler *CheckoutScheduler)
	CreateORMCircle(Circle *Circle)
	CreateORMDivIcon(DivIcon *DivIcon)
	CreateORMLayerGroup(LayerGroup *LayerGroup)
	CreateORMLayerGroupUse(LayerGroupUse *LayerGroupUse)
	CreateORMMapOptions(MapOptions *MapOptions)
	CreateORMMarker(Marker *Marker)
	CreateORMUserClick(UserClick *UserClick)
	CreateORMVLine(VLine *VLine)
	CreateORMVisualTrack(VisualTrack *VisualTrack)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCheckoutScheduler(CheckoutScheduler *CheckoutScheduler)
	DeleteORMCircle(Circle *Circle)
	DeleteORMDivIcon(DivIcon *DivIcon)
	DeleteORMLayerGroup(LayerGroup *LayerGroup)
	DeleteORMLayerGroupUse(LayerGroupUse *LayerGroupUse)
	DeleteORMMapOptions(MapOptions *MapOptions)
	DeleteORMMarker(Marker *Marker)
	DeleteORMUserClick(UserClick *UserClick)
	DeleteORMVLine(VLine *VLine)
	DeleteORMVisualTrack(VisualTrack *VisualTrack)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.CheckoutSchedulers = make(map[*CheckoutScheduler]struct{})
	stage.CheckoutSchedulers_mapString = make(map[string]*CheckoutScheduler)

	stage.Circles = make(map[*Circle]struct{})
	stage.Circles_mapString = make(map[string]*Circle)

	stage.DivIcons = make(map[*DivIcon]struct{})
	stage.DivIcons_mapString = make(map[string]*DivIcon)

	stage.LayerGroups = make(map[*LayerGroup]struct{})
	stage.LayerGroups_mapString = make(map[string]*LayerGroup)

	stage.LayerGroupUses = make(map[*LayerGroupUse]struct{})
	stage.LayerGroupUses_mapString = make(map[string]*LayerGroupUse)

	stage.MapOptionss = make(map[*MapOptions]struct{})
	stage.MapOptionss_mapString = make(map[string]*MapOptions)

	stage.Markers = make(map[*Marker]struct{})
	stage.Markers_mapString = make(map[string]*Marker)

	stage.UserClicks = make(map[*UserClick]struct{})
	stage.UserClicks_mapString = make(map[string]*UserClick)

	stage.VLines = make(map[*VLine]struct{})
	stage.VLines_mapString = make(map[string]*VLine)

	stage.VisualTracks = make(map[*VisualTrack]struct{})
	stage.VisualTracks_mapString = make(map[string]*VisualTrack)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.CheckoutSchedulers = nil
	stage.CheckoutSchedulers_mapString = nil

	stage.Circles = nil
	stage.Circles_mapString = nil

	stage.DivIcons = nil
	stage.DivIcons_mapString = nil

	stage.LayerGroups = nil
	stage.LayerGroups_mapString = nil

	stage.LayerGroupUses = nil
	stage.LayerGroupUses_mapString = nil

	stage.MapOptionss = nil
	stage.MapOptionss_mapString = nil

	stage.Markers = nil
	stage.Markers_mapString = nil

	stage.UserClicks = nil
	stage.UserClicks_mapString = nil

	stage.VLines = nil
	stage.VLines_mapString = nil

	stage.VisualTracks = nil
	stage.VisualTracks_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_CheckoutScheduler_Identifiers := make(map[*CheckoutScheduler]string)
	_ = map_CheckoutScheduler_Identifiers

	checkoutschedulerOrdered := []*CheckoutScheduler{}
	for checkoutscheduler := range stage.CheckoutSchedulers {
		checkoutschedulerOrdered = append(checkoutschedulerOrdered, checkoutscheduler)
	}
	sort.Slice(checkoutschedulerOrdered[:], func(i, j int) bool {
		return checkoutschedulerOrdered[i].Name < checkoutschedulerOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of CheckoutScheduler")
	for idx, checkoutscheduler := range checkoutschedulerOrdered {

		id = generatesIdentifier("CheckoutScheduler", idx, checkoutscheduler.Name)
		map_CheckoutScheduler_Identifiers[checkoutscheduler] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "CheckoutScheduler")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", checkoutscheduler.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// CheckoutScheduler %s values setup", checkoutscheduler.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(checkoutscheduler.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "NbUpdatesFromFront")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", checkoutscheduler.NbUpdatesFromFront))
		initializerStatements += setValueField

	}

	map_Circle_Identifiers := make(map[*Circle]string)
	_ = map_Circle_Identifiers

	circleOrdered := []*Circle{}
	for circle := range stage.Circles {
		circleOrdered = append(circleOrdered, circle)
	}
	sort.Slice(circleOrdered[:], func(i, j int) bool {
		return circleOrdered[i].Name < circleOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Circle")
	for idx, circle := range circleOrdered {

		id = generatesIdentifier("Circle", idx, circle.Name)
		map_Circle_Identifiers[circle] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Circle")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", circle.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Circle %s values setup", circle.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.Lng))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Radius")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", circle.Radius))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ColorEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.ColorEnum))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DashStyleEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(circle.DashStyleEnum))
		initializerStatements += setValueField

	}

	map_DivIcon_Identifiers := make(map[*DivIcon]string)
	_ = map_DivIcon_Identifiers

	diviconOrdered := []*DivIcon{}
	for divicon := range stage.DivIcons {
		diviconOrdered = append(diviconOrdered, divicon)
	}
	sort.Slice(diviconOrdered[:], func(i, j int) bool {
		return diviconOrdered[i].Name < diviconOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of DivIcon")
	for idx, divicon := range diviconOrdered {

		id = generatesIdentifier("DivIcon", idx, divicon.Name)
		map_DivIcon_Identifiers[divicon] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "DivIcon")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", divicon.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// DivIcon %s values setup", divicon.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(divicon.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "SVG")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(divicon.SVG))
		initializerStatements += setValueField

	}

	map_LayerGroup_Identifiers := make(map[*LayerGroup]string)
	_ = map_LayerGroup_Identifiers

	layergroupOrdered := []*LayerGroup{}
	for layergroup := range stage.LayerGroups {
		layergroupOrdered = append(layergroupOrdered, layergroup)
	}
	sort.Slice(layergroupOrdered[:], func(i, j int) bool {
		return layergroupOrdered[i].Name < layergroupOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of LayerGroup")
	for idx, layergroup := range layergroupOrdered {

		id = generatesIdentifier("LayerGroup", idx, layergroup.Name)
		map_LayerGroup_Identifiers[layergroup] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "LayerGroup")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", layergroup.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// LayerGroup %s values setup", layergroup.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(layergroup.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DisplayName")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(layergroup.DisplayName))
		initializerStatements += setValueField

	}

	map_LayerGroupUse_Identifiers := make(map[*LayerGroupUse]string)
	_ = map_LayerGroupUse_Identifiers

	layergroupuseOrdered := []*LayerGroupUse{}
	for layergroupuse := range stage.LayerGroupUses {
		layergroupuseOrdered = append(layergroupuseOrdered, layergroupuse)
	}
	sort.Slice(layergroupuseOrdered[:], func(i, j int) bool {
		return layergroupuseOrdered[i].Name < layergroupuseOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of LayerGroupUse")
	for idx, layergroupuse := range layergroupuseOrdered {

		id = generatesIdentifier("LayerGroupUse", idx, layergroupuse.Name)
		map_LayerGroupUse_Identifiers[layergroupuse] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "LayerGroupUse")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", layergroupuse.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// LayerGroupUse %s values setup", layergroupuse.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(layergroupuse.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Display")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", layergroupuse.Display))
		initializerStatements += setValueField

	}

	map_MapOptions_Identifiers := make(map[*MapOptions]string)
	_ = map_MapOptions_Identifiers

	mapoptionsOrdered := []*MapOptions{}
	for mapoptions := range stage.MapOptionss {
		mapoptionsOrdered = append(mapoptionsOrdered, mapoptions)
	}
	sort.Slice(mapoptionsOrdered[:], func(i, j int) bool {
		return mapoptionsOrdered[i].Name < mapoptionsOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of MapOptions")
	for idx, mapoptions := range mapoptionsOrdered {

		id = generatesIdentifier("MapOptions", idx, mapoptions.Name)
		map_MapOptions_Identifiers[mapoptions] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "MapOptions")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", mapoptions.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// MapOptions %s values setup", mapoptions.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", mapoptions.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", mapoptions.Lng))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(mapoptions.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ZoomLevel")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", mapoptions.ZoomLevel))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "UrlTemplate")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(mapoptions.UrlTemplate))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Attribution")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(mapoptions.Attribution))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MaxZoom")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", mapoptions.MaxZoom))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ZoomControl")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", mapoptions.ZoomControl))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "AttributionControl")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", mapoptions.AttributionControl))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ZoomSnap")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%d", mapoptions.ZoomSnap))
		initializerStatements += setValueField

	}

	map_Marker_Identifiers := make(map[*Marker]string)
	_ = map_Marker_Identifiers

	markerOrdered := []*Marker{}
	for marker := range stage.Markers {
		markerOrdered = append(markerOrdered, marker)
	}
	sort.Slice(markerOrdered[:], func(i, j int) bool {
		return markerOrdered[i].Name < markerOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Marker")
	for idx, marker := range markerOrdered {

		id = generatesIdentifier("Marker", idx, marker.Name)
		map_Marker_Identifiers[marker] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Marker")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", marker.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Marker %s values setup", marker.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", marker.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", marker.Lng))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(marker.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ColorEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(marker.ColorEnum))
		initializerStatements += setValueField

	}

	map_UserClick_Identifiers := make(map[*UserClick]string)
	_ = map_UserClick_Identifiers

	userclickOrdered := []*UserClick{}
	for userclick := range stage.UserClicks {
		userclickOrdered = append(userclickOrdered, userclick)
	}
	sort.Slice(userclickOrdered[:], func(i, j int) bool {
		return userclickOrdered[i].Name < userclickOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of UserClick")
	for idx, userclick := range userclickOrdered {

		id = generatesIdentifier("UserClick", idx, userclick.Name)
		map_UserClick_Identifiers[userclick] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "UserClick")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", userclick.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// UserClick %s values setup", userclick.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(userclick.Name))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", userclick.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", userclick.Lng))
		initializerStatements += setValueField

		setValueField = TimeInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "TimeOfClick")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", userclick.TimeOfClick.String())
		initializerStatements += setValueField

	}

	map_VLine_Identifiers := make(map[*VLine]string)
	_ = map_VLine_Identifiers

	vlineOrdered := []*VLine{}
	for vline := range stage.VLines {
		vlineOrdered = append(vlineOrdered, vline)
	}
	sort.Slice(vlineOrdered[:], func(i, j int) bool {
		return vlineOrdered[i].Name < vlineOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of VLine")
	for idx, vline := range vlineOrdered {

		id = generatesIdentifier("VLine", idx, vline.Name)
		map_VLine_Identifiers[vline] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "VLine")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", vline.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// VLine %s values setup", vline.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StartLat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", vline.StartLat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "StartLng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", vline.StartLng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "EndLat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", vline.EndLat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "EndLng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", vline.EndLng))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ColorEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.ColorEnum))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DashStyleEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.DashStyleEnum))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsTransmitting")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.IsTransmitting))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Message")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.Message))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "IsTransmittingBackward")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.IsTransmittingBackward))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "MessageBackward")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(vline.MessageBackward))
		initializerStatements += setValueField

	}

	map_VisualTrack_Identifiers := make(map[*VisualTrack]string)
	_ = map_VisualTrack_Identifiers

	visualtrackOrdered := []*VisualTrack{}
	for visualtrack := range stage.VisualTracks {
		visualtrackOrdered = append(visualtrackOrdered, visualtrack)
	}
	sort.Slice(visualtrackOrdered[:], func(i, j int) bool {
		return visualtrackOrdered[i].Name < visualtrackOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of VisualTrack")
	for idx, visualtrack := range visualtrackOrdered {

		id = generatesIdentifier("VisualTrack", idx, visualtrack.Name)
		map_VisualTrack_Identifiers[visualtrack] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "VisualTrack")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", visualtrack.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// VisualTrack %s values setup", visualtrack.Name)
		// Initialisation of values
		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lat")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", visualtrack.Lat))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Lng")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", visualtrack.Lng))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Heading")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", visualtrack.Heading))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Level")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", visualtrack.Level))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Speed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", visualtrack.Speed))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "VerticalSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%f", visualtrack.VerticalSpeed))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(visualtrack.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "ColorEnum")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(visualtrack.ColorEnum))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DisplayTrackHistory")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", visualtrack.DisplayTrackHistory))
		initializerStatements += setValueField

		setValueField = NumberInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "DisplayLevelAndSpeed")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", fmt.Sprintf("%t", visualtrack.DisplayLevelAndSpeed))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, checkoutscheduler := range checkoutschedulerOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("CheckoutScheduler", idx, checkoutscheduler.Name)
		map_CheckoutScheduler_Identifiers[checkoutscheduler] = id

		// Initialisation of values
	}

	for idx, circle := range circleOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Circle", idx, circle.Name)
		map_Circle_Identifiers[circle] = id

		// Initialisation of values
		if circle.LayerGroup != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LayerGroup")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LayerGroup_Identifiers[circle.LayerGroup])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, divicon := range diviconOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("DivIcon", idx, divicon.Name)
		map_DivIcon_Identifiers[divicon] = id

		// Initialisation of values
	}

	for idx, layergroup := range layergroupOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("LayerGroup", idx, layergroup.Name)
		map_LayerGroup_Identifiers[layergroup] = id

		// Initialisation of values
	}

	for idx, layergroupuse := range layergroupuseOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("LayerGroupUse", idx, layergroupuse.Name)
		map_LayerGroupUse_Identifiers[layergroupuse] = id

		// Initialisation of values
		if layergroupuse.LayerGroup != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LayerGroup")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LayerGroup_Identifiers[layergroupuse.LayerGroup])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, mapoptions := range mapoptionsOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("MapOptions", idx, mapoptions.Name)
		map_MapOptions_Identifiers[mapoptions] = id

		// Initialisation of values
		for _, _layergroupuse := range mapoptions.LayerGroupUses {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LayerGroupUses")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LayerGroupUse_Identifiers[_layergroupuse])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, marker := range markerOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Marker", idx, marker.Name)
		map_Marker_Identifiers[marker] = id

		// Initialisation of values
		if marker.LayerGroup != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LayerGroup")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LayerGroup_Identifiers[marker.LayerGroup])
			pointersInitializesStatements += setPointerField
		}

		if marker.DivIcon != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "DivIcon")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_DivIcon_Identifiers[marker.DivIcon])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, userclick := range userclickOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("UserClick", idx, userclick.Name)
		map_UserClick_Identifiers[userclick] = id

		// Initialisation of values
	}

	for idx, vline := range vlineOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("VLine", idx, vline.Name)
		map_VLine_Identifiers[vline] = id

		// Initialisation of values
		if vline.LayerGroup != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LayerGroup")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LayerGroup_Identifiers[vline.LayerGroup])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, visualtrack := range visualtrackOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("VisualTrack", idx, visualtrack.Name)
		map_VisualTrack_Identifiers[visualtrack] = id

		// Initialisation of values
		if visualtrack.LayerGroup != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "LayerGroup")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_LayerGroup_Identifiers[visualtrack.LayerGroup])
			pointersInitializesStatements += setPointerField
		}

		if visualtrack.DivIcon != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "DivIcon")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_DivIcon_Identifiers[visualtrack.DivIcon])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
// Utility function for ColorEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (colorenum ColorEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch colorenum {
	// insertion code per enum code
	case BLUE:
		res = "BLUE"
	case GREEN:
		res = "GREEN"
	case GREY:
		res = "GREY"
	case LIGHT_BROWN_8D6E63:
		res = "LIGHT_BROWN_8D6E63"
	case NONE:
		res = "NONE"
	case RED:
		res = "RED"
	}
	return
}

func (colorenum *ColorEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "BLUE":
		*colorenum = BLUE
	case "GREEN":
		*colorenum = GREEN
	case "GREY":
		*colorenum = GREY
	case "LIGHT_BROWN_8D6E63":
		*colorenum = LIGHT_BROWN_8D6E63
	case "NONE":
		*colorenum = NONE
	case "RED":
		*colorenum = RED
	}
}

// Utility function for DashStyleEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (dashstyleenum DashStyleEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch dashstyleenum {
	// insertion code per enum code
	case FIVE_TEN:
		res = "FIVE_TEN"
	case FIVE_TWENTY:
		res = "FIVE_TWENTY"
	}
	return
}

func (dashstyleenum *DashStyleEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "FIVE_TEN":
		*dashstyleenum = FIVE_TEN
	case "FIVE_TWENTY":
		*dashstyleenum = FIVE_TWENTY
	}
}

// Utility function for Start_To_End_Enum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (start_to_end_enum Start_To_End_Enum) ToString() (res string) {

	// migration of former implementation of enum
	switch start_to_end_enum {
	// insertion code per enum code
	case BACKWARD_END_TO_START:
		res = "BACKWARD_START_TO_END"
	case FORWARD_START_TO_END:
		res = "FORWARD_START_TO_END"
	}
	return
}

func (start_to_end_enum *Start_To_End_Enum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "BACKWARD_START_TO_END":
		*start_to_end_enum = BACKWARD_END_TO_START
	case "FORWARD_START_TO_END":
		*start_to_end_enum = FORWARD_START_TO_END
	}
}

// Utility function for TransmittingEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (transmittingenum TransmittingEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch transmittingenum {
	// insertion code per enum code
	case IS_NOT_TRANSMITTING:
		res = "IS_NOT_TRANSMITTING"
	case IS_TRANSMITTING:
		res = "IS_TRANSMITTING"
	}
	return
}

func (transmittingenum *TransmittingEnum) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "IS_NOT_TRANSMITTING":
		*transmittingenum = IS_NOT_TRANSMITTING
	case "IS_TRANSMITTING":
		*transmittingenum = IS_TRANSMITTING
	}
}

