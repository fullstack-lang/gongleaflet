// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	CheckoutSchedulers           map[*CheckoutScheduler]any
	CheckoutSchedulers_mapString map[string]*CheckoutScheduler

	OnAfterCheckoutSchedulerCreateCallback OnAfterCreateInterface[CheckoutScheduler]
	OnAfterCheckoutSchedulerUpdateCallback OnAfterUpdateInterface[CheckoutScheduler]
	OnAfterCheckoutSchedulerDeleteCallback OnAfterDeleteInterface[CheckoutScheduler]
	OnAfterCheckoutSchedulerReadCallback   OnAfterReadInterface[CheckoutScheduler]

	Circles           map[*Circle]any
	Circles_mapString map[string]*Circle

	OnAfterCircleCreateCallback OnAfterCreateInterface[Circle]
	OnAfterCircleUpdateCallback OnAfterUpdateInterface[Circle]
	OnAfterCircleDeleteCallback OnAfterDeleteInterface[Circle]
	OnAfterCircleReadCallback   OnAfterReadInterface[Circle]

	DivIcons           map[*DivIcon]any
	DivIcons_mapString map[string]*DivIcon

	OnAfterDivIconCreateCallback OnAfterCreateInterface[DivIcon]
	OnAfterDivIconUpdateCallback OnAfterUpdateInterface[DivIcon]
	OnAfterDivIconDeleteCallback OnAfterDeleteInterface[DivIcon]
	OnAfterDivIconReadCallback   OnAfterReadInterface[DivIcon]

	LayerGroups           map[*LayerGroup]any
	LayerGroups_mapString map[string]*LayerGroup

	OnAfterLayerGroupCreateCallback OnAfterCreateInterface[LayerGroup]
	OnAfterLayerGroupUpdateCallback OnAfterUpdateInterface[LayerGroup]
	OnAfterLayerGroupDeleteCallback OnAfterDeleteInterface[LayerGroup]
	OnAfterLayerGroupReadCallback   OnAfterReadInterface[LayerGroup]

	LayerGroupUses           map[*LayerGroupUse]any
	LayerGroupUses_mapString map[string]*LayerGroupUse

	OnAfterLayerGroupUseCreateCallback OnAfterCreateInterface[LayerGroupUse]
	OnAfterLayerGroupUseUpdateCallback OnAfterUpdateInterface[LayerGroupUse]
	OnAfterLayerGroupUseDeleteCallback OnAfterDeleteInterface[LayerGroupUse]
	OnAfterLayerGroupUseReadCallback   OnAfterReadInterface[LayerGroupUse]

	MapOptionss           map[*MapOptions]any
	MapOptionss_mapString map[string]*MapOptions

	OnAfterMapOptionsCreateCallback OnAfterCreateInterface[MapOptions]
	OnAfterMapOptionsUpdateCallback OnAfterUpdateInterface[MapOptions]
	OnAfterMapOptionsDeleteCallback OnAfterDeleteInterface[MapOptions]
	OnAfterMapOptionsReadCallback   OnAfterReadInterface[MapOptions]

	Markers           map[*Marker]any
	Markers_mapString map[string]*Marker

	OnAfterMarkerCreateCallback OnAfterCreateInterface[Marker]
	OnAfterMarkerUpdateCallback OnAfterUpdateInterface[Marker]
	OnAfterMarkerDeleteCallback OnAfterDeleteInterface[Marker]
	OnAfterMarkerReadCallback   OnAfterReadInterface[Marker]

	UserClicks           map[*UserClick]any
	UserClicks_mapString map[string]*UserClick

	OnAfterUserClickCreateCallback OnAfterCreateInterface[UserClick]
	OnAfterUserClickUpdateCallback OnAfterUpdateInterface[UserClick]
	OnAfterUserClickDeleteCallback OnAfterDeleteInterface[UserClick]
	OnAfterUserClickReadCallback   OnAfterReadInterface[UserClick]

	VLines           map[*VLine]any
	VLines_mapString map[string]*VLine

	OnAfterVLineCreateCallback OnAfterCreateInterface[VLine]
	OnAfterVLineUpdateCallback OnAfterUpdateInterface[VLine]
	OnAfterVLineDeleteCallback OnAfterDeleteInterface[VLine]
	OnAfterVLineReadCallback   OnAfterReadInterface[VLine]

	VisualTracks           map[*VisualTrack]any
	VisualTracks_mapString map[string]*VisualTrack

	OnAfterVisualTrackCreateCallback OnAfterCreateInterface[VisualTrack]
	OnAfterVisualTrackUpdateCallback OnAfterUpdateInterface[VisualTrack]
	OnAfterVisualTrackDeleteCallback OnAfterDeleteInterface[VisualTrack]
	OnAfterVisualTrackReadCallback   OnAfterReadInterface[VisualTrack]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string
	Map_DocLink_Renaming   map[string]string
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCheckoutScheduler(checkoutscheduler *CheckoutScheduler)
	CheckoutCheckoutScheduler(checkoutscheduler *CheckoutScheduler)
	CommitCircle(circle *Circle)
	CheckoutCircle(circle *Circle)
	CommitDivIcon(divicon *DivIcon)
	CheckoutDivIcon(divicon *DivIcon)
	CommitLayerGroup(layergroup *LayerGroup)
	CheckoutLayerGroup(layergroup *LayerGroup)
	CommitLayerGroupUse(layergroupuse *LayerGroupUse)
	CheckoutLayerGroupUse(layergroupuse *LayerGroupUse)
	CommitMapOptions(mapoptions *MapOptions)
	CheckoutMapOptions(mapoptions *MapOptions)
	CommitMarker(marker *Marker)
	CheckoutMarker(marker *Marker)
	CommitUserClick(userclick *UserClick)
	CheckoutUserClick(userclick *UserClick)
	CommitVLine(vline *VLine)
	CheckoutVLine(vline *VLine)
	CommitVisualTrack(visualtrack *VisualTrack)
	CheckoutVisualTrack(visualtrack *VisualTrack)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	CheckoutSchedulers:           make(map[*CheckoutScheduler]any),
	CheckoutSchedulers_mapString: make(map[string]*CheckoutScheduler),

	Circles:           make(map[*Circle]any),
	Circles_mapString: make(map[string]*Circle),

	DivIcons:           make(map[*DivIcon]any),
	DivIcons_mapString: make(map[string]*DivIcon),

	LayerGroups:           make(map[*LayerGroup]any),
	LayerGroups_mapString: make(map[string]*LayerGroup),

	LayerGroupUses:           make(map[*LayerGroupUse]any),
	LayerGroupUses_mapString: make(map[string]*LayerGroupUse),

	MapOptionss:           make(map[*MapOptions]any),
	MapOptionss_mapString: make(map[string]*MapOptions),

	Markers:           make(map[*Marker]any),
	Markers_mapString: make(map[string]*Marker),

	UserClicks:           make(map[*UserClick]any),
	UserClicks_mapString: make(map[string]*UserClick),

	VLines:           make(map[*VLine]any),
	VLines_mapString: make(map[string]*VLine),

	VisualTracks:           make(map[*VisualTrack]any),
	VisualTracks_mapString: make(map[string]*VisualTrack),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["CheckoutScheduler"] = len(stage.CheckoutSchedulers)
	stage.Map_GongStructName_InstancesNb["Circle"] = len(stage.Circles)
	stage.Map_GongStructName_InstancesNb["DivIcon"] = len(stage.DivIcons)
	stage.Map_GongStructName_InstancesNb["LayerGroup"] = len(stage.LayerGroups)
	stage.Map_GongStructName_InstancesNb["LayerGroupUse"] = len(stage.LayerGroupUses)
	stage.Map_GongStructName_InstancesNb["MapOptions"] = len(stage.MapOptionss)
	stage.Map_GongStructName_InstancesNb["Marker"] = len(stage.Markers)
	stage.Map_GongStructName_InstancesNb["UserClick"] = len(stage.UserClicks)
	stage.Map_GongStructName_InstancesNb["VLine"] = len(stage.VLines)
	stage.Map_GongStructName_InstancesNb["VisualTrack"] = len(stage.VisualTracks)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["CheckoutScheduler"] = len(stage.CheckoutSchedulers)
	stage.Map_GongStructName_InstancesNb["Circle"] = len(stage.Circles)
	stage.Map_GongStructName_InstancesNb["DivIcon"] = len(stage.DivIcons)
	stage.Map_GongStructName_InstancesNb["LayerGroup"] = len(stage.LayerGroups)
	stage.Map_GongStructName_InstancesNb["LayerGroupUse"] = len(stage.LayerGroupUses)
	stage.Map_GongStructName_InstancesNb["MapOptions"] = len(stage.MapOptionss)
	stage.Map_GongStructName_InstancesNb["Marker"] = len(stage.Markers)
	stage.Map_GongStructName_InstancesNb["UserClick"] = len(stage.UserClicks)
	stage.Map_GongStructName_InstancesNb["VLine"] = len(stage.VLines)
	stage.Map_GongStructName_InstancesNb["VisualTrack"] = len(stage.VisualTracks)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts checkoutscheduler to the model stage
func (checkoutscheduler *CheckoutScheduler) Stage() *CheckoutScheduler {
	Stage.CheckoutSchedulers[checkoutscheduler] = __member
	Stage.CheckoutSchedulers_mapString[checkoutscheduler.Name] = checkoutscheduler

	return checkoutscheduler
}

// Unstage removes checkoutscheduler off the model stage
func (checkoutscheduler *CheckoutScheduler) Unstage() *CheckoutScheduler {
	delete(Stage.CheckoutSchedulers, checkoutscheduler)
	delete(Stage.CheckoutSchedulers_mapString, checkoutscheduler.Name)
	return checkoutscheduler
}

// commit checkoutscheduler to the back repo (if it is already staged)
func (checkoutscheduler *CheckoutScheduler) Commit() *CheckoutScheduler {
	if _, ok := Stage.CheckoutSchedulers[checkoutscheduler]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCheckoutScheduler(checkoutscheduler)
		}
	}
	return checkoutscheduler
}

// Checkout checkoutscheduler to the back repo (if it is already staged)
func (checkoutscheduler *CheckoutScheduler) Checkout() *CheckoutScheduler {
	if _, ok := Stage.CheckoutSchedulers[checkoutscheduler]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCheckoutScheduler(checkoutscheduler)
		}
	}
	return checkoutscheduler
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of checkoutscheduler to the model stage
func (checkoutscheduler *CheckoutScheduler) StageCopy() *CheckoutScheduler {
	_checkoutscheduler := new(CheckoutScheduler)
	*_checkoutscheduler = *checkoutscheduler
	_checkoutscheduler.Stage()
	return _checkoutscheduler
}

// StageAndCommit appends checkoutscheduler to the model stage and commit to the orm repo
func (checkoutscheduler *CheckoutScheduler) StageAndCommit() *CheckoutScheduler {
	checkoutscheduler.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCheckoutScheduler(checkoutscheduler)
	}
	return checkoutscheduler
}

// DeleteStageAndCommit appends checkoutscheduler to the model stage and commit to the orm repo
func (checkoutscheduler *CheckoutScheduler) DeleteStageAndCommit() *CheckoutScheduler {
	checkoutscheduler.Unstage()
	DeleteORMCheckoutScheduler(checkoutscheduler)
	return checkoutscheduler
}

// StageCopyAndCommit appends a copy of checkoutscheduler to the model stage and commit to the orm repo
func (checkoutscheduler *CheckoutScheduler) StageCopyAndCommit() *CheckoutScheduler {
	_checkoutscheduler := new(CheckoutScheduler)
	*_checkoutscheduler = *checkoutscheduler
	_checkoutscheduler.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCheckoutScheduler(checkoutscheduler)
	}
	return _checkoutscheduler
}

// CreateORMCheckoutScheduler enables dynamic staging of a CheckoutScheduler instance
func CreateORMCheckoutScheduler(checkoutscheduler *CheckoutScheduler) {
	checkoutscheduler.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCheckoutScheduler(checkoutscheduler)
	}
}

// DeleteORMCheckoutScheduler enables dynamic staging of a CheckoutScheduler instance
func DeleteORMCheckoutScheduler(checkoutscheduler *CheckoutScheduler) {
	checkoutscheduler.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCheckoutScheduler(checkoutscheduler)
	}
}

// for satisfaction of GongStruct interface
func (checkoutscheduler *CheckoutScheduler) GetName() (res string) {
	return checkoutscheduler.Name
}

// Stage puts circle to the model stage
func (circle *Circle) Stage() *Circle {
	Stage.Circles[circle] = __member
	Stage.Circles_mapString[circle.Name] = circle

	return circle
}

// Unstage removes circle off the model stage
func (circle *Circle) Unstage() *Circle {
	delete(Stage.Circles, circle)
	delete(Stage.Circles_mapString, circle.Name)
	return circle
}

// commit circle to the back repo (if it is already staged)
func (circle *Circle) Commit() *Circle {
	if _, ok := Stage.Circles[circle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCircle(circle)
		}
	}
	return circle
}

// Checkout circle to the back repo (if it is already staged)
func (circle *Circle) Checkout() *Circle {
	if _, ok := Stage.Circles[circle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCircle(circle)
		}
	}
	return circle
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of circle to the model stage
func (circle *Circle) StageCopy() *Circle {
	_circle := new(Circle)
	*_circle = *circle
	_circle.Stage()
	return _circle
}

// StageAndCommit appends circle to the model stage and commit to the orm repo
func (circle *Circle) StageAndCommit() *Circle {
	circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
	return circle
}

// DeleteStageAndCommit appends circle to the model stage and commit to the orm repo
func (circle *Circle) DeleteStageAndCommit() *Circle {
	circle.Unstage()
	DeleteORMCircle(circle)
	return circle
}

// StageCopyAndCommit appends a copy of circle to the model stage and commit to the orm repo
func (circle *Circle) StageCopyAndCommit() *Circle {
	_circle := new(Circle)
	*_circle = *circle
	_circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
	return _circle
}

// CreateORMCircle enables dynamic staging of a Circle instance
func CreateORMCircle(circle *Circle) {
	circle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCircle(circle)
	}
}

// DeleteORMCircle enables dynamic staging of a Circle instance
func DeleteORMCircle(circle *Circle) {
	circle.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCircle(circle)
	}
}

// for satisfaction of GongStruct interface
func (circle *Circle) GetName() (res string) {
	return circle.Name
}

// Stage puts divicon to the model stage
func (divicon *DivIcon) Stage() *DivIcon {
	Stage.DivIcons[divicon] = __member
	Stage.DivIcons_mapString[divicon.Name] = divicon

	return divicon
}

// Unstage removes divicon off the model stage
func (divicon *DivIcon) Unstage() *DivIcon {
	delete(Stage.DivIcons, divicon)
	delete(Stage.DivIcons_mapString, divicon.Name)
	return divicon
}

// commit divicon to the back repo (if it is already staged)
func (divicon *DivIcon) Commit() *DivIcon {
	if _, ok := Stage.DivIcons[divicon]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDivIcon(divicon)
		}
	}
	return divicon
}

// Checkout divicon to the back repo (if it is already staged)
func (divicon *DivIcon) Checkout() *DivIcon {
	if _, ok := Stage.DivIcons[divicon]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDivIcon(divicon)
		}
	}
	return divicon
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of divicon to the model stage
func (divicon *DivIcon) StageCopy() *DivIcon {
	_divicon := new(DivIcon)
	*_divicon = *divicon
	_divicon.Stage()
	return _divicon
}

// StageAndCommit appends divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) StageAndCommit() *DivIcon {
	divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
	return divicon
}

// DeleteStageAndCommit appends divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) DeleteStageAndCommit() *DivIcon {
	divicon.Unstage()
	DeleteORMDivIcon(divicon)
	return divicon
}

// StageCopyAndCommit appends a copy of divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) StageCopyAndCommit() *DivIcon {
	_divicon := new(DivIcon)
	*_divicon = *divicon
	_divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
	return _divicon
}

// CreateORMDivIcon enables dynamic staging of a DivIcon instance
func CreateORMDivIcon(divicon *DivIcon) {
	divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
}

// DeleteORMDivIcon enables dynamic staging of a DivIcon instance
func DeleteORMDivIcon(divicon *DivIcon) {
	divicon.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDivIcon(divicon)
	}
}

// for satisfaction of GongStruct interface
func (divicon *DivIcon) GetName() (res string) {
	return divicon.Name
}

// Stage puts layergroup to the model stage
func (layergroup *LayerGroup) Stage() *LayerGroup {
	Stage.LayerGroups[layergroup] = __member
	Stage.LayerGroups_mapString[layergroup.Name] = layergroup

	return layergroup
}

// Unstage removes layergroup off the model stage
func (layergroup *LayerGroup) Unstage() *LayerGroup {
	delete(Stage.LayerGroups, layergroup)
	delete(Stage.LayerGroups_mapString, layergroup.Name)
	return layergroup
}

// commit layergroup to the back repo (if it is already staged)
func (layergroup *LayerGroup) Commit() *LayerGroup {
	if _, ok := Stage.LayerGroups[layergroup]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLayerGroup(layergroup)
		}
	}
	return layergroup
}

// Checkout layergroup to the back repo (if it is already staged)
func (layergroup *LayerGroup) Checkout() *LayerGroup {
	if _, ok := Stage.LayerGroups[layergroup]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLayerGroup(layergroup)
		}
	}
	return layergroup
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of layergroup to the model stage
func (layergroup *LayerGroup) StageCopy() *LayerGroup {
	_layergroup := new(LayerGroup)
	*_layergroup = *layergroup
	_layergroup.Stage()
	return _layergroup
}

// StageAndCommit appends layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) StageAndCommit() *LayerGroup {
	layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
	return layergroup
}

// DeleteStageAndCommit appends layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) DeleteStageAndCommit() *LayerGroup {
	layergroup.Unstage()
	DeleteORMLayerGroup(layergroup)
	return layergroup
}

// StageCopyAndCommit appends a copy of layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) StageCopyAndCommit() *LayerGroup {
	_layergroup := new(LayerGroup)
	*_layergroup = *layergroup
	_layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
	return _layergroup
}

// CreateORMLayerGroup enables dynamic staging of a LayerGroup instance
func CreateORMLayerGroup(layergroup *LayerGroup) {
	layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
}

// DeleteORMLayerGroup enables dynamic staging of a LayerGroup instance
func DeleteORMLayerGroup(layergroup *LayerGroup) {
	layergroup.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLayerGroup(layergroup)
	}
}

// for satisfaction of GongStruct interface
func (layergroup *LayerGroup) GetName() (res string) {
	return layergroup.Name
}

// Stage puts layergroupuse to the model stage
func (layergroupuse *LayerGroupUse) Stage() *LayerGroupUse {
	Stage.LayerGroupUses[layergroupuse] = __member
	Stage.LayerGroupUses_mapString[layergroupuse.Name] = layergroupuse

	return layergroupuse
}

// Unstage removes layergroupuse off the model stage
func (layergroupuse *LayerGroupUse) Unstage() *LayerGroupUse {
	delete(Stage.LayerGroupUses, layergroupuse)
	delete(Stage.LayerGroupUses_mapString, layergroupuse.Name)
	return layergroupuse
}

// commit layergroupuse to the back repo (if it is already staged)
func (layergroupuse *LayerGroupUse) Commit() *LayerGroupUse {
	if _, ok := Stage.LayerGroupUses[layergroupuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLayerGroupUse(layergroupuse)
		}
	}
	return layergroupuse
}

// Checkout layergroupuse to the back repo (if it is already staged)
func (layergroupuse *LayerGroupUse) Checkout() *LayerGroupUse {
	if _, ok := Stage.LayerGroupUses[layergroupuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLayerGroupUse(layergroupuse)
		}
	}
	return layergroupuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of layergroupuse to the model stage
func (layergroupuse *LayerGroupUse) StageCopy() *LayerGroupUse {
	_layergroupuse := new(LayerGroupUse)
	*_layergroupuse = *layergroupuse
	_layergroupuse.Stage()
	return _layergroupuse
}

// StageAndCommit appends layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) StageAndCommit() *LayerGroupUse {
	layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
	return layergroupuse
}

// DeleteStageAndCommit appends layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) DeleteStageAndCommit() *LayerGroupUse {
	layergroupuse.Unstage()
	DeleteORMLayerGroupUse(layergroupuse)
	return layergroupuse
}

// StageCopyAndCommit appends a copy of layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) StageCopyAndCommit() *LayerGroupUse {
	_layergroupuse := new(LayerGroupUse)
	*_layergroupuse = *layergroupuse
	_layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
	return _layergroupuse
}

// CreateORMLayerGroupUse enables dynamic staging of a LayerGroupUse instance
func CreateORMLayerGroupUse(layergroupuse *LayerGroupUse) {
	layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
}

// DeleteORMLayerGroupUse enables dynamic staging of a LayerGroupUse instance
func DeleteORMLayerGroupUse(layergroupuse *LayerGroupUse) {
	layergroupuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLayerGroupUse(layergroupuse)
	}
}

// for satisfaction of GongStruct interface
func (layergroupuse *LayerGroupUse) GetName() (res string) {
	return layergroupuse.Name
}

// Stage puts mapoptions to the model stage
func (mapoptions *MapOptions) Stage() *MapOptions {
	Stage.MapOptionss[mapoptions] = __member
	Stage.MapOptionss_mapString[mapoptions.Name] = mapoptions

	return mapoptions
}

// Unstage removes mapoptions off the model stage
func (mapoptions *MapOptions) Unstage() *MapOptions {
	delete(Stage.MapOptionss, mapoptions)
	delete(Stage.MapOptionss_mapString, mapoptions.Name)
	return mapoptions
}

// commit mapoptions to the back repo (if it is already staged)
func (mapoptions *MapOptions) Commit() *MapOptions {
	if _, ok := Stage.MapOptionss[mapoptions]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMapOptions(mapoptions)
		}
	}
	return mapoptions
}

// Checkout mapoptions to the back repo (if it is already staged)
func (mapoptions *MapOptions) Checkout() *MapOptions {
	if _, ok := Stage.MapOptionss[mapoptions]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMapOptions(mapoptions)
		}
	}
	return mapoptions
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of mapoptions to the model stage
func (mapoptions *MapOptions) StageCopy() *MapOptions {
	_mapoptions := new(MapOptions)
	*_mapoptions = *mapoptions
	_mapoptions.Stage()
	return _mapoptions
}

// StageAndCommit appends mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) StageAndCommit() *MapOptions {
	mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
	return mapoptions
}

// DeleteStageAndCommit appends mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) DeleteStageAndCommit() *MapOptions {
	mapoptions.Unstage()
	DeleteORMMapOptions(mapoptions)
	return mapoptions
}

// StageCopyAndCommit appends a copy of mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) StageCopyAndCommit() *MapOptions {
	_mapoptions := new(MapOptions)
	*_mapoptions = *mapoptions
	_mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
	return _mapoptions
}

// CreateORMMapOptions enables dynamic staging of a MapOptions instance
func CreateORMMapOptions(mapoptions *MapOptions) {
	mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
}

// DeleteORMMapOptions enables dynamic staging of a MapOptions instance
func DeleteORMMapOptions(mapoptions *MapOptions) {
	mapoptions.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMapOptions(mapoptions)
	}
}

// for satisfaction of GongStruct interface
func (mapoptions *MapOptions) GetName() (res string) {
	return mapoptions.Name
}

// Stage puts marker to the model stage
func (marker *Marker) Stage() *Marker {
	Stage.Markers[marker] = __member
	Stage.Markers_mapString[marker.Name] = marker

	return marker
}

// Unstage removes marker off the model stage
func (marker *Marker) Unstage() *Marker {
	delete(Stage.Markers, marker)
	delete(Stage.Markers_mapString, marker.Name)
	return marker
}

// commit marker to the back repo (if it is already staged)
func (marker *Marker) Commit() *Marker {
	if _, ok := Stage.Markers[marker]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMarker(marker)
		}
	}
	return marker
}

// Checkout marker to the back repo (if it is already staged)
func (marker *Marker) Checkout() *Marker {
	if _, ok := Stage.Markers[marker]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMarker(marker)
		}
	}
	return marker
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of marker to the model stage
func (marker *Marker) StageCopy() *Marker {
	_marker := new(Marker)
	*_marker = *marker
	_marker.Stage()
	return _marker
}

// StageAndCommit appends marker to the model stage and commit to the orm repo
func (marker *Marker) StageAndCommit() *Marker {
	marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
	return marker
}

// DeleteStageAndCommit appends marker to the model stage and commit to the orm repo
func (marker *Marker) DeleteStageAndCommit() *Marker {
	marker.Unstage()
	DeleteORMMarker(marker)
	return marker
}

// StageCopyAndCommit appends a copy of marker to the model stage and commit to the orm repo
func (marker *Marker) StageCopyAndCommit() *Marker {
	_marker := new(Marker)
	*_marker = *marker
	_marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
	return _marker
}

// CreateORMMarker enables dynamic staging of a Marker instance
func CreateORMMarker(marker *Marker) {
	marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
}

// DeleteORMMarker enables dynamic staging of a Marker instance
func DeleteORMMarker(marker *Marker) {
	marker.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMarker(marker)
	}
}

// for satisfaction of GongStruct interface
func (marker *Marker) GetName() (res string) {
	return marker.Name
}

// Stage puts userclick to the model stage
func (userclick *UserClick) Stage() *UserClick {
	Stage.UserClicks[userclick] = __member
	Stage.UserClicks_mapString[userclick.Name] = userclick

	return userclick
}

// Unstage removes userclick off the model stage
func (userclick *UserClick) Unstage() *UserClick {
	delete(Stage.UserClicks, userclick)
	delete(Stage.UserClicks_mapString, userclick.Name)
	return userclick
}

// commit userclick to the back repo (if it is already staged)
func (userclick *UserClick) Commit() *UserClick {
	if _, ok := Stage.UserClicks[userclick]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitUserClick(userclick)
		}
	}
	return userclick
}

// Checkout userclick to the back repo (if it is already staged)
func (userclick *UserClick) Checkout() *UserClick {
	if _, ok := Stage.UserClicks[userclick]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutUserClick(userclick)
		}
	}
	return userclick
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of userclick to the model stage
func (userclick *UserClick) StageCopy() *UserClick {
	_userclick := new(UserClick)
	*_userclick = *userclick
	_userclick.Stage()
	return _userclick
}

// StageAndCommit appends userclick to the model stage and commit to the orm repo
func (userclick *UserClick) StageAndCommit() *UserClick {
	userclick.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUserClick(userclick)
	}
	return userclick
}

// DeleteStageAndCommit appends userclick to the model stage and commit to the orm repo
func (userclick *UserClick) DeleteStageAndCommit() *UserClick {
	userclick.Unstage()
	DeleteORMUserClick(userclick)
	return userclick
}

// StageCopyAndCommit appends a copy of userclick to the model stage and commit to the orm repo
func (userclick *UserClick) StageCopyAndCommit() *UserClick {
	_userclick := new(UserClick)
	*_userclick = *userclick
	_userclick.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUserClick(userclick)
	}
	return _userclick
}

// CreateORMUserClick enables dynamic staging of a UserClick instance
func CreateORMUserClick(userclick *UserClick) {
	userclick.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMUserClick(userclick)
	}
}

// DeleteORMUserClick enables dynamic staging of a UserClick instance
func DeleteORMUserClick(userclick *UserClick) {
	userclick.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMUserClick(userclick)
	}
}

// for satisfaction of GongStruct interface
func (userclick *UserClick) GetName() (res string) {
	return userclick.Name
}

// Stage puts vline to the model stage
func (vline *VLine) Stage() *VLine {
	Stage.VLines[vline] = __member
	Stage.VLines_mapString[vline.Name] = vline

	return vline
}

// Unstage removes vline off the model stage
func (vline *VLine) Unstage() *VLine {
	delete(Stage.VLines, vline)
	delete(Stage.VLines_mapString, vline.Name)
	return vline
}

// commit vline to the back repo (if it is already staged)
func (vline *VLine) Commit() *VLine {
	if _, ok := Stage.VLines[vline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVLine(vline)
		}
	}
	return vline
}

// Checkout vline to the back repo (if it is already staged)
func (vline *VLine) Checkout() *VLine {
	if _, ok := Stage.VLines[vline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVLine(vline)
		}
	}
	return vline
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of vline to the model stage
func (vline *VLine) StageCopy() *VLine {
	_vline := new(VLine)
	*_vline = *vline
	_vline.Stage()
	return _vline
}

// StageAndCommit appends vline to the model stage and commit to the orm repo
func (vline *VLine) StageAndCommit() *VLine {
	vline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVLine(vline)
	}
	return vline
}

// DeleteStageAndCommit appends vline to the model stage and commit to the orm repo
func (vline *VLine) DeleteStageAndCommit() *VLine {
	vline.Unstage()
	DeleteORMVLine(vline)
	return vline
}

// StageCopyAndCommit appends a copy of vline to the model stage and commit to the orm repo
func (vline *VLine) StageCopyAndCommit() *VLine {
	_vline := new(VLine)
	*_vline = *vline
	_vline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVLine(vline)
	}
	return _vline
}

// CreateORMVLine enables dynamic staging of a VLine instance
func CreateORMVLine(vline *VLine) {
	vline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVLine(vline)
	}
}

// DeleteORMVLine enables dynamic staging of a VLine instance
func DeleteORMVLine(vline *VLine) {
	vline.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVLine(vline)
	}
}

// for satisfaction of GongStruct interface
func (vline *VLine) GetName() (res string) {
	return vline.Name
}

// Stage puts visualtrack to the model stage
func (visualtrack *VisualTrack) Stage() *VisualTrack {
	Stage.VisualTracks[visualtrack] = __member
	Stage.VisualTracks_mapString[visualtrack.Name] = visualtrack

	return visualtrack
}

// Unstage removes visualtrack off the model stage
func (visualtrack *VisualTrack) Unstage() *VisualTrack {
	delete(Stage.VisualTracks, visualtrack)
	delete(Stage.VisualTracks_mapString, visualtrack.Name)
	return visualtrack
}

// commit visualtrack to the back repo (if it is already staged)
func (visualtrack *VisualTrack) Commit() *VisualTrack {
	if _, ok := Stage.VisualTracks[visualtrack]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVisualTrack(visualtrack)
		}
	}
	return visualtrack
}

// Checkout visualtrack to the back repo (if it is already staged)
func (visualtrack *VisualTrack) Checkout() *VisualTrack {
	if _, ok := Stage.VisualTracks[visualtrack]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVisualTrack(visualtrack)
		}
	}
	return visualtrack
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of visualtrack to the model stage
func (visualtrack *VisualTrack) StageCopy() *VisualTrack {
	_visualtrack := new(VisualTrack)
	*_visualtrack = *visualtrack
	_visualtrack.Stage()
	return _visualtrack
}

// StageAndCommit appends visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) StageAndCommit() *VisualTrack {
	visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
	return visualtrack
}

// DeleteStageAndCommit appends visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) DeleteStageAndCommit() *VisualTrack {
	visualtrack.Unstage()
	DeleteORMVisualTrack(visualtrack)
	return visualtrack
}

// StageCopyAndCommit appends a copy of visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) StageCopyAndCommit() *VisualTrack {
	_visualtrack := new(VisualTrack)
	*_visualtrack = *visualtrack
	_visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
	return _visualtrack
}

// CreateORMVisualTrack enables dynamic staging of a VisualTrack instance
func CreateORMVisualTrack(visualtrack *VisualTrack) {
	visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
}

// DeleteORMVisualTrack enables dynamic staging of a VisualTrack instance
func DeleteORMVisualTrack(visualtrack *VisualTrack) {
	visualtrack.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVisualTrack(visualtrack)
	}
}

// for satisfaction of GongStruct interface
func (visualtrack *VisualTrack) GetName() (res string) {
	return visualtrack.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCheckoutScheduler(CheckoutScheduler *CheckoutScheduler)
	CreateORMCircle(Circle *Circle)
	CreateORMDivIcon(DivIcon *DivIcon)
	CreateORMLayerGroup(LayerGroup *LayerGroup)
	CreateORMLayerGroupUse(LayerGroupUse *LayerGroupUse)
	CreateORMMapOptions(MapOptions *MapOptions)
	CreateORMMarker(Marker *Marker)
	CreateORMUserClick(UserClick *UserClick)
	CreateORMVLine(VLine *VLine)
	CreateORMVisualTrack(VisualTrack *VisualTrack)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCheckoutScheduler(CheckoutScheduler *CheckoutScheduler)
	DeleteORMCircle(Circle *Circle)
	DeleteORMDivIcon(DivIcon *DivIcon)
	DeleteORMLayerGroup(LayerGroup *LayerGroup)
	DeleteORMLayerGroupUse(LayerGroupUse *LayerGroupUse)
	DeleteORMMapOptions(MapOptions *MapOptions)
	DeleteORMMarker(Marker *Marker)
	DeleteORMUserClick(UserClick *UserClick)
	DeleteORMVLine(VLine *VLine)
	DeleteORMVisualTrack(VisualTrack *VisualTrack)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.CheckoutSchedulers = make(map[*CheckoutScheduler]any)
	stage.CheckoutSchedulers_mapString = make(map[string]*CheckoutScheduler)

	stage.Circles = make(map[*Circle]any)
	stage.Circles_mapString = make(map[string]*Circle)

	stage.DivIcons = make(map[*DivIcon]any)
	stage.DivIcons_mapString = make(map[string]*DivIcon)

	stage.LayerGroups = make(map[*LayerGroup]any)
	stage.LayerGroups_mapString = make(map[string]*LayerGroup)

	stage.LayerGroupUses = make(map[*LayerGroupUse]any)
	stage.LayerGroupUses_mapString = make(map[string]*LayerGroupUse)

	stage.MapOptionss = make(map[*MapOptions]any)
	stage.MapOptionss_mapString = make(map[string]*MapOptions)

	stage.Markers = make(map[*Marker]any)
	stage.Markers_mapString = make(map[string]*Marker)

	stage.UserClicks = make(map[*UserClick]any)
	stage.UserClicks_mapString = make(map[string]*UserClick)

	stage.VLines = make(map[*VLine]any)
	stage.VLines_mapString = make(map[string]*VLine)

	stage.VisualTracks = make(map[*VisualTrack]any)
	stage.VisualTracks_mapString = make(map[string]*VisualTrack)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.CheckoutSchedulers = nil
	stage.CheckoutSchedulers_mapString = nil

	stage.Circles = nil
	stage.Circles_mapString = nil

	stage.DivIcons = nil
	stage.DivIcons_mapString = nil

	stage.LayerGroups = nil
	stage.LayerGroups_mapString = nil

	stage.LayerGroupUses = nil
	stage.LayerGroupUses_mapString = nil

	stage.MapOptionss = nil
	stage.MapOptionss_mapString = nil

	stage.Markers = nil
	stage.Markers_mapString = nil

	stage.UserClicks = nil
	stage.UserClicks_mapString = nil

	stage.VLines = nil
	stage.VLines_mapString = nil

	stage.VisualTracks = nil
	stage.VisualTracks_mapString = nil

}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of CheckoutScheduler

// generate function for reverse association maps of Circle
func (stageStruct *StageStruct) CreateReverseMap_Circle_LayerGroup() (res map[*LayerGroup][]*Circle) {
	res = make(map[*LayerGroup][]*Circle)

	for circle := range stageStruct.Circles {
		if circle.LayerGroup != nil {
			layergroup_ := circle.LayerGroup
			var circles []*Circle
			_, ok := res[layergroup_]
			if ok {
				circles = res[layergroup_]
			} else {
				circles = make([]*Circle, 0)
			}
			circles = append(circles, circle)
			res[layergroup_] = circles
		}
	}

	return
}

// generate function for reverse association maps of DivIcon

// generate function for reverse association maps of LayerGroup

// generate function for reverse association maps of LayerGroupUse
func (stageStruct *StageStruct) CreateReverseMap_LayerGroupUse_LayerGroup() (res map[*LayerGroup][]*LayerGroupUse) {
	res = make(map[*LayerGroup][]*LayerGroupUse)

	for layergroupuse := range stageStruct.LayerGroupUses {
		if layergroupuse.LayerGroup != nil {
			layergroup_ := layergroupuse.LayerGroup
			var layergroupuses []*LayerGroupUse
			_, ok := res[layergroup_]
			if ok {
				layergroupuses = res[layergroup_]
			} else {
				layergroupuses = make([]*LayerGroupUse, 0)
			}
			layergroupuses = append(layergroupuses, layergroupuse)
			res[layergroup_] = layergroupuses
		}
	}

	return
}

// generate function for reverse association maps of MapOptions
func (stageStruct *StageStruct) CreateReverseMap_MapOptions_LayerGroupUses() (res map[*LayerGroupUse]*MapOptions) {
	res = make(map[*LayerGroupUse]*MapOptions)

	for mapoptions := range stageStruct.MapOptionss {
		for _, layergroupuse_ := range mapoptions.LayerGroupUses {
			res[layergroupuse_] = mapoptions
		}
	}

	return
}


// generate function for reverse association maps of Marker
func (stageStruct *StageStruct) CreateReverseMap_Marker_LayerGroup() (res map[*LayerGroup][]*Marker) {
	res = make(map[*LayerGroup][]*Marker)

	for marker := range stageStruct.Markers {
		if marker.LayerGroup != nil {
			layergroup_ := marker.LayerGroup
			var markers []*Marker
			_, ok := res[layergroup_]
			if ok {
				markers = res[layergroup_]
			} else {
				markers = make([]*Marker, 0)
			}
			markers = append(markers, marker)
			res[layergroup_] = markers
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_Marker_DivIcon() (res map[*DivIcon][]*Marker) {
	res = make(map[*DivIcon][]*Marker)

	for marker := range stageStruct.Markers {
		if marker.DivIcon != nil {
			divicon_ := marker.DivIcon
			var markers []*Marker
			_, ok := res[divicon_]
			if ok {
				markers = res[divicon_]
			} else {
				markers = make([]*Marker, 0)
			}
			markers = append(markers, marker)
			res[divicon_] = markers
		}
	}

	return
}

// generate function for reverse association maps of UserClick

// generate function for reverse association maps of VLine
func (stageStruct *StageStruct) CreateReverseMap_VLine_LayerGroup() (res map[*LayerGroup][]*VLine) {
	res = make(map[*LayerGroup][]*VLine)

	for vline := range stageStruct.VLines {
		if vline.LayerGroup != nil {
			layergroup_ := vline.LayerGroup
			var vlines []*VLine
			_, ok := res[layergroup_]
			if ok {
				vlines = res[layergroup_]
			} else {
				vlines = make([]*VLine, 0)
			}
			vlines = append(vlines, vline)
			res[layergroup_] = vlines
		}
	}

	return
}

// generate function for reverse association maps of VisualTrack
func (stageStruct *StageStruct) CreateReverseMap_VisualTrack_LayerGroup() (res map[*LayerGroup][]*VisualTrack) {
	res = make(map[*LayerGroup][]*VisualTrack)

	for visualtrack := range stageStruct.VisualTracks {
		if visualtrack.LayerGroup != nil {
			layergroup_ := visualtrack.LayerGroup
			var visualtracks []*VisualTrack
			_, ok := res[layergroup_]
			if ok {
				visualtracks = res[layergroup_]
			} else {
				visualtracks = make([]*VisualTrack, 0)
			}
			visualtracks = append(visualtracks, visualtrack)
			res[layergroup_] = visualtracks
		}
	}

	return
}
func (stageStruct *StageStruct) CreateReverseMap_VisualTrack_DivIcon() (res map[*DivIcon][]*VisualTrack) {
	res = make(map[*DivIcon][]*VisualTrack)

	for visualtrack := range stageStruct.VisualTracks {
		if visualtrack.DivIcon != nil {
			divicon_ := visualtrack.DivIcon
			var visualtracks []*VisualTrack
			_, ok := res[divicon_]
			if ok {
				visualtracks = res[divicon_]
			} else {
				visualtracks = make([]*VisualTrack, 0)
			}
			visualtracks = append(visualtracks, visualtrack)
			res[divicon_] = visualtracks
		}
	}

	return
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	CheckoutScheduler | Circle | DivIcon | LayerGroup | LayerGroupUse | MapOptions | Marker | UserClick | VLine | VisualTrack
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*CheckoutScheduler | *Circle | *DivIcon | *LayerGroup | *LayerGroupUse | *MapOptions | *Marker | *UserClick | *VLine | *VisualTrack
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*CheckoutScheduler]any |
		map[*Circle]any |
		map[*DivIcon]any |
		map[*LayerGroup]any |
		map[*LayerGroupUse]any |
		map[*MapOptions]any |
		map[*Marker]any |
		map[*UserClick]any |
		map[*VLine]any |
		map[*VisualTrack]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*CheckoutScheduler |
		map[string]*Circle |
		map[string]*DivIcon |
		map[string]*LayerGroup |
		map[string]*LayerGroupUse |
		map[string]*MapOptions |
		map[string]*Marker |
		map[string]*UserClick |
		map[string]*VLine |
		map[string]*VisualTrack |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*CheckoutScheduler]any:
		return any(&Stage.CheckoutSchedulers).(*Type)
	case map[*Circle]any:
		return any(&Stage.Circles).(*Type)
	case map[*DivIcon]any:
		return any(&Stage.DivIcons).(*Type)
	case map[*LayerGroup]any:
		return any(&Stage.LayerGroups).(*Type)
	case map[*LayerGroupUse]any:
		return any(&Stage.LayerGroupUses).(*Type)
	case map[*MapOptions]any:
		return any(&Stage.MapOptionss).(*Type)
	case map[*Marker]any:
		return any(&Stage.Markers).(*Type)
	case map[*UserClick]any:
		return any(&Stage.UserClicks).(*Type)
	case map[*VLine]any:
		return any(&Stage.VLines).(*Type)
	case map[*VisualTrack]any:
		return any(&Stage.VisualTracks).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*CheckoutScheduler:
		return any(&Stage.CheckoutSchedulers_mapString).(*Type)
	case map[string]*Circle:
		return any(&Stage.Circles_mapString).(*Type)
	case map[string]*DivIcon:
		return any(&Stage.DivIcons_mapString).(*Type)
	case map[string]*LayerGroup:
		return any(&Stage.LayerGroups_mapString).(*Type)
	case map[string]*LayerGroupUse:
		return any(&Stage.LayerGroupUses_mapString).(*Type)
	case map[string]*MapOptions:
		return any(&Stage.MapOptionss_mapString).(*Type)
	case map[string]*Marker:
		return any(&Stage.Markers_mapString).(*Type)
	case map[string]*UserClick:
		return any(&Stage.UserClicks_mapString).(*Type)
	case map[string]*VLine:
		return any(&Stage.VLines_mapString).(*Type)
	case map[string]*VisualTrack:
		return any(&Stage.VisualTracks_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case CheckoutScheduler:
		return any(&Stage.CheckoutSchedulers).(*map[*Type]any)
	case Circle:
		return any(&Stage.Circles).(*map[*Type]any)
	case DivIcon:
		return any(&Stage.DivIcons).(*map[*Type]any)
	case LayerGroup:
		return any(&Stage.LayerGroups).(*map[*Type]any)
	case LayerGroupUse:
		return any(&Stage.LayerGroupUses).(*map[*Type]any)
	case MapOptions:
		return any(&Stage.MapOptionss).(*map[*Type]any)
	case Marker:
		return any(&Stage.Markers).(*map[*Type]any)
	case UserClick:
		return any(&Stage.UserClicks).(*map[*Type]any)
	case VLine:
		return any(&Stage.VLines).(*map[*Type]any)
	case VisualTrack:
		return any(&Stage.VisualTracks).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case CheckoutScheduler:
		return any(&Stage.CheckoutSchedulers_mapString).(*map[string]*Type)
	case Circle:
		return any(&Stage.Circles_mapString).(*map[string]*Type)
	case DivIcon:
		return any(&Stage.DivIcons_mapString).(*map[string]*Type)
	case LayerGroup:
		return any(&Stage.LayerGroups_mapString).(*map[string]*Type)
	case LayerGroupUse:
		return any(&Stage.LayerGroupUses_mapString).(*map[string]*Type)
	case MapOptions:
		return any(&Stage.MapOptionss_mapString).(*map[string]*Type)
	case Marker:
		return any(&Stage.Markers_mapString).(*map[string]*Type)
	case UserClick:
		return any(&Stage.UserClicks_mapString).(*map[string]*Type)
	case VLine:
		return any(&Stage.VLines_mapString).(*map[string]*Type)
	case VisualTrack:
		return any(&Stage.VisualTracks_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case CheckoutScheduler:
		return any(&CheckoutScheduler{
			// Initialisation of associations
		}).(*Type)
	case Circle:
		return any(&Circle{
			// Initialisation of associations
			// field is initialized with an instance of LayerGroup with the name of the field
			LayerGroup: &LayerGroup{Name: "LayerGroup"},
		}).(*Type)
	case DivIcon:
		return any(&DivIcon{
			// Initialisation of associations
		}).(*Type)
	case LayerGroup:
		return any(&LayerGroup{
			// Initialisation of associations
		}).(*Type)
	case LayerGroupUse:
		return any(&LayerGroupUse{
			// Initialisation of associations
			// field is initialized with an instance of LayerGroup with the name of the field
			LayerGroup: &LayerGroup{Name: "LayerGroup"},
		}).(*Type)
	case MapOptions:
		return any(&MapOptions{
			// Initialisation of associations
			// field is initialized with an instance of LayerGroupUse with the name of the field
			LayerGroupUses: []*LayerGroupUse{{Name: "LayerGroupUses"}},
		}).(*Type)
	case Marker:
		return any(&Marker{
			// Initialisation of associations
			// field is initialized with an instance of LayerGroup with the name of the field
			LayerGroup: &LayerGroup{Name: "LayerGroup"},
			// field is initialized with an instance of DivIcon with the name of the field
			DivIcon: &DivIcon{Name: "DivIcon"},
		}).(*Type)
	case UserClick:
		return any(&UserClick{
			// Initialisation of associations
		}).(*Type)
	case VLine:
		return any(&VLine{
			// Initialisation of associations
			// field is initialized with an instance of LayerGroup with the name of the field
			LayerGroup: &LayerGroup{Name: "LayerGroup"},
		}).(*Type)
	case VisualTrack:
		return any(&VisualTrack{
			// Initialisation of associations
			// field is initialized with an instance of LayerGroup with the name of the field
			LayerGroup: &LayerGroup{Name: "LayerGroup"},
			// field is initialized with an instance of DivIcon with the name of the field
			DivIcon: &DivIcon{Name: "DivIcon"},
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of CheckoutScheduler
	case CheckoutScheduler:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Circle
	case Circle:
		switch fieldname {
		// insertion point for per direct association field
		case "LayerGroup":
			res := make(map[*LayerGroup][]*Circle)
			for circle := range Stage.Circles {
				if circle.LayerGroup != nil {
					layergroup_ := circle.LayerGroup
					var circles []*Circle
					_, ok := res[layergroup_]
					if ok {
						circles = res[layergroup_]
					} else {
						circles = make([]*Circle, 0)
					}
					circles = append(circles, circle)
					res[layergroup_] = circles
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of DivIcon
	case DivIcon:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LayerGroup
	case LayerGroup:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LayerGroupUse
	case LayerGroupUse:
		switch fieldname {
		// insertion point for per direct association field
		case "LayerGroup":
			res := make(map[*LayerGroup][]*LayerGroupUse)
			for layergroupuse := range Stage.LayerGroupUses {
				if layergroupuse.LayerGroup != nil {
					layergroup_ := layergroupuse.LayerGroup
					var layergroupuses []*LayerGroupUse
					_, ok := res[layergroup_]
					if ok {
						layergroupuses = res[layergroup_]
					} else {
						layergroupuses = make([]*LayerGroupUse, 0)
					}
					layergroupuses = append(layergroupuses, layergroupuse)
					res[layergroup_] = layergroupuses
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of MapOptions
	case MapOptions:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Marker
	case Marker:
		switch fieldname {
		// insertion point for per direct association field
		case "LayerGroup":
			res := make(map[*LayerGroup][]*Marker)
			for marker := range Stage.Markers {
				if marker.LayerGroup != nil {
					layergroup_ := marker.LayerGroup
					var markers []*Marker
					_, ok := res[layergroup_]
					if ok {
						markers = res[layergroup_]
					} else {
						markers = make([]*Marker, 0)
					}
					markers = append(markers, marker)
					res[layergroup_] = markers
				}
			}
			return any(res).(map[*End][]*Start)
		case "DivIcon":
			res := make(map[*DivIcon][]*Marker)
			for marker := range Stage.Markers {
				if marker.DivIcon != nil {
					divicon_ := marker.DivIcon
					var markers []*Marker
					_, ok := res[divicon_]
					if ok {
						markers = res[divicon_]
					} else {
						markers = make([]*Marker, 0)
					}
					markers = append(markers, marker)
					res[divicon_] = markers
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of UserClick
	case UserClick:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of VLine
	case VLine:
		switch fieldname {
		// insertion point for per direct association field
		case "LayerGroup":
			res := make(map[*LayerGroup][]*VLine)
			for vline := range Stage.VLines {
				if vline.LayerGroup != nil {
					layergroup_ := vline.LayerGroup
					var vlines []*VLine
					_, ok := res[layergroup_]
					if ok {
						vlines = res[layergroup_]
					} else {
						vlines = make([]*VLine, 0)
					}
					vlines = append(vlines, vline)
					res[layergroup_] = vlines
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of VisualTrack
	case VisualTrack:
		switch fieldname {
		// insertion point for per direct association field
		case "LayerGroup":
			res := make(map[*LayerGroup][]*VisualTrack)
			for visualtrack := range Stage.VisualTracks {
				if visualtrack.LayerGroup != nil {
					layergroup_ := visualtrack.LayerGroup
					var visualtracks []*VisualTrack
					_, ok := res[layergroup_]
					if ok {
						visualtracks = res[layergroup_]
					} else {
						visualtracks = make([]*VisualTrack, 0)
					}
					visualtracks = append(visualtracks, visualtrack)
					res[layergroup_] = visualtracks
				}
			}
			return any(res).(map[*End][]*Start)
		case "DivIcon":
			res := make(map[*DivIcon][]*VisualTrack)
			for visualtrack := range Stage.VisualTracks {
				if visualtrack.DivIcon != nil {
					divicon_ := visualtrack.DivIcon
					var visualtracks []*VisualTrack
					_, ok := res[divicon_]
					if ok {
						visualtracks = res[divicon_]
					} else {
						visualtracks = make([]*VisualTrack, 0)
					}
					visualtracks = append(visualtracks, visualtrack)
					res[divicon_] = visualtracks
				}
			}
			return any(res).(map[*End][]*Start)
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of CheckoutScheduler
	case CheckoutScheduler:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Circle
	case Circle:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of DivIcon
	case DivIcon:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LayerGroup
	case LayerGroup:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of LayerGroupUse
	case LayerGroupUse:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of MapOptions
	case MapOptions:
		switch fieldname {
		// insertion point for per direct association field
		case "LayerGroupUses":
			res := make(map[*LayerGroupUse]*MapOptions)
			for mapoptions := range Stage.MapOptionss {
				for _, layergroupuse_ := range mapoptions.LayerGroupUses {
					res[layergroupuse_] = mapoptions
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Marker
	case Marker:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of UserClick
	case UserClick:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of VLine
	case VLine:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of VisualTrack
	case VisualTrack:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case CheckoutScheduler:
		res = "CheckoutScheduler"
	case Circle:
		res = "Circle"
	case DivIcon:
		res = "DivIcon"
	case LayerGroup:
		res = "LayerGroup"
	case LayerGroupUse:
		res = "LayerGroupUse"
	case MapOptions:
		res = "MapOptions"
	case Marker:
		res = "Marker"
	case UserClick:
		res = "UserClick"
	case VLine:
		res = "VLine"
	case VisualTrack:
		res = "VisualTrack"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case CheckoutScheduler:
		res = []string{"Name", "NbUpdatesFromFront"}
	case Circle:
		res = []string{"Lat", "Lng", "Name", "Radius", "ColorEnum", "DashStyleEnum", "LayerGroup"}
	case DivIcon:
		res = []string{"Name", "SVG"}
	case LayerGroup:
		res = []string{"Name", "DisplayName"}
	case LayerGroupUse:
		res = []string{"Name", "Display", "LayerGroup"}
	case MapOptions:
		res = []string{"Lat", "Lng", "Name", "ZoomLevel", "UrlTemplate", "Attribution", "MaxZoom", "ZoomControl", "AttributionControl", "ZoomSnap", "LayerGroupUses"}
	case Marker:
		res = []string{"Lat", "Lng", "Name", "ColorEnum", "LayerGroup", "DivIcon"}
	case UserClick:
		res = []string{"Name", "Lat", "Lng", "TimeOfClick"}
	case VLine:
		res = []string{"StartLat", "StartLng", "EndLat", "EndLng", "Name", "ColorEnum", "DashStyleEnum", "LayerGroup", "IsTransmitting", "Message", "IsTransmittingBackward", "MessageBackward"}
	case VisualTrack:
		res = []string{"Lat", "Lng", "Heading", "Level", "Speed", "VerticalSpeed", "Name", "ColorEnum", "LayerGroup", "DivIcon", "DisplayTrackHistory", "DisplayLevelAndSpeed"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case CheckoutScheduler:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(CheckoutScheduler).Name
		case "NbUpdatesFromFront":
			res = fmt.Sprintf("%d", any(instance).(CheckoutScheduler).NbUpdatesFromFront)
		}
	case Circle:
		switch fieldName {
		// string value of fields
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Circle).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Circle).Lng)
		case "Name":
			res = any(instance).(Circle).Name
		case "Radius":
			res = fmt.Sprintf("%f", any(instance).(Circle).Radius)
		case "ColorEnum":
			enum := any(instance).(Circle).ColorEnum
			res = enum.ToCodeString()
		case "DashStyleEnum":
			enum := any(instance).(Circle).DashStyleEnum
			res = enum.ToCodeString()
		case "LayerGroup":
			if any(instance).(Circle).LayerGroup != nil {
				res = any(instance).(Circle).LayerGroup.Name
			}
		}
	case DivIcon:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(DivIcon).Name
		case "SVG":
			res = any(instance).(DivIcon).SVG
		}
	case LayerGroup:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(LayerGroup).Name
		case "DisplayName":
			res = any(instance).(LayerGroup).DisplayName
		}
	case LayerGroupUse:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(LayerGroupUse).Name
		case "Display":
			res = fmt.Sprintf("%t", any(instance).(LayerGroupUse).Display)
		case "LayerGroup":
			if any(instance).(LayerGroupUse).LayerGroup != nil {
				res = any(instance).(LayerGroupUse).LayerGroup.Name
			}
		}
	case MapOptions:
		switch fieldName {
		// string value of fields
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(MapOptions).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(MapOptions).Lng)
		case "Name":
			res = any(instance).(MapOptions).Name
		case "ZoomLevel":
			res = fmt.Sprintf("%f", any(instance).(MapOptions).ZoomLevel)
		case "UrlTemplate":
			res = any(instance).(MapOptions).UrlTemplate
		case "Attribution":
			res = any(instance).(MapOptions).Attribution
		case "MaxZoom":
			res = fmt.Sprintf("%d", any(instance).(MapOptions).MaxZoom)
		case "ZoomControl":
			res = fmt.Sprintf("%t", any(instance).(MapOptions).ZoomControl)
		case "AttributionControl":
			res = fmt.Sprintf("%t", any(instance).(MapOptions).AttributionControl)
		case "ZoomSnap":
			res = fmt.Sprintf("%d", any(instance).(MapOptions).ZoomSnap)
		case "LayerGroupUses":
			for idx, __instance__ := range any(instance).(MapOptions).LayerGroupUses {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case Marker:
		switch fieldName {
		// string value of fields
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(Marker).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(Marker).Lng)
		case "Name":
			res = any(instance).(Marker).Name
		case "ColorEnum":
			enum := any(instance).(Marker).ColorEnum
			res = enum.ToCodeString()
		case "LayerGroup":
			if any(instance).(Marker).LayerGroup != nil {
				res = any(instance).(Marker).LayerGroup.Name
			}
		case "DivIcon":
			if any(instance).(Marker).DivIcon != nil {
				res = any(instance).(Marker).DivIcon.Name
			}
		}
	case UserClick:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(UserClick).Name
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(UserClick).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(UserClick).Lng)
		case "TimeOfClick":
			res = any(instance).(UserClick).TimeOfClick.String()
		}
	case VLine:
		switch fieldName {
		// string value of fields
		case "StartLat":
			res = fmt.Sprintf("%f", any(instance).(VLine).StartLat)
		case "StartLng":
			res = fmt.Sprintf("%f", any(instance).(VLine).StartLng)
		case "EndLat":
			res = fmt.Sprintf("%f", any(instance).(VLine).EndLat)
		case "EndLng":
			res = fmt.Sprintf("%f", any(instance).(VLine).EndLng)
		case "Name":
			res = any(instance).(VLine).Name
		case "ColorEnum":
			enum := any(instance).(VLine).ColorEnum
			res = enum.ToCodeString()
		case "DashStyleEnum":
			enum := any(instance).(VLine).DashStyleEnum
			res = enum.ToCodeString()
		case "LayerGroup":
			if any(instance).(VLine).LayerGroup != nil {
				res = any(instance).(VLine).LayerGroup.Name
			}
		case "IsTransmitting":
			enum := any(instance).(VLine).IsTransmitting
			res = enum.ToCodeString()
		case "Message":
			res = any(instance).(VLine).Message
		case "IsTransmittingBackward":
			enum := any(instance).(VLine).IsTransmittingBackward
			res = enum.ToCodeString()
		case "MessageBackward":
			res = any(instance).(VLine).MessageBackward
		}
	case VisualTrack:
		switch fieldName {
		// string value of fields
		case "Lat":
			res = fmt.Sprintf("%f", any(instance).(VisualTrack).Lat)
		case "Lng":
			res = fmt.Sprintf("%f", any(instance).(VisualTrack).Lng)
		case "Heading":
			res = fmt.Sprintf("%f", any(instance).(VisualTrack).Heading)
		case "Level":
			res = fmt.Sprintf("%f", any(instance).(VisualTrack).Level)
		case "Speed":
			res = fmt.Sprintf("%f", any(instance).(VisualTrack).Speed)
		case "VerticalSpeed":
			res = fmt.Sprintf("%f", any(instance).(VisualTrack).VerticalSpeed)
		case "Name":
			res = any(instance).(VisualTrack).Name
		case "ColorEnum":
			enum := any(instance).(VisualTrack).ColorEnum
			res = enum.ToCodeString()
		case "LayerGroup":
			if any(instance).(VisualTrack).LayerGroup != nil {
				res = any(instance).(VisualTrack).LayerGroup.Name
			}
		case "DivIcon":
			if any(instance).(VisualTrack).DivIcon != nil {
				res = any(instance).(VisualTrack).DivIcon.Name
			}
		case "DisplayTrackHistory":
			res = fmt.Sprintf("%t", any(instance).(VisualTrack).DisplayTrackHistory)
		case "DisplayLevelAndSpeed":
			res = fmt.Sprintf("%t", any(instance).(VisualTrack).DisplayLevelAndSpeed)
		}
	}
	return
}

// Last line of the template
