// generated by ModelGongFileTemplate
package models

import "sort"

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	DivIcons           map[*DivIcon]struct{}
	DivIcons_mapString map[string]*DivIcon

	LayerGroups           map[*LayerGroup]struct{}
	LayerGroups_mapString map[string]*LayerGroup

	LayerGroupUses           map[*LayerGroupUse]struct{}
	LayerGroupUses_mapString map[string]*LayerGroupUse

	MapOptionss           map[*MapOptions]struct{}
	MapOptionss_mapString map[string]*MapOptions

	Markers           map[*Marker]struct{}
	Markers_mapString map[string]*Marker

	VisualCircles           map[*VisualCircle]struct{}
	VisualCircles_mapString map[string]*VisualCircle

	VisualLines           map[*VisualLine]struct{}
	VisualLines_mapString map[string]*VisualLine

	VisualTracks           map[*VisualTrack]struct{}
	VisualTracks_mapString map[string]*VisualTrack

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback OnInitCommitInterface
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitDivIcon(divicon *DivIcon)
	CheckoutDivIcon(divicon *DivIcon)
	CommitLayerGroup(layergroup *LayerGroup)
	CheckoutLayerGroup(layergroup *LayerGroup)
	CommitLayerGroupUse(layergroupuse *LayerGroupUse)
	CheckoutLayerGroupUse(layergroupuse *LayerGroupUse)
	CommitMapOptions(mapoptions *MapOptions)
	CheckoutMapOptions(mapoptions *MapOptions)
	CommitMarker(marker *Marker)
	CheckoutMarker(marker *Marker)
	CommitVisualCircle(visualcircle *VisualCircle)
	CheckoutVisualCircle(visualcircle *VisualCircle)
	CommitVisualLine(visualline *VisualLine)
	CheckoutVisualLine(visualline *VisualLine)
	CommitVisualTrack(visualtrack *VisualTrack)
	CheckoutVisualTrack(visualtrack *VisualTrack)
	GetLastCommitNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	DivIcons:           make(map[*DivIcon]struct{}),
	DivIcons_mapString: make(map[string]*DivIcon),

	LayerGroups:           make(map[*LayerGroup]struct{}),
	LayerGroups_mapString: make(map[string]*LayerGroup),

	LayerGroupUses:           make(map[*LayerGroupUse]struct{}),
	LayerGroupUses_mapString: make(map[string]*LayerGroupUse),

	MapOptionss:           make(map[*MapOptions]struct{}),
	MapOptionss_mapString: make(map[string]*MapOptions),

	Markers:           make(map[*Marker]struct{}),
	Markers_mapString: make(map[string]*Marker),

	VisualCircles:           make(map[*VisualCircle]struct{}),
	VisualCircles_mapString: make(map[string]*VisualCircle),

	VisualLines:           make(map[*VisualLine]struct{}),
	VisualLines_mapString: make(map[string]*VisualLine),

	VisualTracks:           make(map[*VisualTrack]struct{}),
	VisualTracks_mapString: make(map[string]*VisualTrack),

	// end of insertion point
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}
}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getDivIconOrderedStructWithNameField() []*DivIcon {
	// have alphabetical order generation
	diviconOrdered := []*DivIcon{}
	for divicon := range stage.DivIcons {
		diviconOrdered = append(diviconOrdered, divicon)
	}
	sort.Slice(diviconOrdered[:], func(i, j int) bool {
		return diviconOrdered[i].Name < diviconOrdered[j].Name
	})
	return diviconOrdered
}

// Stage puts divicon to the model stage
func (divicon *DivIcon) Stage() *DivIcon {
	Stage.DivIcons[divicon] = __member
	Stage.DivIcons_mapString[divicon.Name] = divicon

	return divicon
}

// Unstage removes divicon off the model stage
func (divicon *DivIcon) Unstage() *DivIcon {
	delete(Stage.DivIcons, divicon)
	delete(Stage.DivIcons_mapString, divicon.Name)
	return divicon
}

// commit divicon to the back repo (if it is already staged)
func (divicon *DivIcon) Commit() *DivIcon {
	if _, ok := Stage.DivIcons[divicon]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitDivIcon(divicon)
		}
	}
	return divicon
}

// Checkout divicon to the back repo (if it is already staged)
func (divicon *DivIcon) Checkout() *DivIcon {
	if _, ok := Stage.DivIcons[divicon]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutDivIcon(divicon)
		}
	}
	return divicon
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of divicon to the model stage
func (divicon *DivIcon) StageCopy() *DivIcon {
	_divicon := new(DivIcon)
	*_divicon = *divicon
	_divicon.Stage()
	return _divicon
}

// StageAndCommit appends divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) StageAndCommit() *DivIcon {
	divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
	return divicon
}

// DeleteStageAndCommit appends divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) DeleteStageAndCommit() *DivIcon {
	divicon.Unstage()
	DeleteORMDivIcon(divicon)
	return divicon
}

// StageCopyAndCommit appends a copy of divicon to the model stage and commit to the orm repo
func (divicon *DivIcon) StageCopyAndCommit() *DivIcon {
	_divicon := new(DivIcon)
	*_divicon = *divicon
	_divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
	return _divicon
}

// CreateORMDivIcon enables dynamic staging of a DivIcon instance
func CreateORMDivIcon(divicon *DivIcon) {
	divicon.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMDivIcon(divicon)
	}
}

// DeleteORMDivIcon enables dynamic staging of a DivIcon instance
func DeleteORMDivIcon(divicon *DivIcon) {
	divicon.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMDivIcon(divicon)
	}
}

func (stage *StageStruct) getLayerGroupOrderedStructWithNameField() []*LayerGroup {
	// have alphabetical order generation
	layergroupOrdered := []*LayerGroup{}
	for layergroup := range stage.LayerGroups {
		layergroupOrdered = append(layergroupOrdered, layergroup)
	}
	sort.Slice(layergroupOrdered[:], func(i, j int) bool {
		return layergroupOrdered[i].Name < layergroupOrdered[j].Name
	})
	return layergroupOrdered
}

// Stage puts layergroup to the model stage
func (layergroup *LayerGroup) Stage() *LayerGroup {
	Stage.LayerGroups[layergroup] = __member
	Stage.LayerGroups_mapString[layergroup.Name] = layergroup

	return layergroup
}

// Unstage removes layergroup off the model stage
func (layergroup *LayerGroup) Unstage() *LayerGroup {
	delete(Stage.LayerGroups, layergroup)
	delete(Stage.LayerGroups_mapString, layergroup.Name)
	return layergroup
}

// commit layergroup to the back repo (if it is already staged)
func (layergroup *LayerGroup) Commit() *LayerGroup {
	if _, ok := Stage.LayerGroups[layergroup]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLayerGroup(layergroup)
		}
	}
	return layergroup
}

// Checkout layergroup to the back repo (if it is already staged)
func (layergroup *LayerGroup) Checkout() *LayerGroup {
	if _, ok := Stage.LayerGroups[layergroup]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLayerGroup(layergroup)
		}
	}
	return layergroup
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of layergroup to the model stage
func (layergroup *LayerGroup) StageCopy() *LayerGroup {
	_layergroup := new(LayerGroup)
	*_layergroup = *layergroup
	_layergroup.Stage()
	return _layergroup
}

// StageAndCommit appends layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) StageAndCommit() *LayerGroup {
	layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
	return layergroup
}

// DeleteStageAndCommit appends layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) DeleteStageAndCommit() *LayerGroup {
	layergroup.Unstage()
	DeleteORMLayerGroup(layergroup)
	return layergroup
}

// StageCopyAndCommit appends a copy of layergroup to the model stage and commit to the orm repo
func (layergroup *LayerGroup) StageCopyAndCommit() *LayerGroup {
	_layergroup := new(LayerGroup)
	*_layergroup = *layergroup
	_layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
	return _layergroup
}

// CreateORMLayerGroup enables dynamic staging of a LayerGroup instance
func CreateORMLayerGroup(layergroup *LayerGroup) {
	layergroup.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroup(layergroup)
	}
}

// DeleteORMLayerGroup enables dynamic staging of a LayerGroup instance
func DeleteORMLayerGroup(layergroup *LayerGroup) {
	layergroup.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLayerGroup(layergroup)
	}
}

func (stage *StageStruct) getLayerGroupUseOrderedStructWithNameField() []*LayerGroupUse {
	// have alphabetical order generation
	layergroupuseOrdered := []*LayerGroupUse{}
	for layergroupuse := range stage.LayerGroupUses {
		layergroupuseOrdered = append(layergroupuseOrdered, layergroupuse)
	}
	sort.Slice(layergroupuseOrdered[:], func(i, j int) bool {
		return layergroupuseOrdered[i].Name < layergroupuseOrdered[j].Name
	})
	return layergroupuseOrdered
}

// Stage puts layergroupuse to the model stage
func (layergroupuse *LayerGroupUse) Stage() *LayerGroupUse {
	Stage.LayerGroupUses[layergroupuse] = __member
	Stage.LayerGroupUses_mapString[layergroupuse.Name] = layergroupuse

	return layergroupuse
}

// Unstage removes layergroupuse off the model stage
func (layergroupuse *LayerGroupUse) Unstage() *LayerGroupUse {
	delete(Stage.LayerGroupUses, layergroupuse)
	delete(Stage.LayerGroupUses_mapString, layergroupuse.Name)
	return layergroupuse
}

// commit layergroupuse to the back repo (if it is already staged)
func (layergroupuse *LayerGroupUse) Commit() *LayerGroupUse {
	if _, ok := Stage.LayerGroupUses[layergroupuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitLayerGroupUse(layergroupuse)
		}
	}
	return layergroupuse
}

// Checkout layergroupuse to the back repo (if it is already staged)
func (layergroupuse *LayerGroupUse) Checkout() *LayerGroupUse {
	if _, ok := Stage.LayerGroupUses[layergroupuse]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutLayerGroupUse(layergroupuse)
		}
	}
	return layergroupuse
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of layergroupuse to the model stage
func (layergroupuse *LayerGroupUse) StageCopy() *LayerGroupUse {
	_layergroupuse := new(LayerGroupUse)
	*_layergroupuse = *layergroupuse
	_layergroupuse.Stage()
	return _layergroupuse
}

// StageAndCommit appends layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) StageAndCommit() *LayerGroupUse {
	layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
	return layergroupuse
}

// DeleteStageAndCommit appends layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) DeleteStageAndCommit() *LayerGroupUse {
	layergroupuse.Unstage()
	DeleteORMLayerGroupUse(layergroupuse)
	return layergroupuse
}

// StageCopyAndCommit appends a copy of layergroupuse to the model stage and commit to the orm repo
func (layergroupuse *LayerGroupUse) StageCopyAndCommit() *LayerGroupUse {
	_layergroupuse := new(LayerGroupUse)
	*_layergroupuse = *layergroupuse
	_layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
	return _layergroupuse
}

// CreateORMLayerGroupUse enables dynamic staging of a LayerGroupUse instance
func CreateORMLayerGroupUse(layergroupuse *LayerGroupUse) {
	layergroupuse.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMLayerGroupUse(layergroupuse)
	}
}

// DeleteORMLayerGroupUse enables dynamic staging of a LayerGroupUse instance
func DeleteORMLayerGroupUse(layergroupuse *LayerGroupUse) {
	layergroupuse.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMLayerGroupUse(layergroupuse)
	}
}

func (stage *StageStruct) getMapOptionsOrderedStructWithNameField() []*MapOptions {
	// have alphabetical order generation
	mapoptionsOrdered := []*MapOptions{}
	for mapoptions := range stage.MapOptionss {
		mapoptionsOrdered = append(mapoptionsOrdered, mapoptions)
	}
	sort.Slice(mapoptionsOrdered[:], func(i, j int) bool {
		return mapoptionsOrdered[i].Name < mapoptionsOrdered[j].Name
	})
	return mapoptionsOrdered
}

// Stage puts mapoptions to the model stage
func (mapoptions *MapOptions) Stage() *MapOptions {
	Stage.MapOptionss[mapoptions] = __member
	Stage.MapOptionss_mapString[mapoptions.Name] = mapoptions

	return mapoptions
}

// Unstage removes mapoptions off the model stage
func (mapoptions *MapOptions) Unstage() *MapOptions {
	delete(Stage.MapOptionss, mapoptions)
	delete(Stage.MapOptionss_mapString, mapoptions.Name)
	return mapoptions
}

// commit mapoptions to the back repo (if it is already staged)
func (mapoptions *MapOptions) Commit() *MapOptions {
	if _, ok := Stage.MapOptionss[mapoptions]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMapOptions(mapoptions)
		}
	}
	return mapoptions
}

// Checkout mapoptions to the back repo (if it is already staged)
func (mapoptions *MapOptions) Checkout() *MapOptions {
	if _, ok := Stage.MapOptionss[mapoptions]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMapOptions(mapoptions)
		}
	}
	return mapoptions
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of mapoptions to the model stage
func (mapoptions *MapOptions) StageCopy() *MapOptions {
	_mapoptions := new(MapOptions)
	*_mapoptions = *mapoptions
	_mapoptions.Stage()
	return _mapoptions
}

// StageAndCommit appends mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) StageAndCommit() *MapOptions {
	mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
	return mapoptions
}

// DeleteStageAndCommit appends mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) DeleteStageAndCommit() *MapOptions {
	mapoptions.Unstage()
	DeleteORMMapOptions(mapoptions)
	return mapoptions
}

// StageCopyAndCommit appends a copy of mapoptions to the model stage and commit to the orm repo
func (mapoptions *MapOptions) StageCopyAndCommit() *MapOptions {
	_mapoptions := new(MapOptions)
	*_mapoptions = *mapoptions
	_mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
	return _mapoptions
}

// CreateORMMapOptions enables dynamic staging of a MapOptions instance
func CreateORMMapOptions(mapoptions *MapOptions) {
	mapoptions.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMapOptions(mapoptions)
	}
}

// DeleteORMMapOptions enables dynamic staging of a MapOptions instance
func DeleteORMMapOptions(mapoptions *MapOptions) {
	mapoptions.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMapOptions(mapoptions)
	}
}

func (stage *StageStruct) getMarkerOrderedStructWithNameField() []*Marker {
	// have alphabetical order generation
	markerOrdered := []*Marker{}
	for marker := range stage.Markers {
		markerOrdered = append(markerOrdered, marker)
	}
	sort.Slice(markerOrdered[:], func(i, j int) bool {
		return markerOrdered[i].Name < markerOrdered[j].Name
	})
	return markerOrdered
}

// Stage puts marker to the model stage
func (marker *Marker) Stage() *Marker {
	Stage.Markers[marker] = __member
	Stage.Markers_mapString[marker.Name] = marker

	return marker
}

// Unstage removes marker off the model stage
func (marker *Marker) Unstage() *Marker {
	delete(Stage.Markers, marker)
	delete(Stage.Markers_mapString, marker.Name)
	return marker
}

// commit marker to the back repo (if it is already staged)
func (marker *Marker) Commit() *Marker {
	if _, ok := Stage.Markers[marker]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMarker(marker)
		}
	}
	return marker
}

// Checkout marker to the back repo (if it is already staged)
func (marker *Marker) Checkout() *Marker {
	if _, ok := Stage.Markers[marker]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMarker(marker)
		}
	}
	return marker
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of marker to the model stage
func (marker *Marker) StageCopy() *Marker {
	_marker := new(Marker)
	*_marker = *marker
	_marker.Stage()
	return _marker
}

// StageAndCommit appends marker to the model stage and commit to the orm repo
func (marker *Marker) StageAndCommit() *Marker {
	marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
	return marker
}

// DeleteStageAndCommit appends marker to the model stage and commit to the orm repo
func (marker *Marker) DeleteStageAndCommit() *Marker {
	marker.Unstage()
	DeleteORMMarker(marker)
	return marker
}

// StageCopyAndCommit appends a copy of marker to the model stage and commit to the orm repo
func (marker *Marker) StageCopyAndCommit() *Marker {
	_marker := new(Marker)
	*_marker = *marker
	_marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
	return _marker
}

// CreateORMMarker enables dynamic staging of a Marker instance
func CreateORMMarker(marker *Marker) {
	marker.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarker(marker)
	}
}

// DeleteORMMarker enables dynamic staging of a Marker instance
func DeleteORMMarker(marker *Marker) {
	marker.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMarker(marker)
	}
}

func (stage *StageStruct) getVisualCircleOrderedStructWithNameField() []*VisualCircle {
	// have alphabetical order generation
	visualcircleOrdered := []*VisualCircle{}
	for visualcircle := range stage.VisualCircles {
		visualcircleOrdered = append(visualcircleOrdered, visualcircle)
	}
	sort.Slice(visualcircleOrdered[:], func(i, j int) bool {
		return visualcircleOrdered[i].Name < visualcircleOrdered[j].Name
	})
	return visualcircleOrdered
}

// Stage puts visualcircle to the model stage
func (visualcircle *VisualCircle) Stage() *VisualCircle {
	Stage.VisualCircles[visualcircle] = __member
	Stage.VisualCircles_mapString[visualcircle.Name] = visualcircle

	return visualcircle
}

// Unstage removes visualcircle off the model stage
func (visualcircle *VisualCircle) Unstage() *VisualCircle {
	delete(Stage.VisualCircles, visualcircle)
	delete(Stage.VisualCircles_mapString, visualcircle.Name)
	return visualcircle
}

// commit visualcircle to the back repo (if it is already staged)
func (visualcircle *VisualCircle) Commit() *VisualCircle {
	if _, ok := Stage.VisualCircles[visualcircle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVisualCircle(visualcircle)
		}
	}
	return visualcircle
}

// Checkout visualcircle to the back repo (if it is already staged)
func (visualcircle *VisualCircle) Checkout() *VisualCircle {
	if _, ok := Stage.VisualCircles[visualcircle]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVisualCircle(visualcircle)
		}
	}
	return visualcircle
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of visualcircle to the model stage
func (visualcircle *VisualCircle) StageCopy() *VisualCircle {
	_visualcircle := new(VisualCircle)
	*_visualcircle = *visualcircle
	_visualcircle.Stage()
	return _visualcircle
}

// StageAndCommit appends visualcircle to the model stage and commit to the orm repo
func (visualcircle *VisualCircle) StageAndCommit() *VisualCircle {
	visualcircle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualCircle(visualcircle)
	}
	return visualcircle
}

// DeleteStageAndCommit appends visualcircle to the model stage and commit to the orm repo
func (visualcircle *VisualCircle) DeleteStageAndCommit() *VisualCircle {
	visualcircle.Unstage()
	DeleteORMVisualCircle(visualcircle)
	return visualcircle
}

// StageCopyAndCommit appends a copy of visualcircle to the model stage and commit to the orm repo
func (visualcircle *VisualCircle) StageCopyAndCommit() *VisualCircle {
	_visualcircle := new(VisualCircle)
	*_visualcircle = *visualcircle
	_visualcircle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualCircle(visualcircle)
	}
	return _visualcircle
}

// CreateORMVisualCircle enables dynamic staging of a VisualCircle instance
func CreateORMVisualCircle(visualcircle *VisualCircle) {
	visualcircle.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualCircle(visualcircle)
	}
}

// DeleteORMVisualCircle enables dynamic staging of a VisualCircle instance
func DeleteORMVisualCircle(visualcircle *VisualCircle) {
	visualcircle.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVisualCircle(visualcircle)
	}
}

func (stage *StageStruct) getVisualLineOrderedStructWithNameField() []*VisualLine {
	// have alphabetical order generation
	visuallineOrdered := []*VisualLine{}
	for visualline := range stage.VisualLines {
		visuallineOrdered = append(visuallineOrdered, visualline)
	}
	sort.Slice(visuallineOrdered[:], func(i, j int) bool {
		return visuallineOrdered[i].Name < visuallineOrdered[j].Name
	})
	return visuallineOrdered
}

// Stage puts visualline to the model stage
func (visualline *VisualLine) Stage() *VisualLine {
	Stage.VisualLines[visualline] = __member
	Stage.VisualLines_mapString[visualline.Name] = visualline

	return visualline
}

// Unstage removes visualline off the model stage
func (visualline *VisualLine) Unstage() *VisualLine {
	delete(Stage.VisualLines, visualline)
	delete(Stage.VisualLines_mapString, visualline.Name)
	return visualline
}

// commit visualline to the back repo (if it is already staged)
func (visualline *VisualLine) Commit() *VisualLine {
	if _, ok := Stage.VisualLines[visualline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVisualLine(visualline)
		}
	}
	return visualline
}

// Checkout visualline to the back repo (if it is already staged)
func (visualline *VisualLine) Checkout() *VisualLine {
	if _, ok := Stage.VisualLines[visualline]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVisualLine(visualline)
		}
	}
	return visualline
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of visualline to the model stage
func (visualline *VisualLine) StageCopy() *VisualLine {
	_visualline := new(VisualLine)
	*_visualline = *visualline
	_visualline.Stage()
	return _visualline
}

// StageAndCommit appends visualline to the model stage and commit to the orm repo
func (visualline *VisualLine) StageAndCommit() *VisualLine {
	visualline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualLine(visualline)
	}
	return visualline
}

// DeleteStageAndCommit appends visualline to the model stage and commit to the orm repo
func (visualline *VisualLine) DeleteStageAndCommit() *VisualLine {
	visualline.Unstage()
	DeleteORMVisualLine(visualline)
	return visualline
}

// StageCopyAndCommit appends a copy of visualline to the model stage and commit to the orm repo
func (visualline *VisualLine) StageCopyAndCommit() *VisualLine {
	_visualline := new(VisualLine)
	*_visualline = *visualline
	_visualline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualLine(visualline)
	}
	return _visualline
}

// CreateORMVisualLine enables dynamic staging of a VisualLine instance
func CreateORMVisualLine(visualline *VisualLine) {
	visualline.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualLine(visualline)
	}
}

// DeleteORMVisualLine enables dynamic staging of a VisualLine instance
func DeleteORMVisualLine(visualline *VisualLine) {
	visualline.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVisualLine(visualline)
	}
}

func (stage *StageStruct) getVisualTrackOrderedStructWithNameField() []*VisualTrack {
	// have alphabetical order generation
	visualtrackOrdered := []*VisualTrack{}
	for visualtrack := range stage.VisualTracks {
		visualtrackOrdered = append(visualtrackOrdered, visualtrack)
	}
	sort.Slice(visualtrackOrdered[:], func(i, j int) bool {
		return visualtrackOrdered[i].Name < visualtrackOrdered[j].Name
	})
	return visualtrackOrdered
}

// Stage puts visualtrack to the model stage
func (visualtrack *VisualTrack) Stage() *VisualTrack {
	Stage.VisualTracks[visualtrack] = __member
	Stage.VisualTracks_mapString[visualtrack.Name] = visualtrack

	return visualtrack
}

// Unstage removes visualtrack off the model stage
func (visualtrack *VisualTrack) Unstage() *VisualTrack {
	delete(Stage.VisualTracks, visualtrack)
	delete(Stage.VisualTracks_mapString, visualtrack.Name)
	return visualtrack
}

// commit visualtrack to the back repo (if it is already staged)
func (visualtrack *VisualTrack) Commit() *VisualTrack {
	if _, ok := Stage.VisualTracks[visualtrack]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitVisualTrack(visualtrack)
		}
	}
	return visualtrack
}

// Checkout visualtrack to the back repo (if it is already staged)
func (visualtrack *VisualTrack) Checkout() *VisualTrack {
	if _, ok := Stage.VisualTracks[visualtrack]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutVisualTrack(visualtrack)
		}
	}
	return visualtrack
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of visualtrack to the model stage
func (visualtrack *VisualTrack) StageCopy() *VisualTrack {
	_visualtrack := new(VisualTrack)
	*_visualtrack = *visualtrack
	_visualtrack.Stage()
	return _visualtrack
}

// StageAndCommit appends visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) StageAndCommit() *VisualTrack {
	visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
	return visualtrack
}

// DeleteStageAndCommit appends visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) DeleteStageAndCommit() *VisualTrack {
	visualtrack.Unstage()
	DeleteORMVisualTrack(visualtrack)
	return visualtrack
}

// StageCopyAndCommit appends a copy of visualtrack to the model stage and commit to the orm repo
func (visualtrack *VisualTrack) StageCopyAndCommit() *VisualTrack {
	_visualtrack := new(VisualTrack)
	*_visualtrack = *visualtrack
	_visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
	return _visualtrack
}

// CreateORMVisualTrack enables dynamic staging of a VisualTrack instance
func CreateORMVisualTrack(visualtrack *VisualTrack) {
	visualtrack.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMVisualTrack(visualtrack)
	}
}

// DeleteORMVisualTrack enables dynamic staging of a VisualTrack instance
func DeleteORMVisualTrack(visualtrack *VisualTrack) {
	visualtrack.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMVisualTrack(visualtrack)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMDivIcon(DivIcon *DivIcon)
	CreateORMLayerGroup(LayerGroup *LayerGroup)
	CreateORMLayerGroupUse(LayerGroupUse *LayerGroupUse)
	CreateORMMapOptions(MapOptions *MapOptions)
	CreateORMMarker(Marker *Marker)
	CreateORMVisualCircle(VisualCircle *VisualCircle)
	CreateORMVisualLine(VisualLine *VisualLine)
	CreateORMVisualTrack(VisualTrack *VisualTrack)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMDivIcon(DivIcon *DivIcon)
	DeleteORMLayerGroup(LayerGroup *LayerGroup)
	DeleteORMLayerGroupUse(LayerGroupUse *LayerGroupUse)
	DeleteORMMapOptions(MapOptions *MapOptions)
	DeleteORMMarker(Marker *Marker)
	DeleteORMVisualCircle(VisualCircle *VisualCircle)
	DeleteORMVisualLine(VisualLine *VisualLine)
	DeleteORMVisualTrack(VisualTrack *VisualTrack)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.DivIcons = make(map[*DivIcon]struct{})
	stage.DivIcons_mapString = make(map[string]*DivIcon)

	stage.LayerGroups = make(map[*LayerGroup]struct{})
	stage.LayerGroups_mapString = make(map[string]*LayerGroup)

	stage.LayerGroupUses = make(map[*LayerGroupUse]struct{})
	stage.LayerGroupUses_mapString = make(map[string]*LayerGroupUse)

	stage.MapOptionss = make(map[*MapOptions]struct{})
	stage.MapOptionss_mapString = make(map[string]*MapOptions)

	stage.Markers = make(map[*Marker]struct{})
	stage.Markers_mapString = make(map[string]*Marker)

	stage.VisualCircles = make(map[*VisualCircle]struct{})
	stage.VisualCircles_mapString = make(map[string]*VisualCircle)

	stage.VisualLines = make(map[*VisualLine]struct{})
	stage.VisualLines_mapString = make(map[string]*VisualLine)

	stage.VisualTracks = make(map[*VisualTrack]struct{})
	stage.VisualTracks_mapString = make(map[string]*VisualTrack)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.DivIcons = nil
	stage.DivIcons_mapString = nil

	stage.LayerGroups = nil
	stage.LayerGroups_mapString = nil

	stage.LayerGroupUses = nil
	stage.LayerGroupUses_mapString = nil

	stage.MapOptionss = nil
	stage.MapOptionss_mapString = nil

	stage.Markers = nil
	stage.Markers_mapString = nil

	stage.VisualCircles = nil
	stage.VisualCircles_mapString = nil

	stage.VisualLines = nil
	stage.VisualLines_mapString = nil

	stage.VisualTracks = nil
	stage.VisualTracks_mapString = nil

}
