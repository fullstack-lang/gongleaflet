// generated by ModelGongEnumFileTemplate
package models

// insertion point of enum utility functions
// Utility function for ColorEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (colorenum ColorEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch colorenum {
	// insertion code per enum code
	case LIGHT_BROWN_8D6E63:
		res = "LIGHT_BROWN_8D6E63"
	case RED:
		res = "RED"
	case GREY:
		res = "GREY"
	case GREEN:
		res = "GREEN"
	case BLUE:
		res = "BLUE"
	case NONE:
		res = "NONE"
	}
	return
}

func (colorenum *ColorEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "LIGHT_BROWN_8D6E63":
		*colorenum = LIGHT_BROWN_8D6E63
	case "RED":
		*colorenum = RED
	case "GREY":
		*colorenum = GREY
	case "GREEN":
		*colorenum = GREEN
	case "BLUE":
		*colorenum = BLUE
	case "NONE":
		*colorenum = NONE
	default:
		return errUnkownEnum
	}
	return
}

func (colorenum *ColorEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "LIGHT_BROWN_8D6E63":
		*colorenum = LIGHT_BROWN_8D6E63
	case "RED":
		*colorenum = RED
	case "GREY":
		*colorenum = GREY
	case "GREEN":
		*colorenum = GREEN
	case "BLUE":
		*colorenum = BLUE
	case "NONE":
		*colorenum = NONE
	default:
		return errUnkownEnum
	}
	return
}

func (colorenum *ColorEnum) ToCodeString() (res string) {

	switch *colorenum {
	// insertion code per enum code
	case LIGHT_BROWN_8D6E63:
		res = "LIGHT_BROWN_8D6E63"
	case RED:
		res = "RED"
	case GREY:
		res = "GREY"
	case GREEN:
		res = "GREEN"
	case BLUE:
		res = "BLUE"
	case NONE:
		res = "NONE"
	}
	return
}

// Utility function for DashStyleEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (dashstyleenum DashStyleEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch dashstyleenum {
	// insertion code per enum code
	case FIVE_TEN:
		res = "FIVE_TEN"
	case FIVE_TWENTY:
		res = "FIVE_TWENTY"
	}
	return
}

func (dashstyleenum *DashStyleEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "FIVE_TEN":
		*dashstyleenum = FIVE_TEN
	case "FIVE_TWENTY":
		*dashstyleenum = FIVE_TWENTY
	default:
		return errUnkownEnum
	}
	return
}

func (dashstyleenum *DashStyleEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "FIVE_TEN":
		*dashstyleenum = FIVE_TEN
	case "FIVE_TWENTY":
		*dashstyleenum = FIVE_TWENTY
	default:
		return errUnkownEnum
	}
	return
}

func (dashstyleenum *DashStyleEnum) ToCodeString() (res string) {

	switch *dashstyleenum {
	// insertion code per enum code
	case FIVE_TEN:
		res = "FIVE_TEN"
	case FIVE_TWENTY:
		res = "FIVE_TWENTY"
	}
	return
}

// Utility function for GONG__ExpressionType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (gong__expressiontype GONG__ExpressionType) ToString() (res string) {

	// migration of former implementation of enum
	switch gong__expressiontype {
	// insertion code per enum code
	case GONG__STRUCT_INSTANCE:
		res = "STRUCT_INSTANCE"
	case GONG__FIELD_OR_CONST_VALUE:
		res = "FIELD_OR_CONST_VALUE"
	case GONG__FIELD_VALUE:
		res = "FIELD_VALUE"
	case GONG__ENUM_CAST_INT:
		res = "ENUM_CAST_INT"
	case GONG__ENUM_CAST_STRING:
		res = "ENUM_CAST_STRING"
	case GONG__IDENTIFIER_CONST:
		res = "IDENTIFIER_CONST"
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "STRUCT_INSTANCE":
		*gong__expressiontype = GONG__STRUCT_INSTANCE
	case "FIELD_OR_CONST_VALUE":
		*gong__expressiontype = GONG__FIELD_OR_CONST_VALUE
	case "FIELD_VALUE":
		*gong__expressiontype = GONG__FIELD_VALUE
	case "ENUM_CAST_INT":
		*gong__expressiontype = GONG__ENUM_CAST_INT
	case "ENUM_CAST_STRING":
		*gong__expressiontype = GONG__ENUM_CAST_STRING
	case "IDENTIFIER_CONST":
		*gong__expressiontype = GONG__IDENTIFIER_CONST
	default:
		return errUnkownEnum
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "GONG__STRUCT_INSTANCE":
		*gong__expressiontype = GONG__STRUCT_INSTANCE
	case "GONG__FIELD_OR_CONST_VALUE":
		*gong__expressiontype = GONG__FIELD_OR_CONST_VALUE
	case "GONG__FIELD_VALUE":
		*gong__expressiontype = GONG__FIELD_VALUE
	case "GONG__ENUM_CAST_INT":
		*gong__expressiontype = GONG__ENUM_CAST_INT
	case "GONG__ENUM_CAST_STRING":
		*gong__expressiontype = GONG__ENUM_CAST_STRING
	case "GONG__IDENTIFIER_CONST":
		*gong__expressiontype = GONG__IDENTIFIER_CONST
	default:
		return errUnkownEnum
	}
	return
}

func (gong__expressiontype *GONG__ExpressionType) ToCodeString() (res string) {

	switch *gong__expressiontype {
	// insertion code per enum code
	case GONG__STRUCT_INSTANCE:
		res = "GONG__STRUCT_INSTANCE"
	case GONG__FIELD_OR_CONST_VALUE:
		res = "GONG__FIELD_OR_CONST_VALUE"
	case GONG__FIELD_VALUE:
		res = "GONG__FIELD_VALUE"
	case GONG__ENUM_CAST_INT:
		res = "GONG__ENUM_CAST_INT"
	case GONG__ENUM_CAST_STRING:
		res = "GONG__ENUM_CAST_STRING"
	case GONG__IDENTIFIER_CONST:
		res = "GONG__IDENTIFIER_CONST"
	}
	return
}

// Utility function for Start_To_End_Enum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (start_to_end_enum Start_To_End_Enum) ToString() (res string) {

	// migration of former implementation of enum
	switch start_to_end_enum {
	// insertion code per enum code
	case FORWARD_START_TO_END:
		res = "FORWARD_START_TO_END"
	case BACKWARD_END_TO_START:
		res = "BACKWARD_START_TO_END"
	}
	return
}

func (start_to_end_enum *Start_To_End_Enum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "FORWARD_START_TO_END":
		*start_to_end_enum = FORWARD_START_TO_END
	case "BACKWARD_START_TO_END":
		*start_to_end_enum = BACKWARD_END_TO_START
	default:
		return errUnkownEnum
	}
	return
}

func (start_to_end_enum *Start_To_End_Enum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "FORWARD_START_TO_END":
		*start_to_end_enum = FORWARD_START_TO_END
	case "BACKWARD_END_TO_START":
		*start_to_end_enum = BACKWARD_END_TO_START
	default:
		return errUnkownEnum
	}
	return
}

func (start_to_end_enum *Start_To_End_Enum) ToCodeString() (res string) {

	switch *start_to_end_enum {
	// insertion code per enum code
	case FORWARD_START_TO_END:
		res = "FORWARD_START_TO_END"
	case BACKWARD_END_TO_START:
		res = "BACKWARD_END_TO_START"
	}
	return
}

// Utility function for TransmittingEnum
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (transmittingenum TransmittingEnum) ToString() (res string) {

	// migration of former implementation of enum
	switch transmittingenum {
	// insertion code per enum code
	case IS_TRANSMITTING:
		res = "IS_TRANSMITTING"
	case IS_NOT_TRANSMITTING:
		res = "IS_NOT_TRANSMITTING"
	}
	return
}

func (transmittingenum *TransmittingEnum) FromString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "IS_TRANSMITTING":
		*transmittingenum = IS_TRANSMITTING
	case "IS_NOT_TRANSMITTING":
		*transmittingenum = IS_NOT_TRANSMITTING
	default:
		return errUnkownEnum
	}
	return
}

func (transmittingenum *TransmittingEnum) FromCodeString(input string) (err error) {

	switch input {
	// insertion code per enum code
	case "IS_TRANSMITTING":
		*transmittingenum = IS_TRANSMITTING
	case "IS_NOT_TRANSMITTING":
		*transmittingenum = IS_NOT_TRANSMITTING
	default:
		return errUnkownEnum
	}
	return
}

func (transmittingenum *TransmittingEnum) ToCodeString() (res string) {

	switch *transmittingenum {
	// insertion code per enum code
	case IS_TRANSMITTING:
		res = "IS_TRANSMITTING"
	case IS_NOT_TRANSMITTING:
		res = "IS_NOT_TRANSMITTING"
	}
	return
}

// Last line of the template
