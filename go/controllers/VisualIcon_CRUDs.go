// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VisualIcon__dummysDeclaration__ models.VisualIcon
var __VisualIcon_time__dummyDeclaration time.Duration

// An VisualIconID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualIcon updateVisualIcon deleteVisualIcon
type VisualIconID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualIconInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualIcon updateVisualIcon
type VisualIconInput struct {
	// The VisualIcon to submit or modify
	// in: body
	VisualIcon *orm.VisualIconAPI
}

// GetVisualIcons
//
// swagger:route GET /visualicons visualicons getVisualIcons
//
// Get all visualicons
//
// Responses:
//    default: genericError
//        200: visualiconDBsResponse
func GetVisualIcons(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualIcon.GetDB()

	// source slice
	var visualiconDBs []orm.VisualIconDB
	query := db.Find(&visualiconDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	visualiconAPIs := make([]orm.VisualIconAPI, 0)

	// for each visualicon, update fields from the database nullable fields
	for idx := range visualiconDBs {
		visualiconDB := &visualiconDBs[idx]
		_ = visualiconDB
		var visualiconAPI orm.VisualIconAPI

		// insertion point for updating fields
		visualiconAPI.ID = visualiconDB.ID
		visualiconDB.CopyBasicFieldsToVisualIcon(&visualiconAPI.VisualIcon)
		visualiconAPI.VisualIconPointersEnconding = visualiconDB.VisualIconPointersEnconding
		visualiconAPIs = append(visualiconAPIs, visualiconAPI)
	}

	c.JSON(http.StatusOK, visualiconAPIs)
}

// PostVisualIcon
//
// swagger:route POST /visualicons visualicons postVisualIcon
//
// Creates a visualicon
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualiconDBResponse
func PostVisualIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualIcon.GetDB()

	// Validate input
	var input orm.VisualIconAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualicon
	visualiconDB := orm.VisualIconDB{}
	visualiconDB.VisualIconPointersEnconding = input.VisualIconPointersEnconding
	visualiconDB.CopyBasicFieldsFromVisualIcon(&input.VisualIcon)

	query := db.Create(&visualiconDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, visualiconDB)
}

// GetVisualIcon
//
// swagger:route GET /visualicons/{ID} visualicons getVisualIcon
//
// Gets the details for a visualicon.
//
// Responses:
//    default: genericError
//        200: visualiconDBResponse
func GetVisualIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualIcon.GetDB()

	// Get visualiconDB in DB
	var visualiconDB orm.VisualIconDB
	if err := db.First(&visualiconDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var visualiconAPI orm.VisualIconAPI
	visualiconAPI.ID = visualiconDB.ID
	visualiconAPI.VisualIconPointersEnconding = visualiconDB.VisualIconPointersEnconding
	visualiconDB.CopyBasicFieldsToVisualIcon(&visualiconAPI.VisualIcon)

	c.JSON(http.StatusOK, visualiconAPI)
}

// UpdateVisualIcon
//
// swagger:route PATCH /visualicons/{ID} visualicons updateVisualIcon
//
// Update a visualicon
//
// Responses:
//    default: genericError
//        200: visualiconDBResponse
func UpdateVisualIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualIcon.GetDB()

	// Get model if exist
	var visualiconDB orm.VisualIconDB

	// fetch the visualicon
	query := db.First(&visualiconDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualIconAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	visualiconDB.CopyBasicFieldsFromVisualIcon(&input.VisualIcon)
	visualiconDB.VisualIconPointersEnconding = input.VisualIconPointersEnconding

	query = db.Model(&visualiconDB).Updates(visualiconDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the visualiconDB
	c.JSON(http.StatusOK, visualiconDB)
}

// DeleteVisualIcon
//
// swagger:route DELETE /visualicons/{ID} visualicons deleteVisualIcon
//
// Delete a visualicon
//
// Responses:
//    default: genericError
func DeleteVisualIcon(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualIcon.GetDB()

	// Get model if exist
	var visualiconDB orm.VisualIconDB
	if err := db.First(&visualiconDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualiconDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
