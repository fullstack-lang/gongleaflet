// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __VisualTrack__dummysDeclaration__ models.VisualTrack
var __VisualTrack_time__dummyDeclaration time.Duration

// An VisualTrackID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualTrack updateVisualTrack deleteVisualTrack
type VisualTrackID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualTrackInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualTrack updateVisualTrack
type VisualTrackInput struct {
	// The VisualTrack to submit or modify
	// in: body
	VisualTrack *orm.VisualTrackAPI
}

// GetVisualTracks
//
// swagger:route GET /visualtracks visualtracks getVisualTracks
//
// Get all visualtracks
//
// Responses:
//    default: genericError
//        200: visualtrackDBsResponse
func GetVisualTracks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var visualtracks []orm.VisualTrackDB
	query := db.Find(&visualtracks)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each visualtrack, update fields from the database nullable fields
	for idx := range visualtracks {
		visualtrack := &visualtracks[idx]
		_ = visualtrack
		// insertion point for updating fields
		if visualtrack.Lat_Data.Valid {
			visualtrack.Lat = visualtrack.Lat_Data.Float64
		}

		if visualtrack.Lng_Data.Valid {
			visualtrack.Lng = visualtrack.Lng_Data.Float64
		}

		if visualtrack.Heading_Data.Valid {
			visualtrack.Heading = visualtrack.Heading_Data.Float64
		}

		if visualtrack.Level_Data.Valid {
			visualtrack.Level = visualtrack.Level_Data.Float64
		}

		if visualtrack.Speed_Data.Valid {
			visualtrack.Speed = visualtrack.Speed_Data.Float64
		}

		if visualtrack.VerticalSpeed_Data.Valid {
			visualtrack.VerticalSpeed = visualtrack.VerticalSpeed_Data.Float64
		}

		if visualtrack.Name_Data.Valid {
			visualtrack.Name = visualtrack.Name_Data.String
		}

		if visualtrack.VisualColorEnum_Data.Valid {
			visualtrack.VisualColorEnum = models.VisualColorEnum(visualtrack.VisualColorEnum_Data.String)
		}

		visualtrack.Display = visualtrack.Display_Data.Bool

		visualtrack.DisplayTrackHistory = visualtrack.DisplayTrackHistory_Data.Bool

		visualtrack.DisplayLevelAndSpeed = visualtrack.DisplayLevelAndSpeed_Data.Bool

	}

	c.JSON(http.StatusOK, visualtracks)
}

// PostVisualTrack
//
// swagger:route POST /visualtracks visualtracks postVisualTrack
//
// Creates a visualtrack
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualtrackDBResponse
func PostVisualTrack(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.VisualTrackAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualtrack
	visualtrackDB := orm.VisualTrackDB{}
	visualtrackDB.VisualTrackAPI = input
	// insertion point for nullable field set
	visualtrackDB.Lat_Data.Float64 = input.Lat
	visualtrackDB.Lat_Data.Valid = true

	visualtrackDB.Lng_Data.Float64 = input.Lng
	visualtrackDB.Lng_Data.Valid = true

	visualtrackDB.Heading_Data.Float64 = input.Heading
	visualtrackDB.Heading_Data.Valid = true

	visualtrackDB.Level_Data.Float64 = input.Level
	visualtrackDB.Level_Data.Valid = true

	visualtrackDB.Speed_Data.Float64 = input.Speed
	visualtrackDB.Speed_Data.Valid = true

	visualtrackDB.VerticalSpeed_Data.Float64 = input.VerticalSpeed
	visualtrackDB.VerticalSpeed_Data.Valid = true

	visualtrackDB.Name_Data.String = input.Name
	visualtrackDB.Name_Data.Valid = true

	visualtrackDB.VisualColorEnum_Data.String = string(input.VisualColorEnum)
	visualtrackDB.VisualColorEnum_Data.Valid = true

	visualtrackDB.Display_Data.Bool = input.Display
	visualtrackDB.Display_Data.Valid = true

	visualtrackDB.DisplayTrackHistory_Data.Bool = input.DisplayTrackHistory
	visualtrackDB.DisplayTrackHistory_Data.Valid = true

	visualtrackDB.DisplayLevelAndSpeed_Data.Bool = input.DisplayLevelAndSpeed
	visualtrackDB.DisplayLevelAndSpeed_Data.Valid = true

	query := db.Create(&visualtrackDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, visualtrackDB)
}

// GetVisualTrack
//
// swagger:route GET /visualtracks/{ID} visualtracks getVisualTrack
//
// Gets the details for a visualtrack.
//
// Responses:
//    default: genericError
//        200: visualtrackDBResponse
func GetVisualTrack(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get visualtrack in DB
	var visualtrack orm.VisualTrackDB
	if err := db.First(&visualtrack, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if visualtrack.Lat_Data.Valid {
		visualtrack.Lat = visualtrack.Lat_Data.Float64
	}

	if visualtrack.Lng_Data.Valid {
		visualtrack.Lng = visualtrack.Lng_Data.Float64
	}

	if visualtrack.Heading_Data.Valid {
		visualtrack.Heading = visualtrack.Heading_Data.Float64
	}

	if visualtrack.Level_Data.Valid {
		visualtrack.Level = visualtrack.Level_Data.Float64
	}

	if visualtrack.Speed_Data.Valid {
		visualtrack.Speed = visualtrack.Speed_Data.Float64
	}

	if visualtrack.VerticalSpeed_Data.Valid {
		visualtrack.VerticalSpeed = visualtrack.VerticalSpeed_Data.Float64
	}

	if visualtrack.Name_Data.Valid {
		visualtrack.Name = visualtrack.Name_Data.String
	}

	if visualtrack.VisualColorEnum_Data.Valid {
		visualtrack.VisualColorEnum = models.VisualColorEnum(visualtrack.VisualColorEnum_Data.String)
	}

	visualtrack.Display = visualtrack.Display_Data.Bool

	visualtrack.DisplayTrackHistory = visualtrack.DisplayTrackHistory_Data.Bool

	visualtrack.DisplayLevelAndSpeed = visualtrack.DisplayLevelAndSpeed_Data.Bool

	c.JSON(http.StatusOK, visualtrack)
}

// UpdateVisualTrack
//
// swagger:route PATCH /visualtracks/{ID} visualtracks updateVisualTrack
//
// Update a visualtrack
//
// Responses:
//    default: genericError
//        200: visualtrackDBResponse
func UpdateVisualTrack(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visualtrackDB orm.VisualTrackDB

	// fetch the visualtrack
	query := db.First(&visualtrackDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualTrackAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Lat_Data.Float64 = input.Lat
	input.Lat_Data.Valid = true

	input.Lng_Data.Float64 = input.Lng
	input.Lng_Data.Valid = true

	input.Heading_Data.Float64 = input.Heading
	input.Heading_Data.Valid = true

	input.Level_Data.Float64 = input.Level
	input.Level_Data.Valid = true

	input.Speed_Data.Float64 = input.Speed
	input.Speed_Data.Valid = true

	input.VerticalSpeed_Data.Float64 = input.VerticalSpeed
	input.VerticalSpeed_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.VisualColorEnum_Data.String = string(input.VisualColorEnum)
	input.VisualColorEnum_Data.Valid = true

	input.Display_Data.Bool = input.Display
	input.Display_Data.Valid = true

	input.DisplayTrackHistory_Data.Bool = input.DisplayTrackHistory
	input.DisplayTrackHistory_Data.Valid = true

	input.DisplayLevelAndSpeed_Data.Bool = input.DisplayLevelAndSpeed
	input.DisplayLevelAndSpeed_Data.Valid = true

	query = db.Model(&visualtrackDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the visualtrackDB
	c.JSON(http.StatusOK, visualtrackDB)
}

// DeleteVisualTrack
//
// swagger:route DELETE /visualtracks/{ID} visualtracks deleteVisualTrack
//
// Delete a visualtrack
//
// Responses:
//    default: genericError
func DeleteVisualTrack(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visualtrackDB orm.VisualTrackDB
	if err := db.First(&visualtrackDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualtrackDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
