// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VisualCircle__dummysDeclaration__ models.VisualCircle
var __VisualCircle_time__dummyDeclaration time.Duration

// An VisualCircleID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualCircle updateVisualCircle deleteVisualCircle
type VisualCircleID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualCircleInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualCircle updateVisualCircle
type VisualCircleInput struct {
	// The VisualCircle to submit or modify
	// in: body
	VisualCircle *orm.VisualCircleAPI
}

// GetVisualCircles
//
// swagger:route GET /visualcircles visualcircles getVisualCircles
//
// Get all visualcircles
//
// Responses:
//    default: genericError
//        200: visualcircleDBsResponse
func GetVisualCircles(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCircle.GetDB()

	// source slice
	var visualcircleDBs []orm.VisualCircleDB
	query := db.Find(&visualcircleDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	visualcircleAPIs := make([]orm.VisualCircleAPI, 0)

	// for each visualcircle, update fields from the database nullable fields
	for idx := range visualcircleDBs {
		visualcircleDB := &visualcircleDBs[idx]
		_ = visualcircleDB
		var visualcircleAPI orm.VisualCircleAPI

		// insertion point for updating fields
		visualcircleAPI.ID = visualcircleDB.ID
		visualcircleDB.CopyBasicFieldsToVisualCircle(&visualcircleAPI.VisualCircle)
		visualcircleAPI.VisualCirclePointersEnconding = visualcircleDB.VisualCirclePointersEnconding
		visualcircleAPIs = append(visualcircleAPIs, visualcircleAPI)
	}

	c.JSON(http.StatusOK, visualcircleAPIs)
}

// PostVisualCircle
//
// swagger:route POST /visualcircles visualcircles postVisualCircle
//
// Creates a visualcircle
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualcircleDBResponse
func PostVisualCircle(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCircle.GetDB()

	// Validate input
	var input orm.VisualCircleAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualcircle
	visualcircleDB := orm.VisualCircleDB{}
	visualcircleDB.VisualCirclePointersEnconding = input.VisualCirclePointersEnconding
	visualcircleDB.CopyBasicFieldsFromVisualCircle(&input.VisualCircle)

	query := db.Create(&visualcircleDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, visualcircleDB)
}

// GetVisualCircle
//
// swagger:route GET /visualcircles/{ID} visualcircles getVisualCircle
//
// Gets the details for a visualcircle.
//
// Responses:
//    default: genericError
//        200: visualcircleDBResponse
func GetVisualCircle(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCircle.GetDB()

	// Get visualcircleDB in DB
	var visualcircleDB orm.VisualCircleDB
	if err := db.First(&visualcircleDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var visualcircleAPI orm.VisualCircleAPI
	visualcircleAPI.ID = visualcircleDB.ID
	visualcircleAPI.VisualCirclePointersEnconding = visualcircleDB.VisualCirclePointersEnconding
	visualcircleDB.CopyBasicFieldsToVisualCircle(&visualcircleAPI.VisualCircle)

	c.JSON(http.StatusOK, visualcircleAPI)
}

// UpdateVisualCircle
//
// swagger:route PATCH /visualcircles/{ID} visualcircles updateVisualCircle
//
// Update a visualcircle
//
// Responses:
//    default: genericError
//        200: visualcircleDBResponse
func UpdateVisualCircle(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCircle.GetDB()

	// Get model if exist
	var visualcircleDB orm.VisualCircleDB

	// fetch the visualcircle
	query := db.First(&visualcircleDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualCircleAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	visualcircleDB.CopyBasicFieldsFromVisualCircle(&input.VisualCircle)
	visualcircleDB.VisualCirclePointersEnconding = input.VisualCirclePointersEnconding

	query = db.Model(&visualcircleDB).Updates(visualcircleDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the visualcircleDB
	c.JSON(http.StatusOK, visualcircleDB)
}

// DeleteVisualCircle
//
// swagger:route DELETE /visualcircles/{ID} visualcircles deleteVisualCircle
//
// Delete a visualcircle
//
// Responses:
//    default: genericError
func DeleteVisualCircle(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCircle.GetDB()

	// Get model if exist
	var visualcircleDB orm.VisualCircleDB
	if err := db.First(&visualcircleDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualcircleDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
