// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __VisualCircle__dummysDeclaration__ models.VisualCircle
var __VisualCircle_time__dummyDeclaration time.Duration

// An VisualCircleID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualCircle updateVisualCircle deleteVisualCircle
type VisualCircleID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualCircleInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualCircle updateVisualCircle
type VisualCircleInput struct {
	// The VisualCircle to submit or modify
	// in: body
	VisualCircle *orm.VisualCircleAPI
}

// GetVisualCircles
//
// swagger:route GET /visualcircles visualcircles getVisualCircles
//
// Get all visualcircles
//
// Responses:
//    default: genericError
//        200: visualcircleDBsResponse
func GetVisualCircles(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var visualcircles []orm.VisualCircleDB
	query := db.Find(&visualcircles)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each visualcircle, update fields from the database nullable fields
	for idx := range visualcircles {
		visualcircle := &visualcircles[idx]
		_ = visualcircle
		// insertion point for updating fields
		if visualcircle.Lat_Data.Valid {
			visualcircle.Lat = visualcircle.Lat_Data.Float64
		}

		if visualcircle.Lng_Data.Valid {
			visualcircle.Lng = visualcircle.Lng_Data.Float64
		}

		if visualcircle.Name_Data.Valid {
			visualcircle.Name = visualcircle.Name_Data.String
		}

		if visualcircle.Radius_Data.Valid {
			visualcircle.Radius = visualcircle.Radius_Data.Float64
		}

		if visualcircle.VisualColorEnum_Data.Valid {
			visualcircle.VisualColorEnum = models.VisualColorEnum(visualcircle.VisualColorEnum_Data.String)
		}

		if visualcircle.DashStyleEnum_Data.Valid {
			visualcircle.DashStyleEnum = models.DashStyleEnum(visualcircle.DashStyleEnum_Data.String)
		}

	}

	c.JSON(http.StatusOK, visualcircles)
}

// PostVisualCircle
//
// swagger:route POST /visualcircles visualcircles postVisualCircle
//
// Creates a visualcircle
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualcircleDBResponse
func PostVisualCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.VisualCircleAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualcircle
	visualcircleDB := orm.VisualCircleDB{}
	visualcircleDB.VisualCircleAPI = input
	// insertion point for nullable field set
	visualcircleDB.Lat_Data.Float64 = input.Lat
	visualcircleDB.Lat_Data.Valid = true

	visualcircleDB.Lng_Data.Float64 = input.Lng
	visualcircleDB.Lng_Data.Valid = true

	visualcircleDB.Name_Data.String = input.Name
	visualcircleDB.Name_Data.Valid = true

	visualcircleDB.Radius_Data.Float64 = input.Radius
	visualcircleDB.Radius_Data.Valid = true

	visualcircleDB.VisualColorEnum_Data.String = string(input.VisualColorEnum)
	visualcircleDB.VisualColorEnum_Data.Valid = true

	visualcircleDB.DashStyleEnum_Data.String = string(input.DashStyleEnum)
	visualcircleDB.DashStyleEnum_Data.Valid = true

	query := db.Create(&visualcircleDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, visualcircleDB)
}

// GetVisualCircle
//
// swagger:route GET /visualcircles/{ID} visualcircles getVisualCircle
//
// Gets the details for a visualcircle.
//
// Responses:
//    default: genericError
//        200: visualcircleDBResponse
func GetVisualCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get visualcircle in DB
	var visualcircle orm.VisualCircleDB
	if err := db.First(&visualcircle, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if visualcircle.Lat_Data.Valid {
		visualcircle.Lat = visualcircle.Lat_Data.Float64
	}

	if visualcircle.Lng_Data.Valid {
		visualcircle.Lng = visualcircle.Lng_Data.Float64
	}

	if visualcircle.Name_Data.Valid {
		visualcircle.Name = visualcircle.Name_Data.String
	}

	if visualcircle.Radius_Data.Valid {
		visualcircle.Radius = visualcircle.Radius_Data.Float64
	}

	if visualcircle.VisualColorEnum_Data.Valid {
		visualcircle.VisualColorEnum = models.VisualColorEnum(visualcircle.VisualColorEnum_Data.String)
	}

	if visualcircle.DashStyleEnum_Data.Valid {
		visualcircle.DashStyleEnum = models.DashStyleEnum(visualcircle.DashStyleEnum_Data.String)
	}

	c.JSON(http.StatusOK, visualcircle)
}

// UpdateVisualCircle
//
// swagger:route PATCH /visualcircles/{ID} visualcircles updateVisualCircle
//
// Update a visualcircle
//
// Responses:
//    default: genericError
//        200: visualcircleDBResponse
func UpdateVisualCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visualcircleDB orm.VisualCircleDB

	// fetch the visualcircle
	query := db.First(&visualcircleDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualCircleAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Lat_Data.Float64 = input.Lat
	input.Lat_Data.Valid = true

	input.Lng_Data.Float64 = input.Lng
	input.Lng_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.Radius_Data.Float64 = input.Radius
	input.Radius_Data.Valid = true

	input.VisualColorEnum_Data.String = string(input.VisualColorEnum)
	input.VisualColorEnum_Data.Valid = true

	input.DashStyleEnum_Data.String = string(input.DashStyleEnum)
	input.DashStyleEnum_Data.Valid = true

	query = db.Model(&visualcircleDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the visualcircleDB
	c.JSON(http.StatusOK, visualcircleDB)
}

// DeleteVisualCircle
//
// swagger:route DELETE /visualcircles/{ID} visualcircles deleteVisualCircle
//
// Delete a visualcircle
//
// Responses:
//    default: genericError
func DeleteVisualCircle(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visualcircleDB orm.VisualCircleDB
	if err := db.First(&visualcircleDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualcircleDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
