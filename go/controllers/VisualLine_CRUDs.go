// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VisualLine__dummysDeclaration__ models.VisualLine
var __VisualLine_time__dummyDeclaration time.Duration

// An VisualLineID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualLine updateVisualLine deleteVisualLine
type VisualLineID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualLineInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualLine updateVisualLine
type VisualLineInput struct {
	// The VisualLine to submit or modify
	// in: body
	VisualLine *orm.VisualLineAPI
}

// GetVisualLines
//
// swagger:route GET /visuallines visuallines getVisualLines
//
// Get all visuallines
//
// Responses:
//    default: genericError
//        200: visuallineDBsResponse
func GetVisualLines(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLine.GetDB()

	// source slice
	var visuallineDBs []orm.VisualLineDB
	query := db.Find(&visuallineDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	visuallineAPIs := make([]orm.VisualLineAPI, 0)

	// for each visualline, update fields from the database nullable fields
	for idx := range visuallineDBs {
		visuallineDB := &visuallineDBs[idx]
		_ = visuallineDB
		var visuallineAPI orm.VisualLineAPI

		// insertion point for updating fields
		visuallineAPI.ID = visuallineDB.ID
		visuallineDB.CopyBasicFieldsToVisualLine(&visuallineAPI.VisualLine)
		visuallineAPI.VisualLinePointersEnconding = visuallineDB.VisualLinePointersEnconding
		visuallineAPIs = append(visuallineAPIs, visuallineAPI)
	}

	c.JSON(http.StatusOK, visuallineAPIs)
}

// PostVisualLine
//
// swagger:route POST /visuallines visuallines postVisualLine
//
// Creates a visualline
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visuallineDBResponse
func PostVisualLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLine.GetDB()

	// Validate input
	var input orm.VisualLineAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualline
	visuallineDB := orm.VisualLineDB{}
	visuallineDB.VisualLinePointersEnconding = input.VisualLinePointersEnconding
	visuallineDB.CopyBasicFieldsFromVisualLine(&input.VisualLine)

	query := db.Create(&visuallineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, visuallineDB)
}

// GetVisualLine
//
// swagger:route GET /visuallines/{ID} visuallines getVisualLine
//
// Gets the details for a visualline.
//
// Responses:
//    default: genericError
//        200: visuallineDBResponse
func GetVisualLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLine.GetDB()

	// Get visuallineDB in DB
	var visuallineDB orm.VisualLineDB
	if err := db.First(&visuallineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var visuallineAPI orm.VisualLineAPI
	visuallineAPI.ID = visuallineDB.ID
	visuallineAPI.VisualLinePointersEnconding = visuallineDB.VisualLinePointersEnconding
	visuallineDB.CopyBasicFieldsToVisualLine(&visuallineAPI.VisualLine)

	c.JSON(http.StatusOK, visuallineAPI)
}

// UpdateVisualLine
//
// swagger:route PATCH /visuallines/{ID} visuallines updateVisualLine
//
// Update a visualline
//
// Responses:
//    default: genericError
//        200: visuallineDBResponse
func UpdateVisualLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLine.GetDB()

	// Get model if exist
	var visuallineDB orm.VisualLineDB

	// fetch the visualline
	query := db.First(&visuallineDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualLineAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	visuallineDB.CopyBasicFieldsFromVisualLine(&input.VisualLine)
	visuallineDB.VisualLinePointersEnconding = input.VisualLinePointersEnconding

	query = db.Model(&visuallineDB).Updates(visuallineDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the visuallineDB
	c.JSON(http.StatusOK, visuallineDB)
}

// DeleteVisualLine
//
// swagger:route DELETE /visuallines/{ID} visuallines deleteVisualLine
//
// Delete a visualline
//
// Responses:
//    default: genericError
func DeleteVisualLine(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLine.GetDB()

	// Get model if exist
	var visuallineDB orm.VisualLineDB
	if err := db.First(&visuallineDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visuallineDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
