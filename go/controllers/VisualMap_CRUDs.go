// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VisualMap__dummysDeclaration__ models.VisualMap
var __VisualMap_time__dummyDeclaration time.Duration

// An VisualMapID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualMap updateVisualMap deleteVisualMap
type VisualMapID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualMapInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualMap updateVisualMap
type VisualMapInput struct {
	// The VisualMap to submit or modify
	// in: body
	VisualMap *orm.VisualMapAPI
}

// GetVisualMaps
//
// swagger:route GET /visualmaps visualmaps getVisualMaps
//
// Get all visualmaps
//
// Responses:
//    default: genericError
//        200: visualmapDBsResponse
func GetVisualMaps(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualMap.GetDB()

	// source slice
	var visualmapDBs []orm.VisualMapDB
	query := db.Find(&visualmapDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	visualmapAPIs := make([]orm.VisualMapAPI, 0)

	// for each visualmap, update fields from the database nullable fields
	for idx := range visualmapDBs {
		visualmapDB := &visualmapDBs[idx]
		_ = visualmapDB
		var visualmapAPI orm.VisualMapAPI

		// insertion point for updating fields
		visualmapAPI.ID = visualmapDB.ID
		visualmapDB.CopyBasicFieldsToVisualMap(&visualmapAPI.VisualMap)
		visualmapAPI.VisualMapPointersEnconding = visualmapDB.VisualMapPointersEnconding
		visualmapAPIs = append(visualmapAPIs, visualmapAPI)
	}

	c.JSON(http.StatusOK, visualmapAPIs)
}

// PostVisualMap
//
// swagger:route POST /visualmaps visualmaps postVisualMap
//
// Creates a visualmap
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualmapDBResponse
func PostVisualMap(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualMap.GetDB()

	// Validate input
	var input orm.VisualMapAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualmap
	visualmapDB := orm.VisualMapDB{}
	visualmapDB.VisualMapPointersEnconding = input.VisualMapPointersEnconding
	visualmapDB.CopyBasicFieldsFromVisualMap(&input.VisualMap)

	query := db.Create(&visualmapDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, visualmapDB)
}

// GetVisualMap
//
// swagger:route GET /visualmaps/{ID} visualmaps getVisualMap
//
// Gets the details for a visualmap.
//
// Responses:
//    default: genericError
//        200: visualmapDBResponse
func GetVisualMap(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualMap.GetDB()

	// Get visualmapDB in DB
	var visualmapDB orm.VisualMapDB
	if err := db.First(&visualmapDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var visualmapAPI orm.VisualMapAPI
	visualmapAPI.ID = visualmapDB.ID
	visualmapAPI.VisualMapPointersEnconding = visualmapDB.VisualMapPointersEnconding
	visualmapDB.CopyBasicFieldsToVisualMap(&visualmapAPI.VisualMap)

	c.JSON(http.StatusOK, visualmapAPI)
}

// UpdateVisualMap
//
// swagger:route PATCH /visualmaps/{ID} visualmaps updateVisualMap
//
// Update a visualmap
//
// Responses:
//    default: genericError
//        200: visualmapDBResponse
func UpdateVisualMap(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualMap.GetDB()

	// Get model if exist
	var visualmapDB orm.VisualMapDB

	// fetch the visualmap
	query := db.First(&visualmapDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualMapAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	visualmapDB.CopyBasicFieldsFromVisualMap(&input.VisualMap)
	visualmapDB.VisualMapPointersEnconding = input.VisualMapPointersEnconding

	query = db.Model(&visualmapDB).Updates(visualmapDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the visualmapDB
	c.JSON(http.StatusOK, visualmapDB)
}

// DeleteVisualMap
//
// swagger:route DELETE /visualmaps/{ID} visualmaps deleteVisualMap
//
// Delete a visualmap
//
// Responses:
//    default: genericError
func DeleteVisualMap(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualMap.GetDB()

	// Get model if exist
	var visualmapDB orm.VisualMapDB
	if err := db.First(&visualmapDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualmapDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
