// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VisualLayer__dummysDeclaration__ models.VisualLayer
var __VisualLayer_time__dummyDeclaration time.Duration

// An VisualLayerID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualLayer updateVisualLayer deleteVisualLayer
type VisualLayerID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualLayerInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualLayer updateVisualLayer
type VisualLayerInput struct {
	// The VisualLayer to submit or modify
	// in: body
	VisualLayer *orm.VisualLayerAPI
}

// GetVisualLayers
//
// swagger:route GET /visuallayers visuallayers getVisualLayers
//
// Get all visuallayers
//
// Responses:
//    default: genericError
//        200: visuallayerDBsResponse
func GetVisualLayers(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLayer.GetDB()

	// source slice
	var visuallayerDBs []orm.VisualLayerDB
	query := db.Find(&visuallayerDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	visuallayerAPIs := make([]orm.VisualLayerAPI, 0)

	// for each visuallayer, update fields from the database nullable fields
	for idx := range visuallayerDBs {
		visuallayerDB := &visuallayerDBs[idx]
		_ = visuallayerDB
		var visuallayerAPI orm.VisualLayerAPI

		// insertion point for updating fields
		visuallayerAPI.ID = visuallayerDB.ID
		visuallayerDB.CopyBasicFieldsToVisualLayer(&visuallayerAPI.VisualLayer)
		visuallayerAPI.VisualLayerPointersEnconding = visuallayerDB.VisualLayerPointersEnconding
		visuallayerAPIs = append(visuallayerAPIs, visuallayerAPI)
	}

	c.JSON(http.StatusOK, visuallayerAPIs)
}

// PostVisualLayer
//
// swagger:route POST /visuallayers visuallayers postVisualLayer
//
// Creates a visuallayer
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visuallayerDBResponse
func PostVisualLayer(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLayer.GetDB()

	// Validate input
	var input orm.VisualLayerAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visuallayer
	visuallayerDB := orm.VisualLayerDB{}
	visuallayerDB.VisualLayerPointersEnconding = input.VisualLayerPointersEnconding
	visuallayerDB.CopyBasicFieldsFromVisualLayer(&input.VisualLayer)

	query := db.Create(&visuallayerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, visuallayerDB)
}

// GetVisualLayer
//
// swagger:route GET /visuallayers/{ID} visuallayers getVisualLayer
//
// Gets the details for a visuallayer.
//
// Responses:
//    default: genericError
//        200: visuallayerDBResponse
func GetVisualLayer(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLayer.GetDB()

	// Get visuallayerDB in DB
	var visuallayerDB orm.VisualLayerDB
	if err := db.First(&visuallayerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var visuallayerAPI orm.VisualLayerAPI
	visuallayerAPI.ID = visuallayerDB.ID
	visuallayerAPI.VisualLayerPointersEnconding = visuallayerDB.VisualLayerPointersEnconding
	visuallayerDB.CopyBasicFieldsToVisualLayer(&visuallayerAPI.VisualLayer)

	c.JSON(http.StatusOK, visuallayerAPI)
}

// UpdateVisualLayer
//
// swagger:route PATCH /visuallayers/{ID} visuallayers updateVisualLayer
//
// Update a visuallayer
//
// Responses:
//    default: genericError
//        200: visuallayerDBResponse
func UpdateVisualLayer(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLayer.GetDB()

	// Get model if exist
	var visuallayerDB orm.VisualLayerDB

	// fetch the visuallayer
	query := db.First(&visuallayerDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualLayerAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	visuallayerDB.CopyBasicFieldsFromVisualLayer(&input.VisualLayer)
	visuallayerDB.VisualLayerPointersEnconding = input.VisualLayerPointersEnconding

	query = db.Model(&visuallayerDB).Updates(visuallayerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the visuallayerDB
	c.JSON(http.StatusOK, visuallayerDB)
}

// DeleteVisualLayer
//
// swagger:route DELETE /visuallayers/{ID} visuallayers deleteVisualLayer
//
// Delete a visuallayer
//
// Responses:
//    default: genericError
func DeleteVisualLayer(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualLayer.GetDB()

	// Get model if exist
	var visuallayerDB orm.VisualLayerDB
	if err := db.First(&visuallayerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visuallayerDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
