// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __VisualLayer__dummysDeclaration__ models.VisualLayer
var __VisualLayer_time__dummyDeclaration time.Duration

// An VisualLayerID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualLayer updateVisualLayer deleteVisualLayer
type VisualLayerID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualLayerInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualLayer updateVisualLayer
type VisualLayerInput struct {
	// The VisualLayer to submit or modify
	// in: body
	VisualLayer *orm.VisualLayerAPI
}

// GetVisualLayers
//
// swagger:route GET /visuallayers visuallayers getVisualLayers
//
// Get all visuallayers
//
// Responses:
//    default: genericError
//        200: visuallayerDBsResponse
func GetVisualLayers(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var visuallayers []orm.VisualLayerDB
	query := db.Find(&visuallayers)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each visuallayer, update fields from the database nullable fields
	for idx := range visuallayers {
		visuallayer := &visuallayers[idx]
		_ = visuallayer
		// insertion point for updating fields
		if visuallayer.Name_Data.Valid {
			visuallayer.Name = visuallayer.Name_Data.String
		}

		if visuallayer.DisplayName_Data.Valid {
			visuallayer.DisplayName = visuallayer.DisplayName_Data.String
		}

	}

	c.JSON(http.StatusOK, visuallayers)
}

// PostVisualLayer
//
// swagger:route POST /visuallayers visuallayers postVisualLayer
//
// Creates a visuallayer
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visuallayerDBResponse
func PostVisualLayer(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.VisualLayerAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visuallayer
	visuallayerDB := orm.VisualLayerDB{}
	visuallayerDB.VisualLayerAPI = input
	// insertion point for nullable field set
	visuallayerDB.Name_Data.String = input.Name
	visuallayerDB.Name_Data.Valid = true

	visuallayerDB.DisplayName_Data.String = input.DisplayName
	visuallayerDB.DisplayName_Data.Valid = true

	query := db.Create(&visuallayerDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, visuallayerDB)
}

// GetVisualLayer
//
// swagger:route GET /visuallayers/{ID} visuallayers getVisualLayer
//
// Gets the details for a visuallayer.
//
// Responses:
//    default: genericError
//        200: visuallayerDBResponse
func GetVisualLayer(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get visuallayer in DB
	var visuallayer orm.VisualLayerDB
	if err := db.First(&visuallayer, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if visuallayer.Name_Data.Valid {
		visuallayer.Name = visuallayer.Name_Data.String
	}

	if visuallayer.DisplayName_Data.Valid {
		visuallayer.DisplayName = visuallayer.DisplayName_Data.String
	}

	c.JSON(http.StatusOK, visuallayer)
}

// UpdateVisualLayer
//
// swagger:route PATCH /visuallayers/{ID} visuallayers updateVisualLayer
//
// Update a visuallayer
//
// Responses:
//    default: genericError
//        200: visuallayerDBResponse
func UpdateVisualLayer(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visuallayerDB orm.VisualLayerDB

	// fetch the visuallayer
	query := db.First(&visuallayerDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualLayerAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.DisplayName_Data.String = input.DisplayName
	input.DisplayName_Data.Valid = true

	query = db.Model(&visuallayerDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the visuallayerDB
	c.JSON(http.StatusOK, visuallayerDB)
}

// DeleteVisualLayer
//
// swagger:route DELETE /visuallayers/{ID} visuallayers deleteVisualLayer
//
// Delete a visuallayer
//
// Responses:
//    default: genericError
func DeleteVisualLayer(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visuallayerDB orm.VisualLayerDB
	if err := db.First(&visuallayerDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visuallayerDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
