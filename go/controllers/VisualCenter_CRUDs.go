// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// declaration in order to justify use of the models import
var __VisualCenter__dummysDeclaration__ models.VisualCenter
var __VisualCenter_time__dummyDeclaration time.Duration

// An VisualCenterID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualCenter updateVisualCenter deleteVisualCenter
type VisualCenterID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualCenterInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualCenter updateVisualCenter
type VisualCenterInput struct {
	// The VisualCenter to submit or modify
	// in: body
	VisualCenter *orm.VisualCenterAPI
}

// GetVisualCenters
//
// swagger:route GET /visualcenters visualcenters getVisualCenters
//
// Get all visualcenters
//
// Responses:
//    default: genericError
//        200: visualcenterDBsResponse
func GetVisualCenters(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	var visualcenters []orm.VisualCenterDB
	query := db.Find(&visualcenters)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// for each visualcenter, update fields from the database nullable fields
	for idx := range visualcenters {
		visualcenter := &visualcenters[idx]
		_ = visualcenter
		// insertion point for updating fields
		if visualcenter.Lat_Data.Valid {
			visualcenter.Lat = visualcenter.Lat_Data.Float64
		}

		if visualcenter.Lng_Data.Valid {
			visualcenter.Lng = visualcenter.Lng_Data.Float64
		}

		if visualcenter.Name_Data.Valid {
			visualcenter.Name = visualcenter.Name_Data.String
		}

		if visualcenter.VisualColorEnum_Data.Valid {
			visualcenter.VisualColorEnum = models.VisualColorEnum(visualcenter.VisualColorEnum_Data.String)
		}

	}

	c.JSON(http.StatusOK, visualcenters)
}

// PostVisualCenter
//
// swagger:route POST /visualcenters visualcenters postVisualCenter
//
// Creates a visualcenter
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualcenterDBResponse
func PostVisualCenter(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Validate input
	var input orm.VisualCenterAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualcenter
	visualcenterDB := orm.VisualCenterDB{}
	visualcenterDB.VisualCenterAPI = input
	// insertion point for nullable field set
	visualcenterDB.Lat_Data.Float64 = input.Lat
	visualcenterDB.Lat_Data.Valid = true

	visualcenterDB.Lng_Data.Float64 = input.Lng
	visualcenterDB.Lng_Data.Valid = true

	visualcenterDB.Name_Data.String = input.Name
	visualcenterDB.Name_Data.Valid = true

	visualcenterDB.VisualColorEnum_Data.String = string(input.VisualColorEnum)
	visualcenterDB.VisualColorEnum_Data.Valid = true

	query := db.Create(&visualcenterDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, visualcenterDB)
}

// GetVisualCenter
//
// swagger:route GET /visualcenters/{ID} visualcenters getVisualCenter
//
// Gets the details for a visualcenter.
//
// Responses:
//    default: genericError
//        200: visualcenterDBResponse
func GetVisualCenter(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get visualcenter in DB
	var visualcenter orm.VisualCenterDB
	if err := db.First(&visualcenter, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// insertion point for fields value set from nullable fields
	if visualcenter.Lat_Data.Valid {
		visualcenter.Lat = visualcenter.Lat_Data.Float64
	}

	if visualcenter.Lng_Data.Valid {
		visualcenter.Lng = visualcenter.Lng_Data.Float64
	}

	if visualcenter.Name_Data.Valid {
		visualcenter.Name = visualcenter.Name_Data.String
	}

	if visualcenter.VisualColorEnum_Data.Valid {
		visualcenter.VisualColorEnum = models.VisualColorEnum(visualcenter.VisualColorEnum_Data.String)
	}

	c.JSON(http.StatusOK, visualcenter)
}

// UpdateVisualCenter
//
// swagger:route PATCH /visualcenters/{ID} visualcenters updateVisualCenter
//
// Update a visualcenter
//
// Responses:
//    default: genericError
//        200: visualcenterDBResponse
func UpdateVisualCenter(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visualcenterDB orm.VisualCenterDB

	// fetch the visualcenter
	query := db.First(&visualcenterDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualCenterAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	// insertion point for nullable field set
	input.Lat_Data.Float64 = input.Lat
	input.Lat_Data.Valid = true

	input.Lng_Data.Float64 = input.Lng
	input.Lng_Data.Valid = true

	input.Name_Data.String = input.Name
	input.Name_Data.Valid = true

	input.VisualColorEnum_Data.String = string(input.VisualColorEnum)
	input.VisualColorEnum_Data.Valid = true

	query = db.Model(&visualcenterDB).Updates(input)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	// return status OK with the marshalling of the the visualcenterDB
	c.JSON(http.StatusOK, visualcenterDB)
}

// DeleteVisualCenter
//
// swagger:route DELETE /visualcenters/{ID} visualcenters deleteVisualCenter
//
// Delete a visualcenter
//
// Responses:
//    default: genericError
func DeleteVisualCenter(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)

	// Get model if exist
	var visualcenterDB orm.VisualCenterDB
	if err := db.First(&visualcenterDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualcenterDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementCommitNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
