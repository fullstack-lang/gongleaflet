// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongleaflet/go/models"
	"github.com/fullstack-lang/gongleaflet/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __VisualCenter__dummysDeclaration__ models.VisualCenter
var __VisualCenter_time__dummyDeclaration time.Duration

// An VisualCenterID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getVisualCenter updateVisualCenter deleteVisualCenter
type VisualCenterID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// VisualCenterInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postVisualCenter updateVisualCenter
type VisualCenterInput struct {
	// The VisualCenter to submit or modify
	// in: body
	VisualCenter *orm.VisualCenterAPI
}

// GetVisualCenters
//
// swagger:route GET /visualcenters visualcenters getVisualCenters
//
// Get all visualcenters
//
// Responses:
//    default: genericError
//        200: visualcenterDBsResponse
func GetVisualCenters(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCenter.GetDB()

	// source slice
	var visualcenterDBs []orm.VisualCenterDB
	query := db.Find(&visualcenterDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	visualcenterAPIs := make([]orm.VisualCenterAPI, 0)

	// for each visualcenter, update fields from the database nullable fields
	for idx := range visualcenterDBs {
		visualcenterDB := &visualcenterDBs[idx]
		_ = visualcenterDB
		var visualcenterAPI orm.VisualCenterAPI

		// insertion point for updating fields
		visualcenterAPI.ID = visualcenterDB.ID
		visualcenterDB.CopyBasicFieldsToVisualCenter(&visualcenterAPI.VisualCenter)
		visualcenterAPI.VisualCenterPointersEnconding = visualcenterDB.VisualCenterPointersEnconding
		visualcenterAPIs = append(visualcenterAPIs, visualcenterAPI)
	}

	c.JSON(http.StatusOK, visualcenterAPIs)
}

// PostVisualCenter
//
// swagger:route POST /visualcenters visualcenters postVisualCenter
//
// Creates a visualcenter
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: visualcenterDBResponse
func PostVisualCenter(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCenter.GetDB()

	// Validate input
	var input orm.VisualCenterAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create visualcenter
	visualcenterDB := orm.VisualCenterDB{}
	visualcenterDB.VisualCenterPointersEnconding = input.VisualCenterPointersEnconding
	visualcenterDB.CopyBasicFieldsFromVisualCenter(&input.VisualCenter)

	query := db.Create(&visualcenterDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, visualcenterDB)
}

// GetVisualCenter
//
// swagger:route GET /visualcenters/{ID} visualcenters getVisualCenter
//
// Gets the details for a visualcenter.
//
// Responses:
//    default: genericError
//        200: visualcenterDBResponse
func GetVisualCenter(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCenter.GetDB()

	// Get visualcenterDB in DB
	var visualcenterDB orm.VisualCenterDB
	if err := db.First(&visualcenterDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var visualcenterAPI orm.VisualCenterAPI
	visualcenterAPI.ID = visualcenterDB.ID
	visualcenterAPI.VisualCenterPointersEnconding = visualcenterDB.VisualCenterPointersEnconding
	visualcenterDB.CopyBasicFieldsToVisualCenter(&visualcenterAPI.VisualCenter)

	c.JSON(http.StatusOK, visualcenterAPI)
}

// UpdateVisualCenter
//
// swagger:route PATCH /visualcenters/{ID} visualcenters updateVisualCenter
//
// Update a visualcenter
//
// Responses:
//    default: genericError
//        200: visualcenterDBResponse
func UpdateVisualCenter(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCenter.GetDB()

	// Get model if exist
	var visualcenterDB orm.VisualCenterDB

	// fetch the visualcenter
	query := db.First(&visualcenterDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.VisualCenterAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	visualcenterDB.CopyBasicFieldsFromVisualCenter(&input.VisualCenter)
	visualcenterDB.VisualCenterPointersEnconding = input.VisualCenterPointersEnconding

	query = db.Model(&visualcenterDB).Updates(visualcenterDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the visualcenterDB
	c.JSON(http.StatusOK, visualcenterDB)
}

// DeleteVisualCenter
//
// swagger:route DELETE /visualcenters/{ID} visualcenters deleteVisualCenter
//
// Delete a visualcenter
//
// Responses:
//    default: genericError
func DeleteVisualCenter(c *gin.Context) {
	db := orm.BackRepo.BackRepoVisualCenter.GetDB()

	// Get model if exist
	var visualcenterDB orm.VisualCenterDB
	if err := db.First(&visualcenterDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&visualcenterDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
