// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualCircle_sql sql.NullBool
var dummy_VisualCircle_time time.Duration
var dummy_VisualCircle_sort sort.Float64Slice

// VisualCircleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visualcircleAPI
type VisualCircleAPI struct {
	gorm.Model

	models.VisualCircle

	// encoding of pointers
	VisualCirclePointersEnconding
}

// VisualCirclePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VisualCirclePointersEnconding struct {
	// insertion for pointer fields encoding declaration
	// field VisualLayer is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	VisualLayerID sql.NullInt64

}

// VisualCircleDB describes a visualcircle in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model visualcircleDB
type VisualCircleDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field visualcircleDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field visualcircleDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field visualcircleDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visualcircleDB.Radius {{BasicKind}} (to be completed)
	Radius_Data sql.NullFloat64

	// Declation for basic field visualcircleDB.VisualColorEnum {{BasicKind}} (to be completed)
	VisualColorEnum_Data sql.NullString

	// Declation for basic field visualcircleDB.DashStyleEnum {{BasicKind}} (to be completed)
	DashStyleEnum_Data sql.NullString

	// encoding of pointers
	VisualCirclePointersEnconding
}

// VisualCircleDBs arrays visualcircleDBs
// swagger:response visualcircleDBsResponse
type VisualCircleDBs []VisualCircleDB

// VisualCircleDBResponse provides response
// swagger:response visualcircleDBResponse
type VisualCircleDBResponse struct {
	VisualCircleDB
}

// VisualCircleWOP is a VisualCircle without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VisualCircleWOP struct {
	ID int

	// insertion for WOP basic fields

	Lat float64

	Lng float64

	Name string

	Radius float64

	VisualColorEnum models.VisualColorEnum

	DashStyleEnum models.DashStyleEnum
	// insertion for WOP pointer fields
}

var VisualCircle_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Name",
	"Radius",
	"VisualColorEnum",
	"DashStyleEnum",
}

type BackRepoVisualCircleStruct struct {
	// stores VisualCircleDB according to their gorm ID
	Map_VisualCircleDBID_VisualCircleDB *map[uint]*VisualCircleDB

	// stores VisualCircleDB ID according to VisualCircle address
	Map_VisualCirclePtr_VisualCircleDBID *map[*models.VisualCircle]uint

	// stores VisualCircle according to their gorm ID
	Map_VisualCircleDBID_VisualCirclePtr *map[uint]*models.VisualCircle

	db *gorm.DB
}

func (backRepoVisualCircle *BackRepoVisualCircleStruct) GetDB() *gorm.DB {
	return backRepoVisualCircle.db
}

// GetVisualCircleDBFromVisualCirclePtr is a handy function to access the back repo instance from the stage instance
func (backRepoVisualCircle *BackRepoVisualCircleStruct) GetVisualCircleDBFromVisualCirclePtr(visualcircle *models.VisualCircle) (visualcircleDB *VisualCircleDB) {
	id := (*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]
	visualcircleDB = (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[id]
	return
}

// BackRepoVisualCircle.Init set up the BackRepo of the VisualCircle
func (backRepoVisualCircle *BackRepoVisualCircleStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr != nil {
		err := errors.New("In Init, backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr should be nil")
		return err
	}

	if backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB != nil {
		err := errors.New("In Init, backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB should be nil")
		return err
	}

	if backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID != nil {
		err := errors.New("In Init, backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualCircle, 0)
	backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr = &tmp

	tmpDB := make(map[uint]*VisualCircleDB, 0)
	backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB = &tmpDB

	tmpID := make(map[*models.VisualCircle]uint, 0)
	backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID = &tmpID

	backRepoVisualCircle.db = db
	return
}

// BackRepoVisualCircle.CommitPhaseOne commits all staged instances of VisualCircle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualcircle := range stage.VisualCircles {
		backRepoVisualCircle.CommitPhaseOneInstance(visualcircle)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualcircle := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr {
		if _, ok := stage.VisualCircles[visualcircle]; !ok {
			backRepoVisualCircle.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualCircle.CommitDeleteInstance commits deletion of VisualCircle to the BackRepo
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitDeleteInstance(id uint) (Error error) {

	visualcircle := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[id]

	// visualcircle is not staged anymore, remove visualcircleDB
	visualcircleDB := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[id]
	query := backRepoVisualCircle.db.Unscoped().Delete(&visualcircleDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID), visualcircle)
	delete((*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr), id)
	delete((*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB), id)

	return
}

// BackRepoVisualCircle.CommitPhaseOneInstance commits visualcircle staged instances of VisualCircle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseOneInstance(visualcircle *models.VisualCircle) (Error error) {

	// check if the visualcircle is not commited yet
	if _, ok := (*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {
		return
	}

	// initiate visualcircle
	var visualcircleDB VisualCircleDB
	visualcircleDB.CopyBasicFieldsFromVisualCircle(visualcircle)

	query := backRepoVisualCircle.db.Create(&visualcircleDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle] = visualcircleDB.ID
	(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID] = visualcircle
	(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB.ID] = &visualcircleDB

	return
}

// BackRepoVisualCircle.CommitPhaseTwo commits all staged instances of VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualcircle := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr {
		backRepoVisualCircle.CommitPhaseTwoInstance(backRepo, idx, visualcircle)
	}

	return
}

// BackRepoVisualCircle.CommitPhaseTwoInstance commits {{structname }} of models.VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualcircle *models.VisualCircle) (Error error) {

	// fetch matching visualcircleDB
	if visualcircleDB, ok := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[idx]; ok {

		visualcircleDB.CopyBasicFieldsFromVisualCircle(visualcircle)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value visualcircle.VisualLayer translates to updating the visualcircle.VisualLayerID
		visualcircleDB.VisualLayerID.Valid = true // allow for a 0 value (nil association)
		if visualcircle.VisualLayer != nil {
			if VisualLayerId, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visualcircle.VisualLayer]; ok {
				visualcircleDB.VisualLayerID.Int64 = int64(VisualLayerId)
				visualcircleDB.VisualLayerID.Valid = true
			}
		}

		query := backRepoVisualCircle.db.Save(&visualcircleDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualCircle intance %s", visualcircle.Name))
		return err
	}

	return
}

// BackRepoVisualCircle.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseOne() (Error error) {

	visualcircleDBArray := make([]VisualCircleDB, 0)
	query := backRepoVisualCircle.db.Find(&visualcircleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	visualcircleInstancesToBeRemovedFromTheStage := make(map[*models.VisualCircle]struct{})
	for key, value := range models.Stage.VisualCircles {
		visualcircleInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, visualcircleDB := range visualcircleDBArray {
		backRepoVisualCircle.CheckoutPhaseOneInstance(&visualcircleDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		visualcircle, ok := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID]
		if ok {
			delete(visualcircleInstancesToBeRemovedFromTheStage, visualcircle)
		}
	}

	// remove from stage and back repo's 3 maps all visualcircles that are not in the checkout
	for visualcircle := range visualcircleInstancesToBeRemovedFromTheStage {
		visualcircle.Unstage()

		// remove instance from the back repo 3 maps
		visualcircleID := (*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]
		delete((*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID), visualcircle)
		delete((*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB), visualcircleID)
		delete((*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr), visualcircleID)
	}

	return
}

// CheckoutPhaseOneInstance takes a visualcircleDB that has been found in the DB, updates the backRepo and stages the
// models version of the visualcircleDB
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseOneInstance(visualcircleDB *VisualCircleDB) (Error error) {

	visualcircle, ok := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID]
	if !ok {
		visualcircle = new(models.VisualCircle)

		(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID] = visualcircle
		(*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle] = visualcircleDB.ID

		// append model store with the new element
		visualcircle.Name = visualcircleDB.Name_Data.String
		visualcircle.Stage()
	}
	visualcircleDB.CopyBasicFieldsToVisualCircle(visualcircle)

	// preserve pointer to visualcircleDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB hold variable pointers
	visualcircleDB_Data := *visualcircleDB
	preservedPtrToVisualCircle := &visualcircleDB_Data
	(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB.ID] = preservedPtrToVisualCircle

	return
}

// BackRepoVisualCircle.CheckoutPhaseTwo Checkouts all staged instances of VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visualcircleDB := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB {
		backRepoVisualCircle.CheckoutPhaseTwoInstance(backRepo, visualcircleDB)
	}
	return
}

// BackRepoVisualCircle.CheckoutPhaseTwoInstance Checkouts staged instances of VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visualcircleDB *VisualCircleDB) (Error error) {

	visualcircle := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID]
	_ = visualcircle // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// VisualLayer field
	if visualcircleDB.VisualLayerID.Int64 != 0 {
		visualcircle.VisualLayer = (*backRepo.BackRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[uint(visualcircleDB.VisualLayerID.Int64)]
	}
	return
}

// CommitVisualCircle allows commit of a single visualcircle (if already staged)
func (backRepo *BackRepoStruct) CommitVisualCircle(visualcircle *models.VisualCircle) {
	backRepo.BackRepoVisualCircle.CommitPhaseOneInstance(visualcircle)
	if id, ok := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {
		backRepo.BackRepoVisualCircle.CommitPhaseTwoInstance(backRepo, id, visualcircle)
	}
}

// CommitVisualCircle allows checkout of a single visualcircle (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualCircle(visualcircle *models.VisualCircle) {
	// check if the visualcircle is staged
	if _, ok := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {

		if id, ok := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {
			var visualcircleDB VisualCircleDB
			visualcircleDB.ID = id

			if err := backRepo.BackRepoVisualCircle.db.First(&visualcircleDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualCircle : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualCircle.CheckoutPhaseOneInstance(&visualcircleDB)
			backRepo.BackRepoVisualCircle.CheckoutPhaseTwoInstance(backRepo, &visualcircleDB)
		}
	}
}

// CopyBasicFieldsFromVisualCircle
func (visualcircleDB *VisualCircleDB) CopyBasicFieldsFromVisualCircle(visualcircle *models.VisualCircle) {
	// insertion point for fields commit
	visualcircleDB.Lat_Data.Float64 = visualcircle.Lat
	visualcircleDB.Lat_Data.Valid = true

	visualcircleDB.Lng_Data.Float64 = visualcircle.Lng
	visualcircleDB.Lng_Data.Valid = true

	visualcircleDB.Name_Data.String = visualcircle.Name
	visualcircleDB.Name_Data.Valid = true

	visualcircleDB.Radius_Data.Float64 = visualcircle.Radius
	visualcircleDB.Radius_Data.Valid = true

	visualcircleDB.VisualColorEnum_Data.String = string(visualcircle.VisualColorEnum)
	visualcircleDB.VisualColorEnum_Data.Valid = true

	visualcircleDB.DashStyleEnum_Data.String = string(visualcircle.DashStyleEnum)
	visualcircleDB.DashStyleEnum_Data.Valid = true

}

// CopyBasicFieldsFromVisualCircleWOP
func (visualcircleDB *VisualCircleDB) CopyBasicFieldsFromVisualCircleWOP(visualcircle *VisualCircleWOP) {
	// insertion point for fields commit
	visualcircleDB.Lat_Data.Float64 = visualcircle.Lat
	visualcircleDB.Lat_Data.Valid = true

	visualcircleDB.Lng_Data.Float64 = visualcircle.Lng
	visualcircleDB.Lng_Data.Valid = true

	visualcircleDB.Name_Data.String = visualcircle.Name
	visualcircleDB.Name_Data.Valid = true

	visualcircleDB.Radius_Data.Float64 = visualcircle.Radius
	visualcircleDB.Radius_Data.Valid = true

	visualcircleDB.VisualColorEnum_Data.String = string(visualcircle.VisualColorEnum)
	visualcircleDB.VisualColorEnum_Data.Valid = true

	visualcircleDB.DashStyleEnum_Data.String = string(visualcircle.DashStyleEnum)
	visualcircleDB.DashStyleEnum_Data.Valid = true

}

// CopyBasicFieldsToVisualCircle
func (visualcircleDB *VisualCircleDB) CopyBasicFieldsToVisualCircle(visualcircle *models.VisualCircle) {
	// insertion point for checkout of basic fields (back repo to stage)
	visualcircle.Lat = visualcircleDB.Lat_Data.Float64
	visualcircle.Lng = visualcircleDB.Lng_Data.Float64
	visualcircle.Name = visualcircleDB.Name_Data.String
	visualcircle.Radius = visualcircleDB.Radius_Data.Float64
	visualcircle.VisualColorEnum = models.VisualColorEnum(visualcircleDB.VisualColorEnum_Data.String)
	visualcircle.DashStyleEnum = models.DashStyleEnum(visualcircleDB.DashStyleEnum_Data.String)
}

// CopyBasicFieldsToVisualCircleWOP
func (visualcircleDB *VisualCircleDB) CopyBasicFieldsToVisualCircleWOP(visualcircle *VisualCircleWOP) {
	visualcircle.ID = int(visualcircleDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	visualcircle.Lat = visualcircleDB.Lat_Data.Float64
	visualcircle.Lng = visualcircleDB.Lng_Data.Float64
	visualcircle.Name = visualcircleDB.Name_Data.String
	visualcircle.Radius = visualcircleDB.Radius_Data.Float64
	visualcircle.VisualColorEnum = models.VisualColorEnum(visualcircleDB.VisualColorEnum_Data.String)
	visualcircle.DashStyleEnum = models.DashStyleEnum(visualcircleDB.DashStyleEnum_Data.String)
}

// Backup generates a json file from a slice of all VisualCircleDB instances in the backrepo
func (backRepoVisualCircle *BackRepoVisualCircleStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VisualCircleDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualCircleDB, 0)
	for _, visualcircleDB := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB {
		forBackup = append(forBackup, visualcircleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VisualCircle ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VisualCircle file", err.Error())
	}
}

// Backup generates a json file from a slice of all VisualCircleDB instances in the backrepo
func (backRepoVisualCircle *BackRepoVisualCircleStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualCircleDB, 0)
	for _, visualcircleDB := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB {
		forBackup = append(forBackup, visualcircleDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VisualCircle")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VisualCircle_Fields, -1)
	for _, visualcircleDB := range forBackup {

		var visualcircleWOP VisualCircleWOP
		visualcircleDB.CopyBasicFieldsToVisualCircleWOP(&visualcircleWOP)

		row := sh.AddRow()
		row.WriteStruct(&visualcircleWOP, -1)
	}
}

// RestorePhaseOne read the file "VisualCircleDB.json" in dirPath that stores an array
// of VisualCircleDB and stores it in the database
// the map BackRepoVisualCircleid_atBckpTime_newID is updated accordingly
func (backRepoVisualCircle *BackRepoVisualCircleStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVisualCircleid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VisualCircleDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VisualCircle file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VisualCircleDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VisualCircleDBID_VisualCircleDB
	for _, visualcircleDB := range forRestore {

		visualcircleDB_ID_atBackupTime := visualcircleDB.ID
		visualcircleDB.ID = 0
		query := backRepoVisualCircle.db.Create(visualcircleDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB.ID] = visualcircleDB
		BackRepoVisualCircleid_atBckpTime_newID[visualcircleDB_ID_atBackupTime] = visualcircleDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VisualCircle file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VisualCircle>id_atBckpTime_newID
// to compute new index
func (backRepoVisualCircle *BackRepoVisualCircleStruct) RestorePhaseTwo() {

	for _, visualcircleDB := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB {

		// next line of code is to avert unused variable compilation error
		_ = visualcircleDB

		// insertion point for reindexing pointers encoding
		// reindexing VisualLayer field
		if visualcircleDB.VisualLayerID.Int64 != 0 {
			visualcircleDB.VisualLayerID.Int64 = int64(BackRepoVisualLayerid_atBckpTime_newID[uint(visualcircleDB.VisualLayerID.Int64)])
			visualcircleDB.VisualLayerID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoVisualCircle.db.Model(visualcircleDB).Updates(*visualcircleDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVisualCircleid_atBckpTime_newID map[uint]uint
