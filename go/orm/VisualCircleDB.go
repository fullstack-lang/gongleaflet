// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualCircle sql.NullBool
var __VisualCircle_time__dummyDeclaration time.Duration
var dummy_VisualCircle_sort sort.Float64Slice

// VisualCircleAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visualcircleAPI
type VisualCircleAPI struct {
	models.VisualCircle

	// insertion for fields declaration
	// Declation for basic field visualcircleDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field visualcircleDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field visualcircleDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visualcircleDB.Radius {{BasicKind}} (to be completed)
	Radius_Data sql.NullFloat64

	// Declation for basic field visualcircleDB.VisualColorEnum {{BasicKind}} (to be completed)
	VisualColorEnum_Data sql.NullString

	// Declation for basic field visualcircleDB.DashStyleEnum {{BasicKind}} (to be completed)
	DashStyleEnum_Data sql.NullString

	// field VisualLayer is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	VisualLayerID sql.NullInt64

	// all gong Struct has a Name field, this enables this data to object field
	VisualLayerName string

	// end of insertion
}

// VisualCircleDB describes a visualcircle in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model visualcircleDB
type VisualCircleDB struct {
	gorm.Model

	VisualCircleAPI
}

// VisualCircleDBs arrays visualcircleDBs
// swagger:response visualcircleDBsResponse
type VisualCircleDBs []VisualCircleDB

// VisualCircleDBResponse provides response
// swagger:response visualcircleDBResponse
type VisualCircleDBResponse struct {
	VisualCircleDB
}

type BackRepoVisualCircleStruct struct {
	// stores VisualCircleDB according to their gorm ID
	Map_VisualCircleDBID_VisualCircleDB *map[uint]*VisualCircleDB

	// stores VisualCircleDB ID according to VisualCircle address
	Map_VisualCirclePtr_VisualCircleDBID *map[*models.VisualCircle]uint

	// stores VisualCircle according to their gorm ID
	Map_VisualCircleDBID_VisualCirclePtr *map[uint]*models.VisualCircle

	db *gorm.DB
}

// BackRepoVisualCircle.Init set up the BackRepo of the VisualCircle
func (backRepoVisualCircle *BackRepoVisualCircleStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr != nil {
		err := errors.New("In Init, backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr should be nil")
		return err
	}

	if backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB != nil {
		err := errors.New("In Init, backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB should be nil")
		return err
	}

	if backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID != nil {
		err := errors.New("In Init, backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualCircle, 0)
	backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr = &tmp

	tmpDB := make(map[uint]*VisualCircleDB, 0)
	backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB = &tmpDB

	tmpID := make(map[*models.VisualCircle]uint, 0)
	backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID = &tmpID

	backRepoVisualCircle.db = db
	return
}

// BackRepoVisualCircle.CommitPhaseOne commits all staged instances of VisualCircle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualcircle := range stage.VisualCircles {
		backRepoVisualCircle.CommitPhaseOneInstance(visualcircle)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualcircle := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr {
		if _, ok := stage.VisualCircles[visualcircle]; !ok {
			backRepoVisualCircle.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualCircle.CommitDeleteInstance commits deletion of VisualCircle to the BackRepo
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitDeleteInstance(id uint) (Error error) {

	visualcircle := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[id]

	// visualcircle is not staged anymore, remove visualcircleDB
	visualcircleDB := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[id]
	query := backRepoVisualCircle.db.Unscoped().Delete(&visualcircleDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID), visualcircle)
	delete((*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr), id)
	delete((*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB), id)

	return
}

// BackRepoVisualCircle.CommitPhaseOneInstance commits visualcircle staged instances of VisualCircle to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseOneInstance(visualcircle *models.VisualCircle) (Error error) {

	// check if the visualcircle is not commited yet
	if _, ok := (*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {
		return
	}

	// initiate visualcircle
	var visualcircleDB VisualCircleDB
	visualcircleDB.VisualCircle = *visualcircle

	query := backRepoVisualCircle.db.Create(&visualcircleDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle] = visualcircleDB.ID
	(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID] = visualcircle
	(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB.ID] = &visualcircleDB

	return
}

// BackRepoVisualCircle.CommitPhaseTwo commits all staged instances of VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualcircle := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr {
		backRepoVisualCircle.CommitPhaseTwoInstance(backRepo, idx, visualcircle)
	}

	return
}

// BackRepoVisualCircle.CommitPhaseTwoInstance commits {{structname }} of models.VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualcircle *models.VisualCircle) (Error error) {

	// fetch matching visualcircleDB
	if visualcircleDB, ok := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				visualcircleDB.Lat_Data.Float64 = visualcircle.Lat
				visualcircleDB.Lat_Data.Valid = true

				visualcircleDB.Lng_Data.Float64 = visualcircle.Lng
				visualcircleDB.Lng_Data.Valid = true

				visualcircleDB.Name_Data.String = visualcircle.Name
				visualcircleDB.Name_Data.Valid = true

				visualcircleDB.Radius_Data.Float64 = visualcircle.Radius
				visualcircleDB.Radius_Data.Valid = true

				visualcircleDB.VisualColorEnum_Data.String = string(visualcircle.VisualColorEnum)
				visualcircleDB.VisualColorEnum_Data.Valid = true

				visualcircleDB.DashStyleEnum_Data.String = string(visualcircle.DashStyleEnum)
				visualcircleDB.DashStyleEnum_Data.Valid = true

				// commit pointer value visualcircle.VisualLayer translates to updating the visualcircle.VisualLayerID
				visualcircleDB.VisualLayerID.Valid = true // allow for a 0 value (nil association)
				if visualcircle.VisualLayer != nil {
					if VisualLayerId, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visualcircle.VisualLayer]; ok {
						visualcircleDB.VisualLayerID.Int64 = int64(VisualLayerId)
					}
				}

			}
		}
		query := backRepoVisualCircle.db.Save(&visualcircleDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualCircle intance %s", visualcircle.Name))
		return err
	}

	return
}

// BackRepoVisualCircle.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseOne() (Error error) {

	visualcircleDBArray := make([]VisualCircleDB, 0)
	query := backRepoVisualCircle.db.Find(&visualcircleDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, visualcircleDB := range visualcircleDBArray {
		backRepoVisualCircle.CheckoutPhaseOneInstance(&visualcircleDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a visualcircleDB that has been found in the DB, updates the backRepo and stages the
// models version of the visualcircleDB
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseOneInstance(visualcircleDB *VisualCircleDB) (Error error) {

	// if absent, create entries in the backRepoVisualCircle maps.
	visualcircleWithNewFieldValues := visualcircleDB.VisualCircle
	if _, ok := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID]; !ok {

		(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID] = &visualcircleWithNewFieldValues
		(*backRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[&visualcircleWithNewFieldValues] = visualcircleDB.ID

		// append model store with the new element
		visualcircleWithNewFieldValues.Stage()
	}
	visualcircleDBWithNewFieldValues := *visualcircleDB
	(*backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB.ID] = &visualcircleDBWithNewFieldValues

	return
}

// BackRepoVisualCircle.CheckoutPhaseTwo Checkouts all staged instances of VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visualcircleDB := range *backRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB {
		backRepoVisualCircle.CheckoutPhaseTwoInstance(backRepo, visualcircleDB)
	}
	return
}

// BackRepoVisualCircle.CheckoutPhaseTwoInstance Checkouts staged instances of VisualCircle to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualCircle *BackRepoVisualCircleStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visualcircleDB *VisualCircleDB) (Error error) {

	visualcircle := (*backRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB.ID]
	_ = visualcircle // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			visualcircle.Lat = visualcircleDB.Lat_Data.Float64

			visualcircle.Lng = visualcircleDB.Lng_Data.Float64

			visualcircle.Name = visualcircleDB.Name_Data.String

			visualcircle.Radius = visualcircleDB.Radius_Data.Float64

			visualcircle.VisualColorEnum = models.VisualColorEnum(visualcircleDB.VisualColorEnum_Data.String)

			visualcircle.DashStyleEnum = models.DashStyleEnum(visualcircleDB.DashStyleEnum_Data.String)

			// VisualLayer field
			if visualcircleDB.VisualLayerID.Int64 != 0 {
				visualcircle.VisualLayer = (*backRepo.BackRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[uint(visualcircleDB.VisualLayerID.Int64)]
			}

		}
	}
	return
}

// CommitVisualCircle allows commit of a single visualcircle (if already staged)
func (backRepo *BackRepoStruct) CommitVisualCircle(visualcircle *models.VisualCircle) {
	backRepo.BackRepoVisualCircle.CommitPhaseOneInstance(visualcircle)
	if id, ok := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {
		backRepo.BackRepoVisualCircle.CommitPhaseTwoInstance(backRepo, id, visualcircle)
	}
}

// CommitVisualCircle allows checkout of a single visualcircle (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualCircle(visualcircle *models.VisualCircle) {
	// check if the visualcircle is staged
	if _, ok := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {

		if id, ok := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualcircle]; ok {
			var visualcircleDB VisualCircleDB
			visualcircleDB.ID = id

			if err := backRepo.BackRepoVisualCircle.db.First(&visualcircleDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualCircle : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualCircle.CheckoutPhaseOneInstance(&visualcircleDB)
			backRepo.BackRepoVisualCircle.CheckoutPhaseTwoInstance(backRepo, &visualcircleDB)
		}
	}
}
