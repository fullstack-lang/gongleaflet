// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualMap_sql sql.NullBool
var dummy_VisualMap_time time.Duration
var dummy_VisualMap_sort sort.Float64Slice

// VisualMapAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visualmapAPI
type VisualMapAPI struct {
	gorm.Model

	models.VisualMap

	// encoding of pointers
	VisualMapPointersEnconding
}

// VisualMapPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VisualMapPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// VisualMapDB describes a visualmap in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model visualmapDB
type VisualMapDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field visualmapDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field visualmapDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field visualmapDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visualmapDB.ZoomLevel {{BasicKind}} (to be completed)
	ZoomLevel_Data sql.NullFloat64

	// Declation for basic field visualmapDB.UrlTemplate {{BasicKind}} (to be completed)
	UrlTemplate_Data sql.NullString

	// Declation for basic field visualmapDB.Attribution {{BasicKind}} (to be completed)
	Attribution_Data sql.NullString

	// Declation for basic field visualmapDB.MaxZoom {{BasicKind}} (to be completed)
	MaxZoom_Data sql.NullInt64

	// Declation for basic field visualmapDB.ZoomControl bool (to be completed)
	// provide the sql storage for the boolan
	ZoomControl_Data sql.NullBool

	// Declation for basic field visualmapDB.AttributionControl bool (to be completed)
	// provide the sql storage for the boolan
	AttributionControl_Data sql.NullBool

	// Declation for basic field visualmapDB.ZoomSnap bool (to be completed)
	// provide the sql storage for the boolan
	ZoomSnap_Data sql.NullBool

	// encoding of pointers
	VisualMapPointersEnconding
}

// VisualMapDBs arrays visualmapDBs
// swagger:response visualmapDBsResponse
type VisualMapDBs []VisualMapDB

// VisualMapDBResponse provides response
// swagger:response visualmapDBResponse
type VisualMapDBResponse struct {
	VisualMapDB
}

// VisualMapWOP is a VisualMap without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VisualMapWOP struct {
	ID int

	// insertion for WOP basic fields

	Lat float64

	Lng float64

	Name string

	ZoomLevel float64

	UrlTemplate string

	Attribution string

	MaxZoom int

	ZoomControl bool

	AttributionControl bool

	ZoomSnap bool
	// insertion for WOP pointer fields
}

var VisualMap_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Name",
	"ZoomLevel",
	"UrlTemplate",
	"Attribution",
	"MaxZoom",
	"ZoomControl",
	"AttributionControl",
	"ZoomSnap",
}

type BackRepoVisualMapStruct struct {
	// stores VisualMapDB according to their gorm ID
	Map_VisualMapDBID_VisualMapDB *map[uint]*VisualMapDB

	// stores VisualMapDB ID according to VisualMap address
	Map_VisualMapPtr_VisualMapDBID *map[*models.VisualMap]uint

	// stores VisualMap according to their gorm ID
	Map_VisualMapDBID_VisualMapPtr *map[uint]*models.VisualMap

	db *gorm.DB
}

func (backRepoVisualMap *BackRepoVisualMapStruct) GetDB() *gorm.DB {
	return backRepoVisualMap.db
}

// GetVisualMapDBFromVisualMapPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVisualMap *BackRepoVisualMapStruct) GetVisualMapDBFromVisualMapPtr(visualmap *models.VisualMap) (visualmapDB *VisualMapDB) {
	id := (*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]
	visualmapDB = (*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[id]
	return
}

// BackRepoVisualMap.Init set up the BackRepo of the VisualMap
func (backRepoVisualMap *BackRepoVisualMapStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr != nil {
		err := errors.New("In Init, backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr should be nil")
		return err
	}

	if backRepoVisualMap.Map_VisualMapDBID_VisualMapDB != nil {
		err := errors.New("In Init, backRepoVisualMap.Map_VisualMapDBID_VisualMapDB should be nil")
		return err
	}

	if backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID != nil {
		err := errors.New("In Init, backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualMap, 0)
	backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr = &tmp

	tmpDB := make(map[uint]*VisualMapDB, 0)
	backRepoVisualMap.Map_VisualMapDBID_VisualMapDB = &tmpDB

	tmpID := make(map[*models.VisualMap]uint, 0)
	backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID = &tmpID

	backRepoVisualMap.db = db
	return
}

// BackRepoVisualMap.CommitPhaseOne commits all staged instances of VisualMap to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualmap := range stage.VisualMaps {
		backRepoVisualMap.CommitPhaseOneInstance(visualmap)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualmap := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr {
		if _, ok := stage.VisualMaps[visualmap]; !ok {
			backRepoVisualMap.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualMap.CommitDeleteInstance commits deletion of VisualMap to the BackRepo
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitDeleteInstance(id uint) (Error error) {

	visualmap := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[id]

	// visualmap is not staged anymore, remove visualmapDB
	visualmapDB := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[id]
	query := backRepoVisualMap.db.Unscoped().Delete(&visualmapDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID), visualmap)
	delete((*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr), id)
	delete((*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB), id)

	return
}

// BackRepoVisualMap.CommitPhaseOneInstance commits visualmap staged instances of VisualMap to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseOneInstance(visualmap *models.VisualMap) (Error error) {

	// check if the visualmap is not commited yet
	if _, ok := (*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {
		return
	}

	// initiate visualmap
	var visualmapDB VisualMapDB
	visualmapDB.CopyBasicFieldsFromVisualMap(visualmap)

	query := backRepoVisualMap.db.Create(&visualmapDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap] = visualmapDB.ID
	(*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID] = visualmap
	(*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[visualmapDB.ID] = &visualmapDB

	return
}

// BackRepoVisualMap.CommitPhaseTwo commits all staged instances of VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualmap := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr {
		backRepoVisualMap.CommitPhaseTwoInstance(backRepo, idx, visualmap)
	}

	return
}

// BackRepoVisualMap.CommitPhaseTwoInstance commits {{structname }} of models.VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualmap *models.VisualMap) (Error error) {

	// fetch matching visualmapDB
	if visualmapDB, ok := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[idx]; ok {

		visualmapDB.CopyBasicFieldsFromVisualMap(visualmap)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers visualmap.VisualCenters into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, visualcenterAssocEnd := range visualmap.VisualCenters {

			// get the back repo instance at the association end
			visualcenterAssocEnd_DB :=
				backRepo.BackRepoVisualCenter.GetVisualCenterDBFromVisualCenterPtr(visualcenterAssocEnd)

			// encode reverse pointer in the association end back repo instance
			visualcenterAssocEnd_DB.VisualMap_VisualCentersDBID.Int64 = int64(visualmapDB.ID)
			visualcenterAssocEnd_DB.VisualMap_VisualCentersDBID.Valid = true
			visualcenterAssocEnd_DB.VisualMap_VisualCentersDBID_Index.Int64 = int64(idx)
			visualcenterAssocEnd_DB.VisualMap_VisualCentersDBID_Index.Valid = true
			if q := backRepoVisualMap.db.Save(visualcenterAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers visualmap.VisualCircles into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, visualcircleAssocEnd := range visualmap.VisualCircles {

			// get the back repo instance at the association end
			visualcircleAssocEnd_DB :=
				backRepo.BackRepoVisualCircle.GetVisualCircleDBFromVisualCirclePtr(visualcircleAssocEnd)

			// encode reverse pointer in the association end back repo instance
			visualcircleAssocEnd_DB.VisualMap_VisualCirclesDBID.Int64 = int64(visualmapDB.ID)
			visualcircleAssocEnd_DB.VisualMap_VisualCirclesDBID.Valid = true
			visualcircleAssocEnd_DB.VisualMap_VisualCirclesDBID_Index.Int64 = int64(idx)
			visualcircleAssocEnd_DB.VisualMap_VisualCirclesDBID_Index.Valid = true
			if q := backRepoVisualMap.db.Save(visualcircleAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers visualmap.VisualLines into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, visuallineAssocEnd := range visualmap.VisualLines {

			// get the back repo instance at the association end
			visuallineAssocEnd_DB :=
				backRepo.BackRepoVisualLine.GetVisualLineDBFromVisualLinePtr(visuallineAssocEnd)

			// encode reverse pointer in the association end back repo instance
			visuallineAssocEnd_DB.VisualMap_VisualLinesDBID.Int64 = int64(visualmapDB.ID)
			visuallineAssocEnd_DB.VisualMap_VisualLinesDBID.Valid = true
			visuallineAssocEnd_DB.VisualMap_VisualLinesDBID_Index.Int64 = int64(idx)
			visuallineAssocEnd_DB.VisualMap_VisualLinesDBID_Index.Valid = true
			if q := backRepoVisualMap.db.Save(visuallineAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers visualmap.VisualTracks into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, visualtrackAssocEnd := range visualmap.VisualTracks {

			// get the back repo instance at the association end
			visualtrackAssocEnd_DB :=
				backRepo.BackRepoVisualTrack.GetVisualTrackDBFromVisualTrackPtr(visualtrackAssocEnd)

			// encode reverse pointer in the association end back repo instance
			visualtrackAssocEnd_DB.VisualMap_VisualTracksDBID.Int64 = int64(visualmapDB.ID)
			visualtrackAssocEnd_DB.VisualMap_VisualTracksDBID.Valid = true
			visualtrackAssocEnd_DB.VisualMap_VisualTracksDBID_Index.Int64 = int64(idx)
			visualtrackAssocEnd_DB.VisualMap_VisualTracksDBID_Index.Valid = true
			if q := backRepoVisualMap.db.Save(visualtrackAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoVisualMap.db.Save(&visualmapDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualMap intance %s", visualmap.Name))
		return err
	}

	return
}

// BackRepoVisualMap.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseOne() (Error error) {

	visualmapDBArray := make([]VisualMapDB, 0)
	query := backRepoVisualMap.db.Find(&visualmapDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	visualmapInstancesToBeRemovedFromTheStage := make(map[*models.VisualMap]struct{})
	for key, value := range models.Stage.VisualMaps {
		visualmapInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, visualmapDB := range visualmapDBArray {
		backRepoVisualMap.CheckoutPhaseOneInstance(&visualmapDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		visualmap, ok := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID]
		if ok {
			delete(visualmapInstancesToBeRemovedFromTheStage, visualmap)
		}
	}

	// remove from stage and back repo's 3 maps all visualmaps that are not in the checkout
	for visualmap := range visualmapInstancesToBeRemovedFromTheStage {
		visualmap.Unstage()

		// remove instance from the back repo 3 maps
		visualmapID := (*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]
		delete((*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID), visualmap)
		delete((*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB), visualmapID)
		delete((*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr), visualmapID)
	}

	return
}

// CheckoutPhaseOneInstance takes a visualmapDB that has been found in the DB, updates the backRepo and stages the
// models version of the visualmapDB
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseOneInstance(visualmapDB *VisualMapDB) (Error error) {

	visualmap, ok := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID]
	if !ok {
		visualmap = new(models.VisualMap)

		(*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID] = visualmap
		(*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap] = visualmapDB.ID

		// append model store with the new element
		visualmap.Name = visualmapDB.Name_Data.String
		visualmap.Stage()
	}
	visualmapDB.CopyBasicFieldsToVisualMap(visualmap)

	// preserve pointer to visualmapDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VisualMapDBID_VisualMapDB)[visualmapDB hold variable pointers
	visualmapDB_Data := *visualmapDB
	preservedPtrToVisualMap := &visualmapDB_Data
	(*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[visualmapDB.ID] = preservedPtrToVisualMap

	return
}

// BackRepoVisualMap.CheckoutPhaseTwo Checkouts all staged instances of VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visualmapDB := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapDB {
		backRepoVisualMap.CheckoutPhaseTwoInstance(backRepo, visualmapDB)
	}
	return
}

// BackRepoVisualMap.CheckoutPhaseTwoInstance Checkouts staged instances of VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visualmapDB *VisualMapDB) (Error error) {

	visualmap := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID]
	_ = visualmap // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem visualmap.VisualCenters in the stage from the encode in the back repo
	// It parses all VisualCenterDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	visualmap.VisualCenters = visualmap.VisualCenters[:0]
	// 2. loop all instances in the type in the association end
	for _, visualcenterDB_AssocEnd := range *backRepo.BackRepoVisualCenter.Map_VisualCenterDBID_VisualCenterDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if visualcenterDB_AssocEnd.VisualMap_VisualCentersDBID.Int64 == int64(visualmapDB.ID) {
			// 4. fetch the associated instance in the stage
			visualcenter_AssocEnd := (*backRepo.BackRepoVisualCenter.Map_VisualCenterDBID_VisualCenterPtr)[visualcenterDB_AssocEnd.ID]
			// 5. append it the association slice
			visualmap.VisualCenters = append(visualmap.VisualCenters, visualcenter_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(visualmap.VisualCenters, func(i, j int) bool {
		visualcenterDB_i_ID := (*backRepo.BackRepoVisualCenter.Map_VisualCenterPtr_VisualCenterDBID)[visualmap.VisualCenters[i]]
		visualcenterDB_j_ID := (*backRepo.BackRepoVisualCenter.Map_VisualCenterPtr_VisualCenterDBID)[visualmap.VisualCenters[j]]

		visualcenterDB_i := (*backRepo.BackRepoVisualCenter.Map_VisualCenterDBID_VisualCenterDB)[visualcenterDB_i_ID]
		visualcenterDB_j := (*backRepo.BackRepoVisualCenter.Map_VisualCenterDBID_VisualCenterDB)[visualcenterDB_j_ID]

		return visualcenterDB_i.VisualMap_VisualCentersDBID_Index.Int64 < visualcenterDB_j.VisualMap_VisualCentersDBID_Index.Int64
	})

	// This loop redeem visualmap.VisualCircles in the stage from the encode in the back repo
	// It parses all VisualCircleDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	visualmap.VisualCircles = visualmap.VisualCircles[:0]
	// 2. loop all instances in the type in the association end
	for _, visualcircleDB_AssocEnd := range *backRepo.BackRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if visualcircleDB_AssocEnd.VisualMap_VisualCirclesDBID.Int64 == int64(visualmapDB.ID) {
			// 4. fetch the associated instance in the stage
			visualcircle_AssocEnd := (*backRepo.BackRepoVisualCircle.Map_VisualCircleDBID_VisualCirclePtr)[visualcircleDB_AssocEnd.ID]
			// 5. append it the association slice
			visualmap.VisualCircles = append(visualmap.VisualCircles, visualcircle_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(visualmap.VisualCircles, func(i, j int) bool {
		visualcircleDB_i_ID := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualmap.VisualCircles[i]]
		visualcircleDB_j_ID := (*backRepo.BackRepoVisualCircle.Map_VisualCirclePtr_VisualCircleDBID)[visualmap.VisualCircles[j]]

		visualcircleDB_i := (*backRepo.BackRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB_i_ID]
		visualcircleDB_j := (*backRepo.BackRepoVisualCircle.Map_VisualCircleDBID_VisualCircleDB)[visualcircleDB_j_ID]

		return visualcircleDB_i.VisualMap_VisualCirclesDBID_Index.Int64 < visualcircleDB_j.VisualMap_VisualCirclesDBID_Index.Int64
	})

	// This loop redeem visualmap.VisualLines in the stage from the encode in the back repo
	// It parses all VisualLineDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	visualmap.VisualLines = visualmap.VisualLines[:0]
	// 2. loop all instances in the type in the association end
	for _, visuallineDB_AssocEnd := range *backRepo.BackRepoVisualLine.Map_VisualLineDBID_VisualLineDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if visuallineDB_AssocEnd.VisualMap_VisualLinesDBID.Int64 == int64(visualmapDB.ID) {
			// 4. fetch the associated instance in the stage
			visualline_AssocEnd := (*backRepo.BackRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[visuallineDB_AssocEnd.ID]
			// 5. append it the association slice
			visualmap.VisualLines = append(visualmap.VisualLines, visualline_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(visualmap.VisualLines, func(i, j int) bool {
		visuallineDB_i_ID := (*backRepo.BackRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualmap.VisualLines[i]]
		visuallineDB_j_ID := (*backRepo.BackRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualmap.VisualLines[j]]

		visuallineDB_i := (*backRepo.BackRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[visuallineDB_i_ID]
		visuallineDB_j := (*backRepo.BackRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[visuallineDB_j_ID]

		return visuallineDB_i.VisualMap_VisualLinesDBID_Index.Int64 < visuallineDB_j.VisualMap_VisualLinesDBID_Index.Int64
	})

	// This loop redeem visualmap.VisualTracks in the stage from the encode in the back repo
	// It parses all VisualTrackDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	visualmap.VisualTracks = visualmap.VisualTracks[:0]
	// 2. loop all instances in the type in the association end
	for _, visualtrackDB_AssocEnd := range *backRepo.BackRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if visualtrackDB_AssocEnd.VisualMap_VisualTracksDBID.Int64 == int64(visualmapDB.ID) {
			// 4. fetch the associated instance in the stage
			visualtrack_AssocEnd := (*backRepo.BackRepoVisualTrack.Map_VisualTrackDBID_VisualTrackPtr)[visualtrackDB_AssocEnd.ID]
			// 5. append it the association slice
			visualmap.VisualTracks = append(visualmap.VisualTracks, visualtrack_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(visualmap.VisualTracks, func(i, j int) bool {
		visualtrackDB_i_ID := (*backRepo.BackRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualmap.VisualTracks[i]]
		visualtrackDB_j_ID := (*backRepo.BackRepoVisualTrack.Map_VisualTrackPtr_VisualTrackDBID)[visualmap.VisualTracks[j]]

		visualtrackDB_i := (*backRepo.BackRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB_i_ID]
		visualtrackDB_j := (*backRepo.BackRepoVisualTrack.Map_VisualTrackDBID_VisualTrackDB)[visualtrackDB_j_ID]

		return visualtrackDB_i.VisualMap_VisualTracksDBID_Index.Int64 < visualtrackDB_j.VisualMap_VisualTracksDBID_Index.Int64
	})

	return
}

// CommitVisualMap allows commit of a single visualmap (if already staged)
func (backRepo *BackRepoStruct) CommitVisualMap(visualmap *models.VisualMap) {
	backRepo.BackRepoVisualMap.CommitPhaseOneInstance(visualmap)
	if id, ok := (*backRepo.BackRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {
		backRepo.BackRepoVisualMap.CommitPhaseTwoInstance(backRepo, id, visualmap)
	}
}

// CommitVisualMap allows checkout of a single visualmap (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualMap(visualmap *models.VisualMap) {
	// check if the visualmap is staged
	if _, ok := (*backRepo.BackRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {

		if id, ok := (*backRepo.BackRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {
			var visualmapDB VisualMapDB
			visualmapDB.ID = id

			if err := backRepo.BackRepoVisualMap.db.First(&visualmapDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualMap : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualMap.CheckoutPhaseOneInstance(&visualmapDB)
			backRepo.BackRepoVisualMap.CheckoutPhaseTwoInstance(backRepo, &visualmapDB)
		}
	}
}

// CopyBasicFieldsFromVisualMap
func (visualmapDB *VisualMapDB) CopyBasicFieldsFromVisualMap(visualmap *models.VisualMap) {
	// insertion point for fields commit
	visualmapDB.Lat_Data.Float64 = visualmap.Lat
	visualmapDB.Lat_Data.Valid = true

	visualmapDB.Lng_Data.Float64 = visualmap.Lng
	visualmapDB.Lng_Data.Valid = true

	visualmapDB.Name_Data.String = visualmap.Name
	visualmapDB.Name_Data.Valid = true

	visualmapDB.ZoomLevel_Data.Float64 = visualmap.ZoomLevel
	visualmapDB.ZoomLevel_Data.Valid = true

	visualmapDB.UrlTemplate_Data.String = visualmap.UrlTemplate
	visualmapDB.UrlTemplate_Data.Valid = true

	visualmapDB.Attribution_Data.String = visualmap.Attribution
	visualmapDB.Attribution_Data.Valid = true

	visualmapDB.MaxZoom_Data.Int64 = int64(visualmap.MaxZoom)
	visualmapDB.MaxZoom_Data.Valid = true

	visualmapDB.ZoomControl_Data.Bool = visualmap.ZoomControl
	visualmapDB.ZoomControl_Data.Valid = true

	visualmapDB.AttributionControl_Data.Bool = visualmap.AttributionControl
	visualmapDB.AttributionControl_Data.Valid = true

	visualmapDB.ZoomSnap_Data.Bool = visualmap.ZoomSnap
	visualmapDB.ZoomSnap_Data.Valid = true

}

// CopyBasicFieldsFromVisualMapWOP
func (visualmapDB *VisualMapDB) CopyBasicFieldsFromVisualMapWOP(visualmap *VisualMapWOP) {
	// insertion point for fields commit
	visualmapDB.Lat_Data.Float64 = visualmap.Lat
	visualmapDB.Lat_Data.Valid = true

	visualmapDB.Lng_Data.Float64 = visualmap.Lng
	visualmapDB.Lng_Data.Valid = true

	visualmapDB.Name_Data.String = visualmap.Name
	visualmapDB.Name_Data.Valid = true

	visualmapDB.ZoomLevel_Data.Float64 = visualmap.ZoomLevel
	visualmapDB.ZoomLevel_Data.Valid = true

	visualmapDB.UrlTemplate_Data.String = visualmap.UrlTemplate
	visualmapDB.UrlTemplate_Data.Valid = true

	visualmapDB.Attribution_Data.String = visualmap.Attribution
	visualmapDB.Attribution_Data.Valid = true

	visualmapDB.MaxZoom_Data.Int64 = int64(visualmap.MaxZoom)
	visualmapDB.MaxZoom_Data.Valid = true

	visualmapDB.ZoomControl_Data.Bool = visualmap.ZoomControl
	visualmapDB.ZoomControl_Data.Valid = true

	visualmapDB.AttributionControl_Data.Bool = visualmap.AttributionControl
	visualmapDB.AttributionControl_Data.Valid = true

	visualmapDB.ZoomSnap_Data.Bool = visualmap.ZoomSnap
	visualmapDB.ZoomSnap_Data.Valid = true

}

// CopyBasicFieldsToVisualMap
func (visualmapDB *VisualMapDB) CopyBasicFieldsToVisualMap(visualmap *models.VisualMap) {
	// insertion point for checkout of basic fields (back repo to stage)
	visualmap.Lat = visualmapDB.Lat_Data.Float64
	visualmap.Lng = visualmapDB.Lng_Data.Float64
	visualmap.Name = visualmapDB.Name_Data.String
	visualmap.ZoomLevel = visualmapDB.ZoomLevel_Data.Float64
	visualmap.UrlTemplate = visualmapDB.UrlTemplate_Data.String
	visualmap.Attribution = visualmapDB.Attribution_Data.String
	visualmap.MaxZoom = int(visualmapDB.MaxZoom_Data.Int64)
	visualmap.ZoomControl = visualmapDB.ZoomControl_Data.Bool
	visualmap.AttributionControl = visualmapDB.AttributionControl_Data.Bool
	visualmap.ZoomSnap = visualmapDB.ZoomSnap_Data.Bool
}

// CopyBasicFieldsToVisualMapWOP
func (visualmapDB *VisualMapDB) CopyBasicFieldsToVisualMapWOP(visualmap *VisualMapWOP) {
	visualmap.ID = int(visualmapDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	visualmap.Lat = visualmapDB.Lat_Data.Float64
	visualmap.Lng = visualmapDB.Lng_Data.Float64
	visualmap.Name = visualmapDB.Name_Data.String
	visualmap.ZoomLevel = visualmapDB.ZoomLevel_Data.Float64
	visualmap.UrlTemplate = visualmapDB.UrlTemplate_Data.String
	visualmap.Attribution = visualmapDB.Attribution_Data.String
	visualmap.MaxZoom = int(visualmapDB.MaxZoom_Data.Int64)
	visualmap.ZoomControl = visualmapDB.ZoomControl_Data.Bool
	visualmap.AttributionControl = visualmapDB.AttributionControl_Data.Bool
	visualmap.ZoomSnap = visualmapDB.ZoomSnap_Data.Bool
}

// Backup generates a json file from a slice of all VisualMapDB instances in the backrepo
func (backRepoVisualMap *BackRepoVisualMapStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VisualMapDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualMapDB, 0)
	for _, visualmapDB := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapDB {
		forBackup = append(forBackup, visualmapDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VisualMap ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VisualMap file", err.Error())
	}
}

// Backup generates a json file from a slice of all VisualMapDB instances in the backrepo
func (backRepoVisualMap *BackRepoVisualMapStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualMapDB, 0)
	for _, visualmapDB := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapDB {
		forBackup = append(forBackup, visualmapDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VisualMap")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VisualMap_Fields, -1)
	for _, visualmapDB := range forBackup {

		var visualmapWOP VisualMapWOP
		visualmapDB.CopyBasicFieldsToVisualMapWOP(&visualmapWOP)

		row := sh.AddRow()
		row.WriteStruct(&visualmapWOP, -1)
	}
}

// RestorePhaseOne read the file "VisualMapDB.json" in dirPath that stores an array
// of VisualMapDB and stores it in the database
// the map BackRepoVisualMapid_atBckpTime_newID is updated accordingly
func (backRepoVisualMap *BackRepoVisualMapStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVisualMapid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VisualMapDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VisualMap file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VisualMapDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VisualMapDBID_VisualMapDB
	for _, visualmapDB := range forRestore {

		visualmapDB_ID_atBackupTime := visualmapDB.ID
		visualmapDB.ID = 0
		query := backRepoVisualMap.db.Create(visualmapDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[visualmapDB.ID] = visualmapDB
		BackRepoVisualMapid_atBckpTime_newID[visualmapDB_ID_atBackupTime] = visualmapDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VisualMap file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VisualMap>id_atBckpTime_newID
// to compute new index
func (backRepoVisualMap *BackRepoVisualMapStruct) RestorePhaseTwo() {

	for _, visualmapDB := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapDB {

		// next line of code is to avert unused variable compilation error
		_ = visualmapDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoVisualMap.db.Model(visualmapDB).Updates(*visualmapDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVisualMapid_atBckpTime_newID map[uint]uint
