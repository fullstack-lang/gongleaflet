// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"sort"
	"time"

	"github.com/jinzhu/gorm"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualMap sql.NullBool
var __VisualMap_time__dummyDeclaration time.Duration
var dummy_VisualMap_sort sort.Float64Slice

// VisualMapAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visualmapAPI
type VisualMapAPI struct {
	models.VisualMap

	// insertion for fields declaration
	// Declation for basic field visualmapDB.Lat {{BasicKind}} (to be completed)
	Lat_Data sql.NullFloat64

	// Declation for basic field visualmapDB.Lng {{BasicKind}} (to be completed)
	Lng_Data sql.NullFloat64

	// Declation for basic field visualmapDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visualmapDB.ZoomLevel {{BasicKind}} (to be completed)
	ZoomLevel_Data sql.NullFloat64

	// Declation for basic field visualmapDB.UrlTemplate {{BasicKind}} (to be completed)
	UrlTemplate_Data sql.NullString

	// Declation for basic field visualmapDB.Attribution {{BasicKind}} (to be completed)
	Attribution_Data sql.NullString

	// Declation for basic field visualmapDB.MaxZoom {{BasicKind}} (to be completed)
	MaxZoom_Data sql.NullInt64

	// Declation for basic field visualmapDB.ZoomControl bool (to be completed)
	// provide the sql storage for the boolan
	ZoomControl_Data sql.NullBool

	// Declation for basic field visualmapDB.AttributionControl bool (to be completed)
	// provide the sql storage for the boolan
	AttributionControl_Data sql.NullBool

	// Declation for basic field visualmapDB.ZoomSnap bool (to be completed)
	// provide the sql storage for the boolan
	ZoomSnap_Data sql.NullBool

	// end of insertion
}

// VisualMapDB describes a visualmap in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model visualmapDB
type VisualMapDB struct {
	gorm.Model

	VisualMapAPI
}

// VisualMapDBs arrays visualmapDBs
// swagger:response visualmapDBsResponse
type VisualMapDBs []VisualMapDB

// VisualMapDBResponse provides response
// swagger:response visualmapDBResponse
type VisualMapDBResponse struct {
	VisualMapDB
}

type BackRepoVisualMapStruct struct {
	// stores VisualMapDB according to their gorm ID
	Map_VisualMapDBID_VisualMapDB *map[uint]*VisualMapDB

	// stores VisualMapDB ID according to VisualMap address
	Map_VisualMapPtr_VisualMapDBID *map[*models.VisualMap]uint

	// stores VisualMap according to their gorm ID
	Map_VisualMapDBID_VisualMapPtr *map[uint]*models.VisualMap

	db *gorm.DB
}

// BackRepoVisualMap.Init set up the BackRepo of the VisualMap
func (backRepoVisualMap *BackRepoVisualMapStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr != nil {
		err := errors.New("In Init, backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr should be nil")
		return err
	}

	if backRepoVisualMap.Map_VisualMapDBID_VisualMapDB != nil {
		err := errors.New("In Init, backRepoVisualMap.Map_VisualMapDBID_VisualMapDB should be nil")
		return err
	}

	if backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID != nil {
		err := errors.New("In Init, backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualMap, 0)
	backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr = &tmp

	tmpDB := make(map[uint]*VisualMapDB, 0)
	backRepoVisualMap.Map_VisualMapDBID_VisualMapDB = &tmpDB

	tmpID := make(map[*models.VisualMap]uint, 0)
	backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID = &tmpID

	backRepoVisualMap.db = db
	return
}

// BackRepoVisualMap.CommitPhaseOne commits all staged instances of VisualMap to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualmap := range stage.VisualMaps {
		backRepoVisualMap.CommitPhaseOneInstance(visualmap)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualmap := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr {
		if _, ok := stage.VisualMaps[visualmap]; !ok {
			backRepoVisualMap.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualMap.CommitDeleteInstance commits deletion of VisualMap to the BackRepo
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitDeleteInstance(id uint) (Error error) {

	visualmap := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[id]

	// visualmap is not staged anymore, remove visualmapDB
	visualmapDB := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[id]
	query := backRepoVisualMap.db.Unscoped().Delete(&visualmapDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID), visualmap)
	delete((*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr), id)
	delete((*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB), id)

	return
}

// BackRepoVisualMap.CommitPhaseOneInstance commits visualmap staged instances of VisualMap to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseOneInstance(visualmap *models.VisualMap) (Error error) {

	// check if the visualmap is not commited yet
	if _, ok := (*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {
		return
	}

	// initiate visualmap
	var visualmapDB VisualMapDB
	visualmapDB.VisualMap = *visualmap

	query := backRepoVisualMap.db.Create(&visualmapDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap] = visualmapDB.ID
	(*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID] = visualmap
	(*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[visualmapDB.ID] = &visualmapDB

	return
}

// BackRepoVisualMap.CommitPhaseTwo commits all staged instances of VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualmap := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr {
		backRepoVisualMap.CommitPhaseTwoInstance(backRepo, idx, visualmap)
	}

	return
}

// BackRepoVisualMap.CommitPhaseTwoInstance commits {{structname }} of models.VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualmap *models.VisualMap) (Error error) {

	// fetch matching visualmapDB
	if visualmapDB, ok := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				visualmapDB.Lat_Data.Float64 = visualmap.Lat
				visualmapDB.Lat_Data.Valid = true

				visualmapDB.Lng_Data.Float64 = visualmap.Lng
				visualmapDB.Lng_Data.Valid = true

				visualmapDB.Name_Data.String = visualmap.Name
				visualmapDB.Name_Data.Valid = true

				visualmapDB.ZoomLevel_Data.Float64 = visualmap.ZoomLevel
				visualmapDB.ZoomLevel_Data.Valid = true

				visualmapDB.UrlTemplate_Data.String = visualmap.UrlTemplate
				visualmapDB.UrlTemplate_Data.Valid = true

				visualmapDB.Attribution_Data.String = visualmap.Attribution
				visualmapDB.Attribution_Data.Valid = true

				visualmapDB.MaxZoom_Data.Int64 = int64(visualmap.MaxZoom)
				visualmapDB.MaxZoom_Data.Valid = true

				visualmapDB.ZoomControl_Data.Bool = visualmap.ZoomControl
				visualmapDB.ZoomControl_Data.Valid = true

				visualmapDB.AttributionControl_Data.Bool = visualmap.AttributionControl
				visualmapDB.AttributionControl_Data.Valid = true

				visualmapDB.ZoomSnap_Data.Bool = visualmap.ZoomSnap
				visualmapDB.ZoomSnap_Data.Valid = true

			}
		}
		query := backRepoVisualMap.db.Save(&visualmapDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualMap intance %s", visualmap.Name))
		return err
	}

	return
}

// BackRepoVisualMap.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseOne() (Error error) {

	visualmapDBArray := make([]VisualMapDB, 0)
	query := backRepoVisualMap.db.Find(&visualmapDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, visualmapDB := range visualmapDBArray {
		backRepoVisualMap.CheckoutPhaseOneInstance(&visualmapDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a visualmapDB that has been found in the DB, updates the backRepo and stages the
// models version of the visualmapDB
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseOneInstance(visualmapDB *VisualMapDB) (Error error) {

	// if absent, create entries in the backRepoVisualMap maps.
	visualmapWithNewFieldValues := visualmapDB.VisualMap
	if _, ok := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID]; !ok {

		(*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID] = &visualmapWithNewFieldValues
		(*backRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[&visualmapWithNewFieldValues] = visualmapDB.ID

		// append model store with the new element
		visualmapWithNewFieldValues.Stage()
	}
	visualmapDBWithNewFieldValues := *visualmapDB
	(*backRepoVisualMap.Map_VisualMapDBID_VisualMapDB)[visualmapDB.ID] = &visualmapDBWithNewFieldValues

	return
}

// BackRepoVisualMap.CheckoutPhaseTwo Checkouts all staged instances of VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visualmapDB := range *backRepoVisualMap.Map_VisualMapDBID_VisualMapDB {
		backRepoVisualMap.CheckoutPhaseTwoInstance(backRepo, visualmapDB)
	}
	return
}

// BackRepoVisualMap.CheckoutPhaseTwoInstance Checkouts staged instances of VisualMap to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualMap *BackRepoVisualMapStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visualmapDB *VisualMapDB) (Error error) {

	visualmap := (*backRepoVisualMap.Map_VisualMapDBID_VisualMapPtr)[visualmapDB.ID]
	_ = visualmap // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			visualmap.Lat = visualmapDB.Lat_Data.Float64

			visualmap.Lng = visualmapDB.Lng_Data.Float64

			visualmap.Name = visualmapDB.Name_Data.String

			visualmap.ZoomLevel = visualmapDB.ZoomLevel_Data.Float64

			visualmap.UrlTemplate = visualmapDB.UrlTemplate_Data.String

			visualmap.Attribution = visualmapDB.Attribution_Data.String

			visualmap.MaxZoom = int(visualmapDB.MaxZoom_Data.Int64)

			visualmap.ZoomControl = visualmapDB.ZoomControl_Data.Bool
			visualmap.AttributionControl = visualmapDB.AttributionControl_Data.Bool
			visualmap.ZoomSnap = visualmapDB.ZoomSnap_Data.Bool
		}
	}
	return
}

// CommitVisualMap allows commit of a single visualmap (if already staged)
func (backRepo *BackRepoStruct) CommitVisualMap(visualmap *models.VisualMap) {
	backRepo.BackRepoVisualMap.CommitPhaseOneInstance(visualmap)
	if id, ok := (*backRepo.BackRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {
		backRepo.BackRepoVisualMap.CommitPhaseTwoInstance(backRepo, id, visualmap)
	}
}

// CommitVisualMap allows checkout of a single visualmap (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualMap(visualmap *models.VisualMap) {
	// check if the visualmap is staged
	if _, ok := (*backRepo.BackRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {

		if id, ok := (*backRepo.BackRepoVisualMap.Map_VisualMapPtr_VisualMapDBID)[visualmap]; ok {
			var visualmapDB VisualMapDB
			visualmapDB.ID = id

			if err := backRepo.BackRepoVisualMap.db.First(&visualmapDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualMap : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualMap.CheckoutPhaseOneInstance(&visualmapDB)
			backRepo.BackRepoVisualMap.CheckoutPhaseTwoInstance(backRepo, &visualmapDB)
		}
	}
}
