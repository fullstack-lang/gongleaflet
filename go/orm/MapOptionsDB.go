// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MapOptions_sql sql.NullBool
var dummy_MapOptions_time time.Duration
var dummy_MapOptions_sort sort.Float64Slice

// MapOptionsAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model mapoptionsAPI
type MapOptionsAPI struct {
	gorm.Model

	models.MapOptions_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MapOptionsPointersEncoding MapOptionsPointersEncoding
}

// MapOptionsPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MapOptionsPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field LayerGroupUses is a slice of pointers to another Struct (optional or 0..1)
	LayerGroupUses IntSlice `gorm:"type:TEXT"`
}

// MapOptionsDB describes a mapoptions in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model mapoptionsDB
type MapOptionsDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field mapoptionsDB.Lat
	Lat_Data sql.NullFloat64

	// Declation for basic field mapoptionsDB.Lng
	Lng_Data sql.NullFloat64

	// Declation for basic field mapoptionsDB.Name
	Name_Data sql.NullString

	// Declation for basic field mapoptionsDB.ZoomLevel
	ZoomLevel_Data sql.NullFloat64

	// Declation for basic field mapoptionsDB.UrlTemplate
	UrlTemplate_Data sql.NullString

	// Declation for basic field mapoptionsDB.Attribution
	Attribution_Data sql.NullString

	// Declation for basic field mapoptionsDB.MaxZoom
	MaxZoom_Data sql.NullInt64

	// Declation for basic field mapoptionsDB.ZoomControl
	// provide the sql storage for the boolan
	ZoomControl_Data sql.NullBool

	// Declation for basic field mapoptionsDB.AttributionControl
	// provide the sql storage for the boolan
	AttributionControl_Data sql.NullBool

	// Declation for basic field mapoptionsDB.ZoomSnap
	ZoomSnap_Data sql.NullInt64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MapOptionsPointersEncoding
}

// MapOptionsDBs arrays mapoptionsDBs
// swagger:response mapoptionsDBsResponse
type MapOptionsDBs []MapOptionsDB

// MapOptionsDBResponse provides response
// swagger:response mapoptionsDBResponse
type MapOptionsDBResponse struct {
	MapOptionsDB
}

// MapOptionsWOP is a MapOptions without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MapOptionsWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Lat float64 `xlsx:"1"`

	Lng float64 `xlsx:"2"`

	Name string `xlsx:"3"`

	ZoomLevel float64 `xlsx:"4"`

	UrlTemplate string `xlsx:"5"`

	Attribution string `xlsx:"6"`

	MaxZoom int `xlsx:"7"`

	ZoomControl bool `xlsx:"8"`

	AttributionControl bool `xlsx:"9"`

	ZoomSnap int `xlsx:"10"`
	// insertion for WOP pointer fields
}

var MapOptions_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Lat",
	"Lng",
	"Name",
	"ZoomLevel",
	"UrlTemplate",
	"Attribution",
	"MaxZoom",
	"ZoomControl",
	"AttributionControl",
	"ZoomSnap",
}

type BackRepoMapOptionsStruct struct {
	// stores MapOptionsDB according to their gorm ID
	Map_MapOptionsDBID_MapOptionsDB map[uint]*MapOptionsDB

	// stores MapOptionsDB ID according to MapOptions address
	Map_MapOptionsPtr_MapOptionsDBID map[*models.MapOptions]uint

	// stores MapOptions according to their gorm ID
	Map_MapOptionsDBID_MapOptionsPtr map[uint]*models.MapOptions

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMapOptions *BackRepoMapOptionsStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMapOptions.stage
	return
}

func (backRepoMapOptions *BackRepoMapOptionsStruct) GetDB() *gorm.DB {
	return backRepoMapOptions.db
}

// GetMapOptionsDBFromMapOptionsPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMapOptions *BackRepoMapOptionsStruct) GetMapOptionsDBFromMapOptionsPtr(mapoptions *models.MapOptions) (mapoptionsDB *MapOptionsDB) {
	id := backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions]
	mapoptionsDB = backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[id]
	return
}

// BackRepoMapOptions.CommitPhaseOne commits all staged instances of MapOptions to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMapOptions *BackRepoMapOptionsStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for mapoptions := range stage.MapOptionss {
		backRepoMapOptions.CommitPhaseOneInstance(mapoptions)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, mapoptions := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr {
		if _, ok := stage.MapOptionss[mapoptions]; !ok {
			backRepoMapOptions.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMapOptions.CommitDeleteInstance commits deletion of MapOptions to the BackRepo
func (backRepoMapOptions *BackRepoMapOptionsStruct) CommitDeleteInstance(id uint) (Error error) {

	mapoptions := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr[id]

	// mapoptions is not staged anymore, remove mapoptionsDB
	mapoptionsDB := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[id]
	query := backRepoMapOptions.db.Unscoped().Delete(&mapoptionsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID, mapoptions)
	delete(backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr, id)
	delete(backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB, id)

	return
}

// BackRepoMapOptions.CommitPhaseOneInstance commits mapoptions staged instances of MapOptions to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMapOptions *BackRepoMapOptionsStruct) CommitPhaseOneInstance(mapoptions *models.MapOptions) (Error error) {

	// check if the mapoptions is not commited yet
	if _, ok := backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions]; ok {
		return
	}

	// initiate mapoptions
	var mapoptionsDB MapOptionsDB
	mapoptionsDB.CopyBasicFieldsFromMapOptions(mapoptions)

	query := backRepoMapOptions.db.Create(&mapoptionsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions] = mapoptionsDB.ID
	backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr[mapoptionsDB.ID] = mapoptions
	backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[mapoptionsDB.ID] = &mapoptionsDB

	return
}

// BackRepoMapOptions.CommitPhaseTwo commits all staged instances of MapOptions to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapOptions *BackRepoMapOptionsStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, mapoptions := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr {
		backRepoMapOptions.CommitPhaseTwoInstance(backRepo, idx, mapoptions)
	}

	return
}

// BackRepoMapOptions.CommitPhaseTwoInstance commits {{structname }} of models.MapOptions to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapOptions *BackRepoMapOptionsStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, mapoptions *models.MapOptions) (Error error) {

	// fetch matching mapoptionsDB
	if mapoptionsDB, ok := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[idx]; ok {

		mapoptionsDB.CopyBasicFieldsFromMapOptions(mapoptions)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		mapoptionsDB.MapOptionsPointersEncoding.LayerGroupUses = make([]int, 0)
		// 2. encode
		for _, layergroupuseAssocEnd := range mapoptions.LayerGroupUses {
			layergroupuseAssocEnd_DB :=
				backRepo.BackRepoLayerGroupUse.GetLayerGroupUseDBFromLayerGroupUsePtr(layergroupuseAssocEnd)
			
			// the stage might be inconsistant, meaning that the layergroupuseAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if layergroupuseAssocEnd_DB == nil {
				continue
			}
			
			mapoptionsDB.MapOptionsPointersEncoding.LayerGroupUses =
				append(mapoptionsDB.MapOptionsPointersEncoding.LayerGroupUses, int(layergroupuseAssocEnd_DB.ID))
		}

		query := backRepoMapOptions.db.Save(&mapoptionsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MapOptions intance %s", mapoptions.Name))
		return err
	}

	return
}

// BackRepoMapOptions.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMapOptions *BackRepoMapOptionsStruct) CheckoutPhaseOne() (Error error) {

	mapoptionsDBArray := make([]MapOptionsDB, 0)
	query := backRepoMapOptions.db.Find(&mapoptionsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	mapoptionsInstancesToBeRemovedFromTheStage := make(map[*models.MapOptions]any)
	for key, value := range backRepoMapOptions.stage.MapOptionss {
		mapoptionsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, mapoptionsDB := range mapoptionsDBArray {
		backRepoMapOptions.CheckoutPhaseOneInstance(&mapoptionsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		mapoptions, ok := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr[mapoptionsDB.ID]
		if ok {
			delete(mapoptionsInstancesToBeRemovedFromTheStage, mapoptions)
		}
	}

	// remove from stage and back repo's 3 maps all mapoptionss that are not in the checkout
	for mapoptions := range mapoptionsInstancesToBeRemovedFromTheStage {
		mapoptions.Unstage(backRepoMapOptions.GetStage())

		// remove instance from the back repo 3 maps
		mapoptionsID := backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions]
		delete(backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID, mapoptions)
		delete(backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB, mapoptionsID)
		delete(backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr, mapoptionsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a mapoptionsDB that has been found in the DB, updates the backRepo and stages the
// models version of the mapoptionsDB
func (backRepoMapOptions *BackRepoMapOptionsStruct) CheckoutPhaseOneInstance(mapoptionsDB *MapOptionsDB) (Error error) {

	mapoptions, ok := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr[mapoptionsDB.ID]
	if !ok {
		mapoptions = new(models.MapOptions)

		backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr[mapoptionsDB.ID] = mapoptions
		backRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions] = mapoptionsDB.ID

		// append model store with the new element
		mapoptions.Name = mapoptionsDB.Name_Data.String
		mapoptions.Stage(backRepoMapOptions.GetStage())
	}
	mapoptionsDB.CopyBasicFieldsToMapOptions(mapoptions)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	mapoptions.Stage(backRepoMapOptions.GetStage())

	// preserve pointer to mapoptionsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MapOptionsDBID_MapOptionsDB)[mapoptionsDB hold variable pointers
	mapoptionsDB_Data := *mapoptionsDB
	preservedPtrToMapOptions := &mapoptionsDB_Data
	backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[mapoptionsDB.ID] = preservedPtrToMapOptions

	return
}

// BackRepoMapOptions.CheckoutPhaseTwo Checkouts all staged instances of MapOptions to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapOptions *BackRepoMapOptionsStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, mapoptionsDB := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB {
		backRepoMapOptions.CheckoutPhaseTwoInstance(backRepo, mapoptionsDB)
	}
	return
}

// BackRepoMapOptions.CheckoutPhaseTwoInstance Checkouts staged instances of MapOptions to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapOptions *BackRepoMapOptionsStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, mapoptionsDB *MapOptionsDB) (Error error) {

	mapoptions := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr[mapoptionsDB.ID]

	mapoptionsDB.DecodePointers(backRepo, mapoptions)

	return
}

func (mapoptionsDB *MapOptionsDB) DecodePointers(backRepo *BackRepoStruct, mapoptions *models.MapOptions) {

	// insertion point for checkout of pointer encoding
	// This loop redeem mapoptions.LayerGroupUses in the stage from the encode in the back repo
	// It parses all LayerGroupUseDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	mapoptions.LayerGroupUses = mapoptions.LayerGroupUses[:0]
	for _, _LayerGroupUseid := range mapoptionsDB.MapOptionsPointersEncoding.LayerGroupUses {
		mapoptions.LayerGroupUses = append(mapoptions.LayerGroupUses, backRepo.BackRepoLayerGroupUse.Map_LayerGroupUseDBID_LayerGroupUsePtr[uint(_LayerGroupUseid)])
	}

	return
}

// CommitMapOptions allows commit of a single mapoptions (if already staged)
func (backRepo *BackRepoStruct) CommitMapOptions(mapoptions *models.MapOptions) {
	backRepo.BackRepoMapOptions.CommitPhaseOneInstance(mapoptions)
	if id, ok := backRepo.BackRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions]; ok {
		backRepo.BackRepoMapOptions.CommitPhaseTwoInstance(backRepo, id, mapoptions)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMapOptions allows checkout of a single mapoptions (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMapOptions(mapoptions *models.MapOptions) {
	// check if the mapoptions is staged
	if _, ok := backRepo.BackRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions]; ok {

		if id, ok := backRepo.BackRepoMapOptions.Map_MapOptionsPtr_MapOptionsDBID[mapoptions]; ok {
			var mapoptionsDB MapOptionsDB
			mapoptionsDB.ID = id

			if err := backRepo.BackRepoMapOptions.db.First(&mapoptionsDB, id).Error; err != nil {
				log.Fatalln("CheckoutMapOptions : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMapOptions.CheckoutPhaseOneInstance(&mapoptionsDB)
			backRepo.BackRepoMapOptions.CheckoutPhaseTwoInstance(backRepo, &mapoptionsDB)
		}
	}
}

// CopyBasicFieldsFromMapOptions
func (mapoptionsDB *MapOptionsDB) CopyBasicFieldsFromMapOptions(mapoptions *models.MapOptions) {
	// insertion point for fields commit

	mapoptionsDB.Lat_Data.Float64 = mapoptions.Lat
	mapoptionsDB.Lat_Data.Valid = true

	mapoptionsDB.Lng_Data.Float64 = mapoptions.Lng
	mapoptionsDB.Lng_Data.Valid = true

	mapoptionsDB.Name_Data.String = mapoptions.Name
	mapoptionsDB.Name_Data.Valid = true

	mapoptionsDB.ZoomLevel_Data.Float64 = mapoptions.ZoomLevel
	mapoptionsDB.ZoomLevel_Data.Valid = true

	mapoptionsDB.UrlTemplate_Data.String = mapoptions.UrlTemplate
	mapoptionsDB.UrlTemplate_Data.Valid = true

	mapoptionsDB.Attribution_Data.String = mapoptions.Attribution
	mapoptionsDB.Attribution_Data.Valid = true

	mapoptionsDB.MaxZoom_Data.Int64 = int64(mapoptions.MaxZoom)
	mapoptionsDB.MaxZoom_Data.Valid = true

	mapoptionsDB.ZoomControl_Data.Bool = mapoptions.ZoomControl
	mapoptionsDB.ZoomControl_Data.Valid = true

	mapoptionsDB.AttributionControl_Data.Bool = mapoptions.AttributionControl
	mapoptionsDB.AttributionControl_Data.Valid = true

	mapoptionsDB.ZoomSnap_Data.Int64 = int64(mapoptions.ZoomSnap)
	mapoptionsDB.ZoomSnap_Data.Valid = true
}

// CopyBasicFieldsFromMapOptions_WOP
func (mapoptionsDB *MapOptionsDB) CopyBasicFieldsFromMapOptions_WOP(mapoptions *models.MapOptions_WOP) {
	// insertion point for fields commit

	mapoptionsDB.Lat_Data.Float64 = mapoptions.Lat
	mapoptionsDB.Lat_Data.Valid = true

	mapoptionsDB.Lng_Data.Float64 = mapoptions.Lng
	mapoptionsDB.Lng_Data.Valid = true

	mapoptionsDB.Name_Data.String = mapoptions.Name
	mapoptionsDB.Name_Data.Valid = true

	mapoptionsDB.ZoomLevel_Data.Float64 = mapoptions.ZoomLevel
	mapoptionsDB.ZoomLevel_Data.Valid = true

	mapoptionsDB.UrlTemplate_Data.String = mapoptions.UrlTemplate
	mapoptionsDB.UrlTemplate_Data.Valid = true

	mapoptionsDB.Attribution_Data.String = mapoptions.Attribution
	mapoptionsDB.Attribution_Data.Valid = true

	mapoptionsDB.MaxZoom_Data.Int64 = int64(mapoptions.MaxZoom)
	mapoptionsDB.MaxZoom_Data.Valid = true

	mapoptionsDB.ZoomControl_Data.Bool = mapoptions.ZoomControl
	mapoptionsDB.ZoomControl_Data.Valid = true

	mapoptionsDB.AttributionControl_Data.Bool = mapoptions.AttributionControl
	mapoptionsDB.AttributionControl_Data.Valid = true

	mapoptionsDB.ZoomSnap_Data.Int64 = int64(mapoptions.ZoomSnap)
	mapoptionsDB.ZoomSnap_Data.Valid = true
}

// CopyBasicFieldsFromMapOptionsWOP
func (mapoptionsDB *MapOptionsDB) CopyBasicFieldsFromMapOptionsWOP(mapoptions *MapOptionsWOP) {
	// insertion point for fields commit

	mapoptionsDB.Lat_Data.Float64 = mapoptions.Lat
	mapoptionsDB.Lat_Data.Valid = true

	mapoptionsDB.Lng_Data.Float64 = mapoptions.Lng
	mapoptionsDB.Lng_Data.Valid = true

	mapoptionsDB.Name_Data.String = mapoptions.Name
	mapoptionsDB.Name_Data.Valid = true

	mapoptionsDB.ZoomLevel_Data.Float64 = mapoptions.ZoomLevel
	mapoptionsDB.ZoomLevel_Data.Valid = true

	mapoptionsDB.UrlTemplate_Data.String = mapoptions.UrlTemplate
	mapoptionsDB.UrlTemplate_Data.Valid = true

	mapoptionsDB.Attribution_Data.String = mapoptions.Attribution
	mapoptionsDB.Attribution_Data.Valid = true

	mapoptionsDB.MaxZoom_Data.Int64 = int64(mapoptions.MaxZoom)
	mapoptionsDB.MaxZoom_Data.Valid = true

	mapoptionsDB.ZoomControl_Data.Bool = mapoptions.ZoomControl
	mapoptionsDB.ZoomControl_Data.Valid = true

	mapoptionsDB.AttributionControl_Data.Bool = mapoptions.AttributionControl
	mapoptionsDB.AttributionControl_Data.Valid = true

	mapoptionsDB.ZoomSnap_Data.Int64 = int64(mapoptions.ZoomSnap)
	mapoptionsDB.ZoomSnap_Data.Valid = true
}

// CopyBasicFieldsToMapOptions
func (mapoptionsDB *MapOptionsDB) CopyBasicFieldsToMapOptions(mapoptions *models.MapOptions) {
	// insertion point for checkout of basic fields (back repo to stage)
	mapoptions.Lat = mapoptionsDB.Lat_Data.Float64
	mapoptions.Lng = mapoptionsDB.Lng_Data.Float64
	mapoptions.Name = mapoptionsDB.Name_Data.String
	mapoptions.ZoomLevel = mapoptionsDB.ZoomLevel_Data.Float64
	mapoptions.UrlTemplate = mapoptionsDB.UrlTemplate_Data.String
	mapoptions.Attribution = mapoptionsDB.Attribution_Data.String
	mapoptions.MaxZoom = int(mapoptionsDB.MaxZoom_Data.Int64)
	mapoptions.ZoomControl = mapoptionsDB.ZoomControl_Data.Bool
	mapoptions.AttributionControl = mapoptionsDB.AttributionControl_Data.Bool
	mapoptions.ZoomSnap = int(mapoptionsDB.ZoomSnap_Data.Int64)
}

// CopyBasicFieldsToMapOptions_WOP
func (mapoptionsDB *MapOptionsDB) CopyBasicFieldsToMapOptions_WOP(mapoptions *models.MapOptions_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	mapoptions.Lat = mapoptionsDB.Lat_Data.Float64
	mapoptions.Lng = mapoptionsDB.Lng_Data.Float64
	mapoptions.Name = mapoptionsDB.Name_Data.String
	mapoptions.ZoomLevel = mapoptionsDB.ZoomLevel_Data.Float64
	mapoptions.UrlTemplate = mapoptionsDB.UrlTemplate_Data.String
	mapoptions.Attribution = mapoptionsDB.Attribution_Data.String
	mapoptions.MaxZoom = int(mapoptionsDB.MaxZoom_Data.Int64)
	mapoptions.ZoomControl = mapoptionsDB.ZoomControl_Data.Bool
	mapoptions.AttributionControl = mapoptionsDB.AttributionControl_Data.Bool
	mapoptions.ZoomSnap = int(mapoptionsDB.ZoomSnap_Data.Int64)
}

// CopyBasicFieldsToMapOptionsWOP
func (mapoptionsDB *MapOptionsDB) CopyBasicFieldsToMapOptionsWOP(mapoptions *MapOptionsWOP) {
	mapoptions.ID = int(mapoptionsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	mapoptions.Lat = mapoptionsDB.Lat_Data.Float64
	mapoptions.Lng = mapoptionsDB.Lng_Data.Float64
	mapoptions.Name = mapoptionsDB.Name_Data.String
	mapoptions.ZoomLevel = mapoptionsDB.ZoomLevel_Data.Float64
	mapoptions.UrlTemplate = mapoptionsDB.UrlTemplate_Data.String
	mapoptions.Attribution = mapoptionsDB.Attribution_Data.String
	mapoptions.MaxZoom = int(mapoptionsDB.MaxZoom_Data.Int64)
	mapoptions.ZoomControl = mapoptionsDB.ZoomControl_Data.Bool
	mapoptions.AttributionControl = mapoptionsDB.AttributionControl_Data.Bool
	mapoptions.ZoomSnap = int(mapoptionsDB.ZoomSnap_Data.Int64)
}

// Backup generates a json file from a slice of all MapOptionsDB instances in the backrepo
func (backRepoMapOptions *BackRepoMapOptionsStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MapOptionsDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MapOptionsDB, 0)
	for _, mapoptionsDB := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB {
		forBackup = append(forBackup, mapoptionsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MapOptions ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MapOptions file", err.Error())
	}
}

// Backup generates a json file from a slice of all MapOptionsDB instances in the backrepo
func (backRepoMapOptions *BackRepoMapOptionsStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MapOptionsDB, 0)
	for _, mapoptionsDB := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB {
		forBackup = append(forBackup, mapoptionsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MapOptions")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MapOptions_Fields, -1)
	for _, mapoptionsDB := range forBackup {

		var mapoptionsWOP MapOptionsWOP
		mapoptionsDB.CopyBasicFieldsToMapOptionsWOP(&mapoptionsWOP)

		row := sh.AddRow()
		row.WriteStruct(&mapoptionsWOP, -1)
	}
}

// RestoreXL from the "MapOptions" sheet all MapOptionsDB instances
func (backRepoMapOptions *BackRepoMapOptionsStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMapOptionsid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MapOptions"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMapOptions.rowVisitorMapOptions)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMapOptions *BackRepoMapOptionsStruct) rowVisitorMapOptions(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var mapoptionsWOP MapOptionsWOP
		row.ReadStruct(&mapoptionsWOP)

		// add the unmarshalled struct to the stage
		mapoptionsDB := new(MapOptionsDB)
		mapoptionsDB.CopyBasicFieldsFromMapOptionsWOP(&mapoptionsWOP)

		mapoptionsDB_ID_atBackupTime := mapoptionsDB.ID
		mapoptionsDB.ID = 0
		query := backRepoMapOptions.db.Create(mapoptionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[mapoptionsDB.ID] = mapoptionsDB
		BackRepoMapOptionsid_atBckpTime_newID[mapoptionsDB_ID_atBackupTime] = mapoptionsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MapOptionsDB.json" in dirPath that stores an array
// of MapOptionsDB and stores it in the database
// the map BackRepoMapOptionsid_atBckpTime_newID is updated accordingly
func (backRepoMapOptions *BackRepoMapOptionsStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMapOptionsid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MapOptionsDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MapOptions file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MapOptionsDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MapOptionsDBID_MapOptionsDB
	for _, mapoptionsDB := range forRestore {

		mapoptionsDB_ID_atBackupTime := mapoptionsDB.ID
		mapoptionsDB.ID = 0
		query := backRepoMapOptions.db.Create(mapoptionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[mapoptionsDB.ID] = mapoptionsDB
		BackRepoMapOptionsid_atBckpTime_newID[mapoptionsDB_ID_atBackupTime] = mapoptionsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MapOptions file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MapOptions>id_atBckpTime_newID
// to compute new index
func (backRepoMapOptions *BackRepoMapOptionsStruct) RestorePhaseTwo() {

	for _, mapoptionsDB := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB {

		// next line of code is to avert unused variable compilation error
		_ = mapoptionsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMapOptions.db.Model(mapoptionsDB).Updates(*mapoptionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMapOptions.ResetReversePointers commits all staged instances of MapOptions to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMapOptions *BackRepoMapOptionsStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, mapoptions := range backRepoMapOptions.Map_MapOptionsDBID_MapOptionsPtr {
		backRepoMapOptions.ResetReversePointersInstance(backRepo, idx, mapoptions)
	}

	return
}

func (backRepoMapOptions *BackRepoMapOptionsStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, mapoptions *models.MapOptions) (Error error) {

	// fetch matching mapoptionsDB
	if mapoptionsDB, ok := backRepoMapOptions.Map_MapOptionsDBID_MapOptionsDB[idx]; ok {
		_ = mapoptionsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMapOptionsid_atBckpTime_newID map[uint]uint
