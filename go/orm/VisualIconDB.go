// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualIcon_sql sql.NullBool
var dummy_VisualIcon_time time.Duration
var dummy_VisualIcon_sort sort.Float64Slice

// VisualIconAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visualiconAPI
type VisualIconAPI struct {
	gorm.Model

	models.VisualIcon

	// encoding of pointers
	VisualIconPointersEnconding
}

// VisualIconPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VisualIconPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// VisualIconDB describes a visualicon in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model visualiconDB
type VisualIconDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field visualiconDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visualiconDB.SVG {{BasicKind}} (to be completed)
	SVG_Data sql.NullString

	// encoding of pointers
	VisualIconPointersEnconding
}

// VisualIconDBs arrays visualiconDBs
// swagger:response visualiconDBsResponse
type VisualIconDBs []VisualIconDB

// VisualIconDBResponse provides response
// swagger:response visualiconDBResponse
type VisualIconDBResponse struct {
	VisualIconDB
}

// VisualIconWOP is a VisualIcon without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VisualIconWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	SVG string
	// insertion for WOP pointer fields
}

var VisualIcon_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SVG",
}

type BackRepoVisualIconStruct struct {
	// stores VisualIconDB according to their gorm ID
	Map_VisualIconDBID_VisualIconDB *map[uint]*VisualIconDB

	// stores VisualIconDB ID according to VisualIcon address
	Map_VisualIconPtr_VisualIconDBID *map[*models.VisualIcon]uint

	// stores VisualIcon according to their gorm ID
	Map_VisualIconDBID_VisualIconPtr *map[uint]*models.VisualIcon

	db *gorm.DB
}

func (backRepoVisualIcon *BackRepoVisualIconStruct) GetDB() *gorm.DB {
	return backRepoVisualIcon.db
}

// GetVisualIconDBFromVisualIconPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVisualIcon *BackRepoVisualIconStruct) GetVisualIconDBFromVisualIconPtr(visualicon *models.VisualIcon) (visualiconDB *VisualIconDB) {
	id := (*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon]
	visualiconDB = (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB)[id]
	return
}

// BackRepoVisualIcon.Init set up the BackRepo of the VisualIcon
func (backRepoVisualIcon *BackRepoVisualIconStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr != nil {
		err := errors.New("In Init, backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr should be nil")
		return err
	}

	if backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB != nil {
		err := errors.New("In Init, backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB should be nil")
		return err
	}

	if backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID != nil {
		err := errors.New("In Init, backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualIcon, 0)
	backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr = &tmp

	tmpDB := make(map[uint]*VisualIconDB, 0)
	backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB = &tmpDB

	tmpID := make(map[*models.VisualIcon]uint, 0)
	backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID = &tmpID

	backRepoVisualIcon.db = db
	return
}

// BackRepoVisualIcon.CommitPhaseOne commits all staged instances of VisualIcon to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualIcon *BackRepoVisualIconStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualicon := range stage.VisualIcons {
		backRepoVisualIcon.CommitPhaseOneInstance(visualicon)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualicon := range *backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr {
		if _, ok := stage.VisualIcons[visualicon]; !ok {
			backRepoVisualIcon.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualIcon.CommitDeleteInstance commits deletion of VisualIcon to the BackRepo
func (backRepoVisualIcon *BackRepoVisualIconStruct) CommitDeleteInstance(id uint) (Error error) {

	visualicon := (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr)[id]

	// visualicon is not staged anymore, remove visualiconDB
	visualiconDB := (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB)[id]
	query := backRepoVisualIcon.db.Unscoped().Delete(&visualiconDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID), visualicon)
	delete((*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr), id)
	delete((*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB), id)

	return
}

// BackRepoVisualIcon.CommitPhaseOneInstance commits visualicon staged instances of VisualIcon to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualIcon *BackRepoVisualIconStruct) CommitPhaseOneInstance(visualicon *models.VisualIcon) (Error error) {

	// check if the visualicon is not commited yet
	if _, ok := (*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon]; ok {
		return
	}

	// initiate visualicon
	var visualiconDB VisualIconDB
	visualiconDB.CopyBasicFieldsFromVisualIcon(visualicon)

	query := backRepoVisualIcon.db.Create(&visualiconDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon] = visualiconDB.ID
	(*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr)[visualiconDB.ID] = visualicon
	(*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB)[visualiconDB.ID] = &visualiconDB

	return
}

// BackRepoVisualIcon.CommitPhaseTwo commits all staged instances of VisualIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualIcon *BackRepoVisualIconStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualicon := range *backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr {
		backRepoVisualIcon.CommitPhaseTwoInstance(backRepo, idx, visualicon)
	}

	return
}

// BackRepoVisualIcon.CommitPhaseTwoInstance commits {{structname }} of models.VisualIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualIcon *BackRepoVisualIconStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualicon *models.VisualIcon) (Error error) {

	// fetch matching visualiconDB
	if visualiconDB, ok := (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB)[idx]; ok {

		visualiconDB.CopyBasicFieldsFromVisualIcon(visualicon)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoVisualIcon.db.Save(&visualiconDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualIcon intance %s", visualicon.Name))
		return err
	}

	return
}

// BackRepoVisualIcon.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVisualIcon *BackRepoVisualIconStruct) CheckoutPhaseOne() (Error error) {

	visualiconDBArray := make([]VisualIconDB, 0)
	query := backRepoVisualIcon.db.Find(&visualiconDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	visualiconInstancesToBeRemovedFromTheStage := make(map[*models.VisualIcon]struct{})
	for key, value := range models.Stage.VisualIcons {
		visualiconInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, visualiconDB := range visualiconDBArray {
		backRepoVisualIcon.CheckoutPhaseOneInstance(&visualiconDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		visualicon, ok := (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr)[visualiconDB.ID]
		if ok {
			delete(visualiconInstancesToBeRemovedFromTheStage, visualicon)
		}
	}

	// remove from stage and back repo's 3 maps all visualicons that are not in the checkout
	for visualicon := range visualiconInstancesToBeRemovedFromTheStage {
		visualicon.Unstage()

		// remove instance from the back repo 3 maps
		visualiconID := (*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon]
		delete((*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID), visualicon)
		delete((*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB), visualiconID)
		delete((*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr), visualiconID)
	}

	return
}

// CheckoutPhaseOneInstance takes a visualiconDB that has been found in the DB, updates the backRepo and stages the
// models version of the visualiconDB
func (backRepoVisualIcon *BackRepoVisualIconStruct) CheckoutPhaseOneInstance(visualiconDB *VisualIconDB) (Error error) {

	visualicon, ok := (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr)[visualiconDB.ID]
	if !ok {
		visualicon = new(models.VisualIcon)

		(*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr)[visualiconDB.ID] = visualicon
		(*backRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon] = visualiconDB.ID

		// append model store with the new element
		visualicon.Name = visualiconDB.Name_Data.String
		visualicon.Stage()
	}
	visualiconDB.CopyBasicFieldsToVisualIcon(visualicon)

	// preserve pointer to visualiconDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VisualIconDBID_VisualIconDB)[visualiconDB hold variable pointers
	visualiconDB_Data := *visualiconDB
	preservedPtrToVisualIcon := &visualiconDB_Data
	(*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB)[visualiconDB.ID] = preservedPtrToVisualIcon

	return
}

// BackRepoVisualIcon.CheckoutPhaseTwo Checkouts all staged instances of VisualIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualIcon *BackRepoVisualIconStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visualiconDB := range *backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB {
		backRepoVisualIcon.CheckoutPhaseTwoInstance(backRepo, visualiconDB)
	}
	return
}

// BackRepoVisualIcon.CheckoutPhaseTwoInstance Checkouts staged instances of VisualIcon to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualIcon *BackRepoVisualIconStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visualiconDB *VisualIconDB) (Error error) {

	visualicon := (*backRepoVisualIcon.Map_VisualIconDBID_VisualIconPtr)[visualiconDB.ID]
	_ = visualicon // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitVisualIcon allows commit of a single visualicon (if already staged)
func (backRepo *BackRepoStruct) CommitVisualIcon(visualicon *models.VisualIcon) {
	backRepo.BackRepoVisualIcon.CommitPhaseOneInstance(visualicon)
	if id, ok := (*backRepo.BackRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon]; ok {
		backRepo.BackRepoVisualIcon.CommitPhaseTwoInstance(backRepo, id, visualicon)
	}
}

// CommitVisualIcon allows checkout of a single visualicon (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualIcon(visualicon *models.VisualIcon) {
	// check if the visualicon is staged
	if _, ok := (*backRepo.BackRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon]; ok {

		if id, ok := (*backRepo.BackRepoVisualIcon.Map_VisualIconPtr_VisualIconDBID)[visualicon]; ok {
			var visualiconDB VisualIconDB
			visualiconDB.ID = id

			if err := backRepo.BackRepoVisualIcon.db.First(&visualiconDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualIcon : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualIcon.CheckoutPhaseOneInstance(&visualiconDB)
			backRepo.BackRepoVisualIcon.CheckoutPhaseTwoInstance(backRepo, &visualiconDB)
		}
	}
}

// CopyBasicFieldsFromVisualIcon
func (visualiconDB *VisualIconDB) CopyBasicFieldsFromVisualIcon(visualicon *models.VisualIcon) {
	// insertion point for fields commit
	visualiconDB.Name_Data.String = visualicon.Name
	visualiconDB.Name_Data.Valid = true

	visualiconDB.SVG_Data.String = visualicon.SVG
	visualiconDB.SVG_Data.Valid = true

}

// CopyBasicFieldsFromVisualIconWOP
func (visualiconDB *VisualIconDB) CopyBasicFieldsFromVisualIconWOP(visualicon *VisualIconWOP) {
	// insertion point for fields commit
	visualiconDB.Name_Data.String = visualicon.Name
	visualiconDB.Name_Data.Valid = true

	visualiconDB.SVG_Data.String = visualicon.SVG
	visualiconDB.SVG_Data.Valid = true

}

// CopyBasicFieldsToVisualIcon
func (visualiconDB *VisualIconDB) CopyBasicFieldsToVisualIcon(visualicon *models.VisualIcon) {
	// insertion point for checkout of basic fields (back repo to stage)
	visualicon.Name = visualiconDB.Name_Data.String
	visualicon.SVG = visualiconDB.SVG_Data.String
}

// CopyBasicFieldsToVisualIconWOP
func (visualiconDB *VisualIconDB) CopyBasicFieldsToVisualIconWOP(visualicon *VisualIconWOP) {
	visualicon.ID = int(visualiconDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	visualicon.Name = visualiconDB.Name_Data.String
	visualicon.SVG = visualiconDB.SVG_Data.String
}

// Backup generates a json file from a slice of all VisualIconDB instances in the backrepo
func (backRepoVisualIcon *BackRepoVisualIconStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VisualIconDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualIconDB, 0)
	for _, visualiconDB := range *backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB {
		forBackup = append(forBackup, visualiconDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VisualIcon ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VisualIcon file", err.Error())
	}
}

// Backup generates a json file from a slice of all VisualIconDB instances in the backrepo
func (backRepoVisualIcon *BackRepoVisualIconStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualIconDB, 0)
	for _, visualiconDB := range *backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB {
		forBackup = append(forBackup, visualiconDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VisualIcon")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VisualIcon_Fields, -1)
	for _, visualiconDB := range forBackup {

		var visualiconWOP VisualIconWOP
		visualiconDB.CopyBasicFieldsToVisualIconWOP(&visualiconWOP)

		row := sh.AddRow()
		row.WriteStruct(&visualiconWOP, -1)
	}
}

// RestorePhaseOne read the file "VisualIconDB.json" in dirPath that stores an array
// of VisualIconDB and stores it in the database
// the map BackRepoVisualIconid_atBckpTime_newID is updated accordingly
func (backRepoVisualIcon *BackRepoVisualIconStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVisualIconid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VisualIconDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VisualIcon file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VisualIconDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VisualIconDBID_VisualIconDB
	for _, visualiconDB := range forRestore {

		visualiconDB_ID_atBackupTime := visualiconDB.ID
		visualiconDB.ID = 0
		query := backRepoVisualIcon.db.Create(visualiconDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB)[visualiconDB.ID] = visualiconDB
		BackRepoVisualIconid_atBckpTime_newID[visualiconDB_ID_atBackupTime] = visualiconDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VisualIcon file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VisualIcon>id_atBckpTime_newID
// to compute new index
func (backRepoVisualIcon *BackRepoVisualIconStruct) RestorePhaseTwo() {

	for _, visualiconDB := range *backRepoVisualIcon.Map_VisualIconDBID_VisualIconDB {

		// next line of code is to avert unused variable compilation error
		_ = visualiconDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoVisualIcon.db.Model(visualiconDB).Updates(*visualiconDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVisualIconid_atBckpTime_newID map[uint]uint
