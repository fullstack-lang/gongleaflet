// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualLine_sql sql.NullBool
var dummy_VisualLine_time time.Duration
var dummy_VisualLine_sort sort.Float64Slice

// VisualLineAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visuallineAPI
type VisualLineAPI struct {
	gorm.Model

	models.VisualLine

	// encoding of pointers
	VisualLinePointersEnconding
}

// VisualLinePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VisualLinePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field LayerGroup is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LayerGroupID sql.NullInt64
}

// VisualLineDB describes a visualline in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model visuallineDB
type VisualLineDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field visuallineDB.StartLat {{BasicKind}} (to be completed)
	StartLat_Data sql.NullFloat64

	// Declation for basic field visuallineDB.StartLng {{BasicKind}} (to be completed)
	StartLng_Data sql.NullFloat64

	// Declation for basic field visuallineDB.EndLat {{BasicKind}} (to be completed)
	EndLat_Data sql.NullFloat64

	// Declation for basic field visuallineDB.EndLng {{BasicKind}} (to be completed)
	EndLng_Data sql.NullFloat64

	// Declation for basic field visuallineDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visuallineDB.VisualColorEnum {{BasicKind}} (to be completed)
	VisualColorEnum_Data sql.NullString

	// Declation for basic field visuallineDB.DashStyleEnum {{BasicKind}} (to be completed)
	DashStyleEnum_Data sql.NullString

	// Declation for basic field visuallineDB.IsTransmitting {{BasicKind}} (to be completed)
	IsTransmitting_Data sql.NullString

	// Declation for basic field visuallineDB.Message {{BasicKind}} (to be completed)
	Message_Data sql.NullString

	// Declation for basic field visuallineDB.IsTransmittingBackward {{BasicKind}} (to be completed)
	IsTransmittingBackward_Data sql.NullString

	// Declation for basic field visuallineDB.MessageBackward {{BasicKind}} (to be completed)
	MessageBackward_Data sql.NullString
	// encoding of pointers
	VisualLinePointersEnconding
}

// VisualLineDBs arrays visuallineDBs
// swagger:response visuallineDBsResponse
type VisualLineDBs []VisualLineDB

// VisualLineDBResponse provides response
// swagger:response visuallineDBResponse
type VisualLineDBResponse struct {
	VisualLineDB
}

// VisualLineWOP is a VisualLine without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VisualLineWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	StartLat float64 `xlsx:"1"`

	StartLng float64 `xlsx:"2"`

	EndLat float64 `xlsx:"3"`

	EndLng float64 `xlsx:"4"`

	Name string `xlsx:"5"`

	VisualColorEnum models.VisualColorEnum `xlsx:"6"`

	DashStyleEnum models.DashStyleEnum `xlsx:"7"`

	IsTransmitting models.TransmittingEnum `xlsx:"8"`

	Message string `xlsx:"9"`

	IsTransmittingBackward models.TransmittingEnum `xlsx:"10"`

	MessageBackward string `xlsx:"11"`
	// insertion for WOP pointer fields
}

var VisualLine_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"StartLat",
	"StartLng",
	"EndLat",
	"EndLng",
	"Name",
	"VisualColorEnum",
	"DashStyleEnum",
	"IsTransmitting",
	"Message",
	"IsTransmittingBackward",
	"MessageBackward",
}

type BackRepoVisualLineStruct struct {
	// stores VisualLineDB according to their gorm ID
	Map_VisualLineDBID_VisualLineDB *map[uint]*VisualLineDB

	// stores VisualLineDB ID according to VisualLine address
	Map_VisualLinePtr_VisualLineDBID *map[*models.VisualLine]uint

	// stores VisualLine according to their gorm ID
	Map_VisualLineDBID_VisualLinePtr *map[uint]*models.VisualLine

	db *gorm.DB
}

func (backRepoVisualLine *BackRepoVisualLineStruct) GetDB() *gorm.DB {
	return backRepoVisualLine.db
}

// GetVisualLineDBFromVisualLinePtr is a handy function to access the back repo instance from the stage instance
func (backRepoVisualLine *BackRepoVisualLineStruct) GetVisualLineDBFromVisualLinePtr(visualline *models.VisualLine) (visuallineDB *VisualLineDB) {
	id := (*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline]
	visuallineDB = (*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[id]
	return
}

// BackRepoVisualLine.Init set up the BackRepo of the VisualLine
func (backRepoVisualLine *BackRepoVisualLineStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr != nil {
		err := errors.New("In Init, backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr should be nil")
		return err
	}

	if backRepoVisualLine.Map_VisualLineDBID_VisualLineDB != nil {
		err := errors.New("In Init, backRepoVisualLine.Map_VisualLineDBID_VisualLineDB should be nil")
		return err
	}

	if backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID != nil {
		err := errors.New("In Init, backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualLine, 0)
	backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr = &tmp

	tmpDB := make(map[uint]*VisualLineDB, 0)
	backRepoVisualLine.Map_VisualLineDBID_VisualLineDB = &tmpDB

	tmpID := make(map[*models.VisualLine]uint, 0)
	backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID = &tmpID

	backRepoVisualLine.db = db
	return
}

// BackRepoVisualLine.CommitPhaseOne commits all staged instances of VisualLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualLine *BackRepoVisualLineStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visualline := range stage.VisualLines {
		backRepoVisualLine.CommitPhaseOneInstance(visualline)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visualline := range *backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr {
		if _, ok := stage.VisualLines[visualline]; !ok {
			backRepoVisualLine.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualLine.CommitDeleteInstance commits deletion of VisualLine to the BackRepo
func (backRepoVisualLine *BackRepoVisualLineStruct) CommitDeleteInstance(id uint) (Error error) {

	visualline := (*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[id]

	// visualline is not staged anymore, remove visuallineDB
	visuallineDB := (*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[id]
	query := backRepoVisualLine.db.Unscoped().Delete(&visuallineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID), visualline)
	delete((*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr), id)
	delete((*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB), id)

	return
}

// BackRepoVisualLine.CommitPhaseOneInstance commits visualline staged instances of VisualLine to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualLine *BackRepoVisualLineStruct) CommitPhaseOneInstance(visualline *models.VisualLine) (Error error) {

	// check if the visualline is not commited yet
	if _, ok := (*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline]; ok {
		return
	}

	// initiate visualline
	var visuallineDB VisualLineDB
	visuallineDB.CopyBasicFieldsFromVisualLine(visualline)

	query := backRepoVisualLine.db.Create(&visuallineDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline] = visuallineDB.ID
	(*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[visuallineDB.ID] = visualline
	(*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[visuallineDB.ID] = &visuallineDB

	return
}

// BackRepoVisualLine.CommitPhaseTwo commits all staged instances of VisualLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLine *BackRepoVisualLineStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visualline := range *backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr {
		backRepoVisualLine.CommitPhaseTwoInstance(backRepo, idx, visualline)
	}

	return
}

// BackRepoVisualLine.CommitPhaseTwoInstance commits {{structname }} of models.VisualLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLine *BackRepoVisualLineStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visualline *models.VisualLine) (Error error) {

	// fetch matching visuallineDB
	if visuallineDB, ok := (*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[idx]; ok {

		visuallineDB.CopyBasicFieldsFromVisualLine(visualline)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value visualline.LayerGroup translates to updating the visualline.LayerGroupID
		visuallineDB.LayerGroupID.Valid = true // allow for a 0 value (nil association)
		if visualline.LayerGroup != nil {
			if LayerGroupId, ok := (*backRepo.BackRepoLayerGroup.Map_LayerGroupPtr_LayerGroupDBID)[visualline.LayerGroup]; ok {
				visuallineDB.LayerGroupID.Int64 = int64(LayerGroupId)
				visuallineDB.LayerGroupID.Valid = true
			}
		}

		query := backRepoVisualLine.db.Save(&visuallineDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualLine intance %s", visualline.Name))
		return err
	}

	return
}

// BackRepoVisualLine.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVisualLine *BackRepoVisualLineStruct) CheckoutPhaseOne() (Error error) {

	visuallineDBArray := make([]VisualLineDB, 0)
	query := backRepoVisualLine.db.Find(&visuallineDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	visuallineInstancesToBeRemovedFromTheStage := make(map[*models.VisualLine]struct{})
	for key, value := range models.Stage.VisualLines {
		visuallineInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, visuallineDB := range visuallineDBArray {
		backRepoVisualLine.CheckoutPhaseOneInstance(&visuallineDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		visualline, ok := (*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[visuallineDB.ID]
		if ok {
			delete(visuallineInstancesToBeRemovedFromTheStage, visualline)
		}
	}

	// remove from stage and back repo's 3 maps all visuallines that are not in the checkout
	for visualline := range visuallineInstancesToBeRemovedFromTheStage {
		visualline.Unstage()

		// remove instance from the back repo 3 maps
		visuallineID := (*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline]
		delete((*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID), visualline)
		delete((*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB), visuallineID)
		delete((*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr), visuallineID)
	}

	return
}

// CheckoutPhaseOneInstance takes a visuallineDB that has been found in the DB, updates the backRepo and stages the
// models version of the visuallineDB
func (backRepoVisualLine *BackRepoVisualLineStruct) CheckoutPhaseOneInstance(visuallineDB *VisualLineDB) (Error error) {

	visualline, ok := (*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[visuallineDB.ID]
	if !ok {
		visualline = new(models.VisualLine)

		(*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[visuallineDB.ID] = visualline
		(*backRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline] = visuallineDB.ID

		// append model store with the new element
		visualline.Name = visuallineDB.Name_Data.String
		visualline.Stage()
	}
	visuallineDB.CopyBasicFieldsToVisualLine(visualline)

	// preserve pointer to visuallineDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VisualLineDBID_VisualLineDB)[visuallineDB hold variable pointers
	visuallineDB_Data := *visuallineDB
	preservedPtrToVisualLine := &visuallineDB_Data
	(*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[visuallineDB.ID] = preservedPtrToVisualLine

	return
}

// BackRepoVisualLine.CheckoutPhaseTwo Checkouts all staged instances of VisualLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLine *BackRepoVisualLineStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visuallineDB := range *backRepoVisualLine.Map_VisualLineDBID_VisualLineDB {
		backRepoVisualLine.CheckoutPhaseTwoInstance(backRepo, visuallineDB)
	}
	return
}

// BackRepoVisualLine.CheckoutPhaseTwoInstance Checkouts staged instances of VisualLine to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLine *BackRepoVisualLineStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visuallineDB *VisualLineDB) (Error error) {

	visualline := (*backRepoVisualLine.Map_VisualLineDBID_VisualLinePtr)[visuallineDB.ID]
	_ = visualline // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// LayerGroup field
	if visuallineDB.LayerGroupID.Int64 != 0 {
		visualline.LayerGroup = (*backRepo.BackRepoLayerGroup.Map_LayerGroupDBID_LayerGroupPtr)[uint(visuallineDB.LayerGroupID.Int64)]
	}
	return
}

// CommitVisualLine allows commit of a single visualline (if already staged)
func (backRepo *BackRepoStruct) CommitVisualLine(visualline *models.VisualLine) {
	backRepo.BackRepoVisualLine.CommitPhaseOneInstance(visualline)
	if id, ok := (*backRepo.BackRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline]; ok {
		backRepo.BackRepoVisualLine.CommitPhaseTwoInstance(backRepo, id, visualline)
	}
}

// CommitVisualLine allows checkout of a single visualline (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualLine(visualline *models.VisualLine) {
	// check if the visualline is staged
	if _, ok := (*backRepo.BackRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline]; ok {

		if id, ok := (*backRepo.BackRepoVisualLine.Map_VisualLinePtr_VisualLineDBID)[visualline]; ok {
			var visuallineDB VisualLineDB
			visuallineDB.ID = id

			if err := backRepo.BackRepoVisualLine.db.First(&visuallineDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualLine : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualLine.CheckoutPhaseOneInstance(&visuallineDB)
			backRepo.BackRepoVisualLine.CheckoutPhaseTwoInstance(backRepo, &visuallineDB)
		}
	}
}

// CopyBasicFieldsFromVisualLine
func (visuallineDB *VisualLineDB) CopyBasicFieldsFromVisualLine(visualline *models.VisualLine) {
	// insertion point for fields commit

	visuallineDB.StartLat_Data.Float64 = visualline.StartLat
	visuallineDB.StartLat_Data.Valid = true

	visuallineDB.StartLng_Data.Float64 = visualline.StartLng
	visuallineDB.StartLng_Data.Valid = true

	visuallineDB.EndLat_Data.Float64 = visualline.EndLat
	visuallineDB.EndLat_Data.Valid = true

	visuallineDB.EndLng_Data.Float64 = visualline.EndLng
	visuallineDB.EndLng_Data.Valid = true

	visuallineDB.Name_Data.String = visualline.Name
	visuallineDB.Name_Data.Valid = true

	visuallineDB.VisualColorEnum_Data.String = string(visualline.VisualColorEnum)
	visuallineDB.VisualColorEnum_Data.Valid = true

	visuallineDB.DashStyleEnum_Data.String = string(visualline.DashStyleEnum)
	visuallineDB.DashStyleEnum_Data.Valid = true

	visuallineDB.IsTransmitting_Data.String = string(visualline.IsTransmitting)
	visuallineDB.IsTransmitting_Data.Valid = true

	visuallineDB.Message_Data.String = visualline.Message
	visuallineDB.Message_Data.Valid = true

	visuallineDB.IsTransmittingBackward_Data.String = string(visualline.IsTransmittingBackward)
	visuallineDB.IsTransmittingBackward_Data.Valid = true

	visuallineDB.MessageBackward_Data.String = visualline.MessageBackward
	visuallineDB.MessageBackward_Data.Valid = true
}

// CopyBasicFieldsFromVisualLineWOP
func (visuallineDB *VisualLineDB) CopyBasicFieldsFromVisualLineWOP(visualline *VisualLineWOP) {
	// insertion point for fields commit

	visuallineDB.StartLat_Data.Float64 = visualline.StartLat
	visuallineDB.StartLat_Data.Valid = true

	visuallineDB.StartLng_Data.Float64 = visualline.StartLng
	visuallineDB.StartLng_Data.Valid = true

	visuallineDB.EndLat_Data.Float64 = visualline.EndLat
	visuallineDB.EndLat_Data.Valid = true

	visuallineDB.EndLng_Data.Float64 = visualline.EndLng
	visuallineDB.EndLng_Data.Valid = true

	visuallineDB.Name_Data.String = visualline.Name
	visuallineDB.Name_Data.Valid = true

	visuallineDB.VisualColorEnum_Data.String = string(visualline.VisualColorEnum)
	visuallineDB.VisualColorEnum_Data.Valid = true

	visuallineDB.DashStyleEnum_Data.String = string(visualline.DashStyleEnum)
	visuallineDB.DashStyleEnum_Data.Valid = true

	visuallineDB.IsTransmitting_Data.String = string(visualline.IsTransmitting)
	visuallineDB.IsTransmitting_Data.Valid = true

	visuallineDB.Message_Data.String = visualline.Message
	visuallineDB.Message_Data.Valid = true

	visuallineDB.IsTransmittingBackward_Data.String = string(visualline.IsTransmittingBackward)
	visuallineDB.IsTransmittingBackward_Data.Valid = true

	visuallineDB.MessageBackward_Data.String = visualline.MessageBackward
	visuallineDB.MessageBackward_Data.Valid = true
}

// CopyBasicFieldsToVisualLine
func (visuallineDB *VisualLineDB) CopyBasicFieldsToVisualLine(visualline *models.VisualLine) {
	// insertion point for checkout of basic fields (back repo to stage)
	visualline.StartLat = visuallineDB.StartLat_Data.Float64
	visualline.StartLng = visuallineDB.StartLng_Data.Float64
	visualline.EndLat = visuallineDB.EndLat_Data.Float64
	visualline.EndLng = visuallineDB.EndLng_Data.Float64
	visualline.Name = visuallineDB.Name_Data.String
	visualline.VisualColorEnum = models.VisualColorEnum(visuallineDB.VisualColorEnum_Data.String)
	visualline.DashStyleEnum = models.DashStyleEnum(visuallineDB.DashStyleEnum_Data.String)
	visualline.IsTransmitting = models.TransmittingEnum(visuallineDB.IsTransmitting_Data.String)
	visualline.Message = visuallineDB.Message_Data.String
	visualline.IsTransmittingBackward = models.TransmittingEnum(visuallineDB.IsTransmittingBackward_Data.String)
	visualline.MessageBackward = visuallineDB.MessageBackward_Data.String
}

// CopyBasicFieldsToVisualLineWOP
func (visuallineDB *VisualLineDB) CopyBasicFieldsToVisualLineWOP(visualline *VisualLineWOP) {
	visualline.ID = int(visuallineDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	visualline.StartLat = visuallineDB.StartLat_Data.Float64
	visualline.StartLng = visuallineDB.StartLng_Data.Float64
	visualline.EndLat = visuallineDB.EndLat_Data.Float64
	visualline.EndLng = visuallineDB.EndLng_Data.Float64
	visualline.Name = visuallineDB.Name_Data.String
	visualline.VisualColorEnum = models.VisualColorEnum(visuallineDB.VisualColorEnum_Data.String)
	visualline.DashStyleEnum = models.DashStyleEnum(visuallineDB.DashStyleEnum_Data.String)
	visualline.IsTransmitting = models.TransmittingEnum(visuallineDB.IsTransmitting_Data.String)
	visualline.Message = visuallineDB.Message_Data.String
	visualline.IsTransmittingBackward = models.TransmittingEnum(visuallineDB.IsTransmittingBackward_Data.String)
	visualline.MessageBackward = visuallineDB.MessageBackward_Data.String
}

// Backup generates a json file from a slice of all VisualLineDB instances in the backrepo
func (backRepoVisualLine *BackRepoVisualLineStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VisualLineDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualLineDB, 0)
	for _, visuallineDB := range *backRepoVisualLine.Map_VisualLineDBID_VisualLineDB {
		forBackup = append(forBackup, visuallineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VisualLine ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VisualLine file", err.Error())
	}
}

// Backup generates a json file from a slice of all VisualLineDB instances in the backrepo
func (backRepoVisualLine *BackRepoVisualLineStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualLineDB, 0)
	for _, visuallineDB := range *backRepoVisualLine.Map_VisualLineDBID_VisualLineDB {
		forBackup = append(forBackup, visuallineDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VisualLine")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VisualLine_Fields, -1)
	for _, visuallineDB := range forBackup {

		var visuallineWOP VisualLineWOP
		visuallineDB.CopyBasicFieldsToVisualLineWOP(&visuallineWOP)

		row := sh.AddRow()
		row.WriteStruct(&visuallineWOP, -1)
	}
}

// RestoreXL from the "VisualLine" sheet all VisualLineDB instances
func (backRepoVisualLine *BackRepoVisualLineStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoVisualLineid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["VisualLine"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoVisualLine.rowVisitorVisualLine)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoVisualLine *BackRepoVisualLineStruct) rowVisitorVisualLine(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var visuallineWOP VisualLineWOP
		row.ReadStruct(&visuallineWOP)

		// add the unmarshalled struct to the stage
		visuallineDB := new(VisualLineDB)
		visuallineDB.CopyBasicFieldsFromVisualLineWOP(&visuallineWOP)

		visuallineDB_ID_atBackupTime := visuallineDB.ID
		visuallineDB.ID = 0
		query := backRepoVisualLine.db.Create(visuallineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[visuallineDB.ID] = visuallineDB
		BackRepoVisualLineid_atBckpTime_newID[visuallineDB_ID_atBackupTime] = visuallineDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "VisualLineDB.json" in dirPath that stores an array
// of VisualLineDB and stores it in the database
// the map BackRepoVisualLineid_atBckpTime_newID is updated accordingly
func (backRepoVisualLine *BackRepoVisualLineStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVisualLineid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VisualLineDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VisualLine file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VisualLineDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VisualLineDBID_VisualLineDB
	for _, visuallineDB := range forRestore {

		visuallineDB_ID_atBackupTime := visuallineDB.ID
		visuallineDB.ID = 0
		query := backRepoVisualLine.db.Create(visuallineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualLine.Map_VisualLineDBID_VisualLineDB)[visuallineDB.ID] = visuallineDB
		BackRepoVisualLineid_atBckpTime_newID[visuallineDB_ID_atBackupTime] = visuallineDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VisualLine file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VisualLine>id_atBckpTime_newID
// to compute new index
func (backRepoVisualLine *BackRepoVisualLineStruct) RestorePhaseTwo() {

	for _, visuallineDB := range *backRepoVisualLine.Map_VisualLineDBID_VisualLineDB {

		// next line of code is to avert unused variable compilation error
		_ = visuallineDB

		// insertion point for reindexing pointers encoding
		// reindexing LayerGroup field
		if visuallineDB.LayerGroupID.Int64 != 0 {
			visuallineDB.LayerGroupID.Int64 = int64(BackRepoLayerGroupid_atBckpTime_newID[uint(visuallineDB.LayerGroupID.Int64)])
			visuallineDB.LayerGroupID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoVisualLine.db.Model(visuallineDB).Updates(*visuallineDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVisualLineid_atBckpTime_newID map[uint]uint
