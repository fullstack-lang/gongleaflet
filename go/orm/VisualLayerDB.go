// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import database/sql wihthout compile failure id no sql is used
var dummy_VisualLayer sql.NullBool
var __VisualLayer_time__dummyDeclaration time.Duration

// VisualLayerAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visuallayerAPI
type VisualLayerAPI struct {
	models.VisualLayer

	// insertion for fields declaration
	// Declation for basic field visuallayerDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visuallayerDB.DisplayName {{BasicKind}} (to be completed)
	DisplayName_Data sql.NullString

	// end of insertion
}

// VisualLayerDB describes a visuallayer in the database
//
// It incorporates all fields : from the model, from the generated field for the API and the GORM ID
//
// swagger:model visuallayerDB
type VisualLayerDB struct {
	gorm.Model

	VisualLayerAPI
}

// VisualLayerDBs arrays visuallayerDBs
// swagger:response visuallayerDBsResponse
type VisualLayerDBs []VisualLayerDB

// VisualLayerDBResponse provides response
// swagger:response visuallayerDBResponse
type VisualLayerDBResponse struct {
	VisualLayerDB
}

type BackRepoVisualLayerStruct struct {
	// stores VisualLayerDB according to their gorm ID
	Map_VisualLayerDBID_VisualLayerDB *map[uint]*VisualLayerDB

	// stores VisualLayerDB ID according to VisualLayer address
	Map_VisualLayerPtr_VisualLayerDBID *map[*models.VisualLayer]uint

	// stores VisualLayer according to their gorm ID
	Map_VisualLayerDBID_VisualLayerPtr *map[uint]*models.VisualLayer

	db *gorm.DB
}

// BackRepoVisualLayer.Init set up the BackRepo of the VisualLayer
func (backRepoVisualLayer *BackRepoVisualLayerStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr != nil {
		err := errors.New("In Init, backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr should be nil")
		return err
	}

	if backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB != nil {
		err := errors.New("In Init, backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB should be nil")
		return err
	}

	if backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID != nil {
		err := errors.New("In Init, backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualLayer, 0)
	backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr = &tmp

	tmpDB := make(map[uint]*VisualLayerDB, 0)
	backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB = &tmpDB

	tmpID := make(map[*models.VisualLayer]uint, 0)
	backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID = &tmpID

	backRepoVisualLayer.db = db
	return
}

// BackRepoVisualLayer.CommitPhaseOne commits all staged instances of VisualLayer to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visuallayer := range stage.VisualLayers {
		backRepoVisualLayer.CommitPhaseOneInstance(visuallayer)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visuallayer := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr {
		if _, ok := stage.VisualLayers[visuallayer]; !ok {
			backRepoVisualLayer.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualLayer.CommitDeleteInstance commits deletion of VisualLayer to the BackRepo
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitDeleteInstance(id uint) (Error error) {

	visuallayer := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[id]

	// visuallayer is not staged anymore, remove visuallayerDB
	visuallayerDB := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[id]
	query := backRepoVisualLayer.db.Unscoped().Delete(&visuallayerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID), visuallayer)
	delete((*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr), id)
	delete((*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB), id)

	return
}

// BackRepoVisualLayer.CommitPhaseOneInstance commits visuallayer staged instances of VisualLayer to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseOneInstance(visuallayer *models.VisualLayer) (Error error) {

	// check if the visuallayer is not commited yet
	if _, ok := (*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {
		return
	}

	// initiate visuallayer
	var visuallayerDB VisualLayerDB
	visuallayerDB.VisualLayer = *visuallayer

	query := backRepoVisualLayer.db.Create(&visuallayerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer] = visuallayerDB.ID
	(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID] = visuallayer
	(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[visuallayerDB.ID] = &visuallayerDB

	return
}

// BackRepoVisualLayer.CommitPhaseTwo commits all staged instances of VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visuallayer := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr {
		backRepoVisualLayer.CommitPhaseTwoInstance(backRepo, idx, visuallayer)
	}

	return
}

// BackRepoVisualLayer.CommitPhaseTwoInstance commits {{structname }} of models.VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visuallayer *models.VisualLayer) (Error error) {

	// fetch matching visuallayerDB
	if visuallayerDB, ok := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[idx]; ok {

		{
			{
				// insertion point for fields commit
				visuallayerDB.Name_Data.String = visuallayer.Name
				visuallayerDB.Name_Data.Valid = true

				visuallayerDB.DisplayName_Data.String = visuallayer.DisplayName
				visuallayerDB.DisplayName_Data.Valid = true

			}
		}
		query := backRepoVisualLayer.db.Save(&visuallayerDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualLayer intance %s", visuallayer.Name))
		return err
	}

	return
}

// BackRepoVisualLayer.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One is the creation of instance in the stage
//
// NOTE: the is supposed to have been reset before
//
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseOne() (Error error) {

	visuallayerDBArray := make([]VisualLayerDB, 0)
	query := backRepoVisualLayer.db.Find(&visuallayerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// copy orm objects to the the map
	for _, visuallayerDB := range visuallayerDBArray {
		backRepoVisualLayer.CheckoutPhaseOneInstance(&visuallayerDB)
	}

	return
}

// CheckoutPhaseOneInstance takes a visuallayerDB that has been found in the DB, updates the backRepo and stages the
// models version of the visuallayerDB
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseOneInstance(visuallayerDB *VisualLayerDB) (Error error) {

	// if absent, create entries in the backRepoVisualLayer maps.
	visuallayerWithNewFieldValues := visuallayerDB.VisualLayer
	if _, ok := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID]; !ok {

		(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID] = &visuallayerWithNewFieldValues
		(*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[&visuallayerWithNewFieldValues] = visuallayerDB.ID

		// append model store with the new element
		visuallayerWithNewFieldValues.Stage()
	}
	visuallayerDBWithNewFieldValues := *visuallayerDB
	(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[visuallayerDB.ID] = &visuallayerDBWithNewFieldValues

	return
}

// BackRepoVisualLayer.CheckoutPhaseTwo Checkouts all staged instances of VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visuallayerDB := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB {
		backRepoVisualLayer.CheckoutPhaseTwoInstance(backRepo, visuallayerDB)
	}
	return
}

// BackRepoVisualLayer.CheckoutPhaseTwoInstance Checkouts staged instances of VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visuallayerDB *VisualLayerDB) (Error error) {

	visuallayer := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID]
	_ = visuallayer // sometimes, there is no code generated. This lines voids the "unused variable" compilation error
	{
		{
			// insertion point for checkout, i.e. update of fields of stage instance from fields of back repo instances
			//
			visuallayer.Name = visuallayerDB.Name_Data.String

			visuallayer.DisplayName = visuallayerDB.DisplayName_Data.String

		}
	}
	return
}

// CommitVisualLayer allows commit of a single visuallayer (if already staged)
func (backRepo *BackRepoStruct) CommitVisualLayer(visuallayer *models.VisualLayer) {
	backRepo.BackRepoVisualLayer.CommitPhaseOneInstance(visuallayer)
	if id, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {
		backRepo.BackRepoVisualLayer.CommitPhaseTwoInstance(backRepo, id, visuallayer)
	}
}

// CommitVisualLayer allows checkout of a single visuallayer (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualLayer(visuallayer *models.VisualLayer) {
	// check if the visuallayer is staged
	if _, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {

		if id, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {
			var visuallayerDB VisualLayerDB
			visuallayerDB.ID = id

			if err := backRepo.BackRepoVisualLayer.db.First(&visuallayerDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualLayer : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualLayer.CheckoutPhaseOneInstance(&visuallayerDB)
			backRepo.BackRepoVisualLayer.CheckoutPhaseTwoInstance(backRepo, &visuallayerDB)
		}
	}
}
