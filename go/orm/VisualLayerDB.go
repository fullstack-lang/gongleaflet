// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongleaflet/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_VisualLayer_sql sql.NullBool
var dummy_VisualLayer_time time.Duration
var dummy_VisualLayer_sort sort.Float64Slice

// VisualLayerAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model visuallayerAPI
type VisualLayerAPI struct {
	gorm.Model

	models.VisualLayer

	// encoding of pointers
	VisualLayerPointersEnconding
}

// VisualLayerPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type VisualLayerPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// VisualLayerDB describes a visuallayer in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model visuallayerDB
type VisualLayerDB struct {
	gorm.Model

	// insertion for basic fields declaration
	// Declation for basic field visuallayerDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString

	// Declation for basic field visuallayerDB.DisplayName {{BasicKind}} (to be completed)
	DisplayName_Data sql.NullString

	// encoding of pointers
	VisualLayerPointersEnconding
}

// VisualLayerDBs arrays visuallayerDBs
// swagger:response visuallayerDBsResponse
type VisualLayerDBs []VisualLayerDB

// VisualLayerDBResponse provides response
// swagger:response visuallayerDBResponse
type VisualLayerDBResponse struct {
	VisualLayerDB
}

// VisualLayerWOP is a VisualLayer without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type VisualLayerWOP struct {
	ID int

	// insertion for WOP basic fields

	Name string

	DisplayName string
	// insertion for WOP pointer fields
}

var VisualLayer_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DisplayName",
}

type BackRepoVisualLayerStruct struct {
	// stores VisualLayerDB according to their gorm ID
	Map_VisualLayerDBID_VisualLayerDB *map[uint]*VisualLayerDB

	// stores VisualLayerDB ID according to VisualLayer address
	Map_VisualLayerPtr_VisualLayerDBID *map[*models.VisualLayer]uint

	// stores VisualLayer according to their gorm ID
	Map_VisualLayerDBID_VisualLayerPtr *map[uint]*models.VisualLayer

	db *gorm.DB
}

func (backRepoVisualLayer *BackRepoVisualLayerStruct) GetDB() *gorm.DB {
	return backRepoVisualLayer.db
}

// GetVisualLayerDBFromVisualLayerPtr is a handy function to access the back repo instance from the stage instance
func (backRepoVisualLayer *BackRepoVisualLayerStruct) GetVisualLayerDBFromVisualLayerPtr(visuallayer *models.VisualLayer) (visuallayerDB *VisualLayerDB) {
	id := (*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]
	visuallayerDB = (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[id]
	return
}

// BackRepoVisualLayer.Init set up the BackRepo of the VisualLayer
func (backRepoVisualLayer *BackRepoVisualLayerStruct) Init(db *gorm.DB) (Error error) {

	if backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr != nil {
		err := errors.New("In Init, backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr should be nil")
		return err
	}

	if backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB != nil {
		err := errors.New("In Init, backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB should be nil")
		return err
	}

	if backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID != nil {
		err := errors.New("In Init, backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.VisualLayer, 0)
	backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr = &tmp

	tmpDB := make(map[uint]*VisualLayerDB, 0)
	backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB = &tmpDB

	tmpID := make(map[*models.VisualLayer]uint, 0)
	backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID = &tmpID

	backRepoVisualLayer.db = db
	return
}

// BackRepoVisualLayer.CommitPhaseOne commits all staged instances of VisualLayer to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for visuallayer := range stage.VisualLayers {
		backRepoVisualLayer.CommitPhaseOneInstance(visuallayer)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, visuallayer := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr {
		if _, ok := stage.VisualLayers[visuallayer]; !ok {
			backRepoVisualLayer.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoVisualLayer.CommitDeleteInstance commits deletion of VisualLayer to the BackRepo
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitDeleteInstance(id uint) (Error error) {

	visuallayer := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[id]

	// visuallayer is not staged anymore, remove visuallayerDB
	visuallayerDB := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[id]
	query := backRepoVisualLayer.db.Unscoped().Delete(&visuallayerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID), visuallayer)
	delete((*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr), id)
	delete((*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB), id)

	return
}

// BackRepoVisualLayer.CommitPhaseOneInstance commits visuallayer staged instances of VisualLayer to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseOneInstance(visuallayer *models.VisualLayer) (Error error) {

	// check if the visuallayer is not commited yet
	if _, ok := (*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {
		return
	}

	// initiate visuallayer
	var visuallayerDB VisualLayerDB
	visuallayerDB.CopyBasicFieldsFromVisualLayer(visuallayer)

	query := backRepoVisualLayer.db.Create(&visuallayerDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer] = visuallayerDB.ID
	(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID] = visuallayer
	(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[visuallayerDB.ID] = &visuallayerDB

	return
}

// BackRepoVisualLayer.CommitPhaseTwo commits all staged instances of VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, visuallayer := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr {
		backRepoVisualLayer.CommitPhaseTwoInstance(backRepo, idx, visuallayer)
	}

	return
}

// BackRepoVisualLayer.CommitPhaseTwoInstance commits {{structname }} of models.VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, visuallayer *models.VisualLayer) (Error error) {

	// fetch matching visuallayerDB
	if visuallayerDB, ok := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[idx]; ok {

		visuallayerDB.CopyBasicFieldsFromVisualLayer(visuallayer)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoVisualLayer.db.Save(&visuallayerDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown VisualLayer intance %s", visuallayer.Name))
		return err
	}

	return
}

// BackRepoVisualLayer.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseOne() (Error error) {

	visuallayerDBArray := make([]VisualLayerDB, 0)
	query := backRepoVisualLayer.db.Find(&visuallayerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	visuallayerInstancesToBeRemovedFromTheStage := make(map[*models.VisualLayer]struct{})
	for key, value := range models.Stage.VisualLayers {
		visuallayerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, visuallayerDB := range visuallayerDBArray {
		backRepoVisualLayer.CheckoutPhaseOneInstance(&visuallayerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		visuallayer, ok := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID]
		if ok {
			delete(visuallayerInstancesToBeRemovedFromTheStage, visuallayer)
		}
	}

	// remove from stage and back repo's 3 maps all visuallayers that are not in the checkout
	for visuallayer := range visuallayerInstancesToBeRemovedFromTheStage {
		visuallayer.Unstage()

		// remove instance from the back repo 3 maps
		visuallayerID := (*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]
		delete((*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID), visuallayer)
		delete((*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB), visuallayerID)
		delete((*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr), visuallayerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a visuallayerDB that has been found in the DB, updates the backRepo and stages the
// models version of the visuallayerDB
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseOneInstance(visuallayerDB *VisualLayerDB) (Error error) {

	visuallayer, ok := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID]
	if !ok {
		visuallayer = new(models.VisualLayer)

		(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID] = visuallayer
		(*backRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer] = visuallayerDB.ID

		// append model store with the new element
		visuallayer.Name = visuallayerDB.Name_Data.String
		visuallayer.Stage()
	}
	visuallayerDB.CopyBasicFieldsToVisualLayer(visuallayer)

	// preserve pointer to visuallayerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_VisualLayerDBID_VisualLayerDB)[visuallayerDB hold variable pointers
	visuallayerDB_Data := *visuallayerDB
	preservedPtrToVisualLayer := &visuallayerDB_Data
	(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[visuallayerDB.ID] = preservedPtrToVisualLayer

	return
}

// BackRepoVisualLayer.CheckoutPhaseTwo Checkouts all staged instances of VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, visuallayerDB := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB {
		backRepoVisualLayer.CheckoutPhaseTwoInstance(backRepo, visuallayerDB)
	}
	return
}

// BackRepoVisualLayer.CheckoutPhaseTwoInstance Checkouts staged instances of VisualLayer to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoVisualLayer *BackRepoVisualLayerStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, visuallayerDB *VisualLayerDB) (Error error) {

	visuallayer := (*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerPtr)[visuallayerDB.ID]
	_ = visuallayer // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitVisualLayer allows commit of a single visuallayer (if already staged)
func (backRepo *BackRepoStruct) CommitVisualLayer(visuallayer *models.VisualLayer) {
	backRepo.BackRepoVisualLayer.CommitPhaseOneInstance(visuallayer)
	if id, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {
		backRepo.BackRepoVisualLayer.CommitPhaseTwoInstance(backRepo, id, visuallayer)
	}
}

// CommitVisualLayer allows checkout of a single visuallayer (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutVisualLayer(visuallayer *models.VisualLayer) {
	// check if the visuallayer is staged
	if _, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {

		if id, ok := (*backRepo.BackRepoVisualLayer.Map_VisualLayerPtr_VisualLayerDBID)[visuallayer]; ok {
			var visuallayerDB VisualLayerDB
			visuallayerDB.ID = id

			if err := backRepo.BackRepoVisualLayer.db.First(&visuallayerDB, id).Error; err != nil {
				log.Panicln("CheckoutVisualLayer : Problem with getting object with id:", id)
			}
			backRepo.BackRepoVisualLayer.CheckoutPhaseOneInstance(&visuallayerDB)
			backRepo.BackRepoVisualLayer.CheckoutPhaseTwoInstance(backRepo, &visuallayerDB)
		}
	}
}

// CopyBasicFieldsFromVisualLayer
func (visuallayerDB *VisualLayerDB) CopyBasicFieldsFromVisualLayer(visuallayer *models.VisualLayer) {
	// insertion point for fields commit
	visuallayerDB.Name_Data.String = visuallayer.Name
	visuallayerDB.Name_Data.Valid = true

	visuallayerDB.DisplayName_Data.String = visuallayer.DisplayName
	visuallayerDB.DisplayName_Data.Valid = true

}

// CopyBasicFieldsFromVisualLayerWOP
func (visuallayerDB *VisualLayerDB) CopyBasicFieldsFromVisualLayerWOP(visuallayer *VisualLayerWOP) {
	// insertion point for fields commit
	visuallayerDB.Name_Data.String = visuallayer.Name
	visuallayerDB.Name_Data.Valid = true

	visuallayerDB.DisplayName_Data.String = visuallayer.DisplayName
	visuallayerDB.DisplayName_Data.Valid = true

}

// CopyBasicFieldsToVisualLayer
func (visuallayerDB *VisualLayerDB) CopyBasicFieldsToVisualLayer(visuallayer *models.VisualLayer) {
	// insertion point for checkout of basic fields (back repo to stage)
	visuallayer.Name = visuallayerDB.Name_Data.String
	visuallayer.DisplayName = visuallayerDB.DisplayName_Data.String
}

// CopyBasicFieldsToVisualLayerWOP
func (visuallayerDB *VisualLayerDB) CopyBasicFieldsToVisualLayerWOP(visuallayer *VisualLayerWOP) {
	visuallayer.ID = int(visuallayerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	visuallayer.Name = visuallayerDB.Name_Data.String
	visuallayer.DisplayName = visuallayerDB.DisplayName_Data.String
}

// Backup generates a json file from a slice of all VisualLayerDB instances in the backrepo
func (backRepoVisualLayer *BackRepoVisualLayerStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "VisualLayerDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualLayerDB, 0)
	for _, visuallayerDB := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB {
		forBackup = append(forBackup, visuallayerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json VisualLayer ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json VisualLayer file", err.Error())
	}
}

// Backup generates a json file from a slice of all VisualLayerDB instances in the backrepo
func (backRepoVisualLayer *BackRepoVisualLayerStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*VisualLayerDB, 0)
	for _, visuallayerDB := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB {
		forBackup = append(forBackup, visuallayerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("VisualLayer")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&VisualLayer_Fields, -1)
	for _, visuallayerDB := range forBackup {

		var visuallayerWOP VisualLayerWOP
		visuallayerDB.CopyBasicFieldsToVisualLayerWOP(&visuallayerWOP)

		row := sh.AddRow()
		row.WriteStruct(&visuallayerWOP, -1)
	}
}

// RestorePhaseOne read the file "VisualLayerDB.json" in dirPath that stores an array
// of VisualLayerDB and stores it in the database
// the map BackRepoVisualLayerid_atBckpTime_newID is updated accordingly
func (backRepoVisualLayer *BackRepoVisualLayerStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoVisualLayerid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "VisualLayerDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json VisualLayer file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*VisualLayerDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_VisualLayerDBID_VisualLayerDB
	for _, visuallayerDB := range forRestore {

		visuallayerDB_ID_atBackupTime := visuallayerDB.ID
		visuallayerDB.ID = 0
		query := backRepoVisualLayer.db.Create(visuallayerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB)[visuallayerDB.ID] = visuallayerDB
		BackRepoVisualLayerid_atBckpTime_newID[visuallayerDB_ID_atBackupTime] = visuallayerDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json VisualLayer file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<VisualLayer>id_atBckpTime_newID
// to compute new index
func (backRepoVisualLayer *BackRepoVisualLayerStruct) RestorePhaseTwo() {

	for _, visuallayerDB := range *backRepoVisualLayer.Map_VisualLayerDBID_VisualLayerDB {

		// next line of code is to avert unused variable compilation error
		_ = visuallayerDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoVisualLayer.db.Model(visuallayerDB).Updates(*visuallayerDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoVisualLayerid_atBckpTime_newID map[uint]uint
